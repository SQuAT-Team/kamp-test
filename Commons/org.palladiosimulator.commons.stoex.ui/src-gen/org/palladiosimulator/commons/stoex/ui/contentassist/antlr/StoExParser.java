/*
 * generated by Xtext
 */
package org.palladiosimulator.commons.stoex.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.palladiosimulator.commons.stoex.services.StoExGrammarAccess;

public class StoExParser extends AbstractContentAssistParser {
	
	@Inject
	private StoExGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.palladiosimulator.commons.stoex.ui.contentassist.antlr.internal.InternalStoExParser createParser() {
		org.palladiosimulator.commons.stoex.ui.contentassist.antlr.internal.InternalStoExParser result = new org.palladiosimulator.commons.stoex.ui.contentassist.antlr.internal.InternalStoExParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getUnaryExprAccess().getAlternatives(), "rule__UnaryExpr__Alternatives");
					put(grammarAccess.getAtomAccess().getAlternatives(), "rule__Atom__Alternatives");
					put(grammarAccess.getAbstractNamedReferenceAccess().getAlternatives(), "rule__AbstractNamedReference__Alternatives");
					put(grammarAccess.getUnitAccess().getAlternatives(), "rule__Unit__Alternatives");
					put(grammarAccess.getUnitPowAccess().getAlternatives_0(), "rule__UnitPow__Alternatives_0");
					put(grammarAccess.getUnitPowAccess().getAlternatives_0_1_1(), "rule__UnitPow__Alternatives_0_1_1");
					put(grammarAccess.getDefinitionAccess().getAlternatives(), "rule__Definition__Alternatives");
					put(grammarAccess.getProbabilityMassFunctionAccess().getAlternatives(), "rule__ProbabilityMassFunction__Alternatives");
					put(grammarAccess.getBooleanOperationsAccess().getAlternatives(), "rule__BooleanOperations__Alternatives");
					put(grammarAccess.getOroperationsAccess().getAlternatives(), "rule__Oroperations__Alternatives");
					put(grammarAccess.getCompareOperationsAccess().getAlternatives(), "rule__CompareOperations__Alternatives");
					put(grammarAccess.getTermOperationsAccess().getAlternatives(), "rule__TermOperations__Alternatives");
					put(grammarAccess.getProductOperationsAccess().getAlternatives(), "rule__ProductOperations__Alternatives");
					put(grammarAccess.getUnitNamesAccess().getAlternatives(), "rule__UnitNames__Alternatives");
					put(grammarAccess.getIfelseExprAccess().getGroup(), "rule__IfelseExpr__Group__0");
					put(grammarAccess.getIfelseExprAccess().getGroup_1(), "rule__IfelseExpr__Group_1__0");
					put(grammarAccess.getBooleanExpressionAccess().getGroup(), "rule__BooleanExpression__Group__0");
					put(grammarAccess.getBooleanExpressionAccess().getGroup_1(), "rule__BooleanExpression__Group_1__0");
					put(grammarAccess.getBoolAndExprAccess().getGroup(), "rule__BoolAndExpr__Group__0");
					put(grammarAccess.getBoolAndExprAccess().getGroup_1(), "rule__BoolAndExpr__Group_1__0");
					put(grammarAccess.getBoolOrExprAccess().getGroup(), "rule__BoolOrExpr__Group__0");
					put(grammarAccess.getBoolOrExprAccess().getGroup_1(), "rule__BoolOrExpr__Group_1__0");
					put(grammarAccess.getCompareExprAccess().getGroup(), "rule__CompareExpr__Group__0");
					put(grammarAccess.getCompareExprAccess().getGroup_1(), "rule__CompareExpr__Group_1__0");
					put(grammarAccess.getSumExprAccess().getGroup(), "rule__SumExpr__Group__0");
					put(grammarAccess.getSumExprAccess().getGroup_1(), "rule__SumExpr__Group_1__0");
					put(grammarAccess.getProdExprAccess().getGroup(), "rule__ProdExpr__Group__0");
					put(grammarAccess.getProdExprAccess().getGroup_1(), "rule__ProdExpr__Group_1__0");
					put(grammarAccess.getPowExprAccess().getGroup(), "rule__PowExpr__Group__0");
					put(grammarAccess.getPowExprAccess().getGroup_1(), "rule__PowExpr__Group_1__0");
					put(grammarAccess.getNotExpressionAccess().getGroup(), "rule__NotExpression__Group__0");
					put(grammarAccess.getNegativeExpressionAccess().getGroup(), "rule__NegativeExpression__Group__0");
					put(grammarAccess.getDoubleLiteralAccess().getGroup(), "rule__DoubleLiteral__Group__0");
					put(grammarAccess.getDoubleLiteralAccess().getGroup_1(), "rule__DoubleLiteral__Group_1__0");
					put(grammarAccess.getParenthesisAccess().getGroup(), "rule__Parenthesis__Group__0");
					put(grammarAccess.getFunctionLiteralAccess().getGroup(), "rule__FunctionLiteral__Group__0");
					put(grammarAccess.getFunctionLiteralAccess().getGroup_2(), "rule__FunctionLiteral__Group_2__0");
					put(grammarAccess.getFunctionLiteralAccess().getGroup_2_1(), "rule__FunctionLiteral__Group_2_1__0");
					put(grammarAccess.getNamespaceReferenceAccess().getGroup(), "rule__NamespaceReference__Group__0");
					put(grammarAccess.getIntLiteralAccess().getGroup(), "rule__IntLiteral__Group__0");
					put(grammarAccess.getIntLiteralAccess().getGroup_1(), "rule__IntLiteral__Group_1__0");
					put(grammarAccess.getUnitDivAccess().getGroup(), "rule__UnitDiv__Group__0");
					put(grammarAccess.getUnitDivAccess().getGroup_1(), "rule__UnitDiv__Group_1__0");
					put(grammarAccess.getUnitMultiAccess().getGroup(), "rule__UnitMulti__Group__0");
					put(grammarAccess.getUnitMultiAccess().getGroup_1(), "rule__UnitMulti__Group_1__0");
					put(grammarAccess.getUnitPowAccess().getGroup(), "rule__UnitPow__Group__0");
					put(grammarAccess.getUnitPowAccess().getGroup_0_1(), "rule__UnitPow__Group_0_1__0");
					put(grammarAccess.getUnitPowAccess().getGroup_1(), "rule__UnitPow__Group_1__0");
					put(grammarAccess.getBoxedPDFAccess().getGroup(), "rule__BoxedPDF__Group__0");
					put(grammarAccess.getBoxedPDFAccess().getGroup_4(), "rule__BoxedPDF__Group_4__0");
					put(grammarAccess.getProbabilityMassFunctionAccess().getGroup_0(), "rule__ProbabilityMassFunction__Group_0__0");
					put(grammarAccess.getProbabilityMassFunctionAccess().getGroup_0_4(), "rule__ProbabilityMassFunction__Group_0_4__0");
					put(grammarAccess.getProbabilityMassFunctionAccess().getGroup_1(), "rule__ProbabilityMassFunction__Group_1__0");
					put(grammarAccess.getProbabilityMassFunctionAccess().getGroup_1_4(), "rule__ProbabilityMassFunction__Group_1_4__0");
					put(grammarAccess.getProbabilityMassFunctionAccess().getGroup_2(), "rule__ProbabilityMassFunction__Group_2__0");
					put(grammarAccess.getProbabilityMassFunctionAccess().getGroup_2_1(), "rule__ProbabilityMassFunction__Group_2_1__0");
					put(grammarAccess.getProbabilityMassFunctionAccess().getGroup_3(), "rule__ProbabilityMassFunction__Group_3__0");
					put(grammarAccess.getProbabilityMassFunctionAccess().getGroup_3_1(), "rule__ProbabilityMassFunction__Group_3_1__0");
					put(grammarAccess.getNumeric_int_sampleAccess().getGroup(), "rule__Numeric_int_sample__Group__0");
					put(grammarAccess.getNumeric_real_sampleAccess().getGroup(), "rule__Numeric_real_sample__Group__0");
					put(grammarAccess.getReal_pdf_sampleAccess().getGroup(), "rule__Real_pdf_sample__Group__0");
					put(grammarAccess.getStringsampleAccess().getGroup(), "rule__Stringsample__Group__0");
					put(grammarAccess.getBoolsampleAccess().getGroup(), "rule__Boolsample__Group__0");
					put(grammarAccess.getSIGNED_NUMBERAccess().getGroup(), "rule__SIGNED_NUMBER__Group__0");
					put(grammarAccess.getSIGNED_INTAccess().getGroup(), "rule__SIGNED_INT__Group__0");
					put(grammarAccess.getIfelseExprAccess().getIfExpressionAssignment_1_2(), "rule__IfelseExpr__IfExpressionAssignment_1_2");
					put(grammarAccess.getIfelseExprAccess().getElseExpressionAssignment_1_4(), "rule__IfelseExpr__ElseExpressionAssignment_1_4");
					put(grammarAccess.getBooleanExpressionAccess().getOperationAssignment_1_1(), "rule__BooleanExpression__OperationAssignment_1_1");
					put(grammarAccess.getBooleanExpressionAccess().getRightAssignment_1_2(), "rule__BooleanExpression__RightAssignment_1_2");
					put(grammarAccess.getBoolAndExprAccess().getOperationAssignment_1_1(), "rule__BoolAndExpr__OperationAssignment_1_1");
					put(grammarAccess.getBoolAndExprAccess().getRightAssignment_1_2(), "rule__BoolAndExpr__RightAssignment_1_2");
					put(grammarAccess.getBoolOrExprAccess().getOperationAssignment_1_1(), "rule__BoolOrExpr__OperationAssignment_1_1");
					put(grammarAccess.getBoolOrExprAccess().getRightAssignment_1_2(), "rule__BoolOrExpr__RightAssignment_1_2");
					put(grammarAccess.getCompareExprAccess().getOperationAssignment_1_1(), "rule__CompareExpr__OperationAssignment_1_1");
					put(grammarAccess.getCompareExprAccess().getRightAssignment_1_2(), "rule__CompareExpr__RightAssignment_1_2");
					put(grammarAccess.getSumExprAccess().getOperationAssignment_1_1(), "rule__SumExpr__OperationAssignment_1_1");
					put(grammarAccess.getSumExprAccess().getRightAssignment_1_2(), "rule__SumExpr__RightAssignment_1_2");
					put(grammarAccess.getProdExprAccess().getOperationAssignment_1_1(), "rule__ProdExpr__OperationAssignment_1_1");
					put(grammarAccess.getProdExprAccess().getRightAssignment_1_2(), "rule__ProdExpr__RightAssignment_1_2");
					put(grammarAccess.getPowExprAccess().getExponentAssignment_1_2(), "rule__PowExpr__ExponentAssignment_1_2");
					put(grammarAccess.getNotExpressionAccess().getInnerAssignment_1(), "rule__NotExpression__InnerAssignment_1");
					put(grammarAccess.getNegativeExpressionAccess().getInnerAssignment_1(), "rule__NegativeExpression__InnerAssignment_1");
					put(grammarAccess.getDoubleLiteralAccess().getValueAssignment_0(), "rule__DoubleLiteral__ValueAssignment_0");
					put(grammarAccess.getDoubleLiteralAccess().getUnitAssignment_1_1(), "rule__DoubleLiteral__UnitAssignment_1_1");
					put(grammarAccess.getProbabilityFunctionLiteralAccess().getFunction_ProbabilityFunctionLiteralAssignment(), "rule__ProbabilityFunctionLiteral__Function_ProbabilityFunctionLiteralAssignment");
					put(grammarAccess.getParenthesisAccess().getInnerExpressionAssignment_1(), "rule__Parenthesis__InnerExpressionAssignment_1");
					put(grammarAccess.getFunctionLiteralAccess().getIdAssignment_0(), "rule__FunctionLiteral__IdAssignment_0");
					put(grammarAccess.getFunctionLiteralAccess().getParameters_FunctionLiteralAssignment_2_0(), "rule__FunctionLiteral__Parameters_FunctionLiteralAssignment_2_0");
					put(grammarAccess.getFunctionLiteralAccess().getParameters_FunctionLiteralAssignment_2_1_1(), "rule__FunctionLiteral__Parameters_FunctionLiteralAssignment_2_1_1");
					put(grammarAccess.getVariableAccess().getId_VariableAssignment(), "rule__Variable__Id_VariableAssignment");
					put(grammarAccess.getVariableReferenceAccess().getReferenceNameAssignment(), "rule__VariableReference__ReferenceNameAssignment");
					put(grammarAccess.getNamespaceReferenceAccess().getReferenceNameAssignment_0(), "rule__NamespaceReference__ReferenceNameAssignment_0");
					put(grammarAccess.getNamespaceReferenceAccess().getInnerReference_NamespaceReferenceAssignment_2(), "rule__NamespaceReference__InnerReference_NamespaceReferenceAssignment_2");
					put(grammarAccess.getBoolLiteralAccess().getValueAssignment(), "rule__BoolLiteral__ValueAssignment");
					put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
					put(grammarAccess.getIntLiteralAccess().getValueAssignment_0(), "rule__IntLiteral__ValueAssignment_0");
					put(grammarAccess.getIntLiteralAccess().getUnitAssignment_1_1(), "rule__IntLiteral__UnitAssignment_1_1");
					put(grammarAccess.getUnitDivAccess().getDivisorAssignment_1_2(), "rule__UnitDiv__DivisorAssignment_1_2");
					put(grammarAccess.getUnitMultiAccess().getUnitsAssignment_1_2(), "rule__UnitMulti__UnitsAssignment_1_2");
					put(grammarAccess.getUnitPowAccess().getExponentAssignment_1_2(), "rule__UnitPow__ExponentAssignment_1_2");
					put(grammarAccess.getBaseUnitAccess().getNameAssignment(), "rule__BaseUnit__NameAssignment");
					put(grammarAccess.getBoxedPDFAccess().getSamplesAssignment_2(), "rule__BoxedPDF__SamplesAssignment_2");
					put(grammarAccess.getBoxedPDFAccess().getUnitAssignment_4_1(), "rule__BoxedPDF__UnitAssignment_4_1");
					put(grammarAccess.getProbabilityMassFunctionAccess().getSamplesAssignment_0_2(), "rule__ProbabilityMassFunction__SamplesAssignment_0_2");
					put(grammarAccess.getProbabilityMassFunctionAccess().getUnitAssignment_0_4_1(), "rule__ProbabilityMassFunction__UnitAssignment_0_4_1");
					put(grammarAccess.getProbabilityMassFunctionAccess().getSamplesAssignment_1_2(), "rule__ProbabilityMassFunction__SamplesAssignment_1_2");
					put(grammarAccess.getProbabilityMassFunctionAccess().getUnitAssignment_1_4_1(), "rule__ProbabilityMassFunction__UnitAssignment_1_4_1");
					put(grammarAccess.getProbabilityMassFunctionAccess().getOrderedDomainAssignment_2_1_1(), "rule__ProbabilityMassFunction__OrderedDomainAssignment_2_1_1");
					put(grammarAccess.getProbabilityMassFunctionAccess().getSamplesAssignment_2_3(), "rule__ProbabilityMassFunction__SamplesAssignment_2_3");
					put(grammarAccess.getProbabilityMassFunctionAccess().getOrderedDomainAssignment_3_1_1(), "rule__ProbabilityMassFunction__OrderedDomainAssignment_3_1_1");
					put(grammarAccess.getProbabilityMassFunctionAccess().getSamplesAssignment_3_3(), "rule__ProbabilityMassFunction__SamplesAssignment_3_3");
					put(grammarAccess.getNumeric_int_sampleAccess().getValueAssignment_1(), "rule__Numeric_int_sample__ValueAssignment_1");
					put(grammarAccess.getNumeric_int_sampleAccess().getProbabilityAssignment_3(), "rule__Numeric_int_sample__ProbabilityAssignment_3");
					put(grammarAccess.getNumeric_real_sampleAccess().getValueAssignment_1(), "rule__Numeric_real_sample__ValueAssignment_1");
					put(grammarAccess.getNumeric_real_sampleAccess().getProbabilityAssignment_3(), "rule__Numeric_real_sample__ProbabilityAssignment_3");
					put(grammarAccess.getReal_pdf_sampleAccess().getValueAssignment_1(), "rule__Real_pdf_sample__ValueAssignment_1");
					put(grammarAccess.getReal_pdf_sampleAccess().getProbabilityAssignment_3(), "rule__Real_pdf_sample__ProbabilityAssignment_3");
					put(grammarAccess.getStringsampleAccess().getValueAssignment_1(), "rule__Stringsample__ValueAssignment_1");
					put(grammarAccess.getStringsampleAccess().getProbabilityAssignment_3(), "rule__Stringsample__ProbabilityAssignment_3");
					put(grammarAccess.getBoolsampleAccess().getValueAssignment_1(), "rule__Boolsample__ValueAssignment_1");
					put(grammarAccess.getBoolsampleAccess().getProbabilityAssignment_3(), "rule__Boolsample__ProbabilityAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.palladiosimulator.commons.stoex.ui.contentassist.antlr.internal.InternalStoExParser typedParser = (org.palladiosimulator.commons.stoex.ui.contentassist.antlr.internal.InternalStoExParser) parser;
			typedParser.entryRuleexpression();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public StoExGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(StoExGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
