/*
 * generated by Xtext
 */
grammar InternalStoEx;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.palladiosimulator.commons.stoex.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.palladiosimulator.commons.stoex.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.palladiosimulator.commons.stoex.services.StoExGrammarAccess;

}

@parser::members {
 
 	private StoExGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(StoExGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleexpression
entryRuleexpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleexpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule expression
ruleexpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getIfelseExprParserRuleCall()); }
	ruleifelseExpr
{ after(grammarAccess.getExpressionAccess().getIfelseExprParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleifelseExpr
entryRuleifelseExpr 
:
{ before(grammarAccess.getIfelseExprRule()); }
	 ruleifelseExpr
{ after(grammarAccess.getIfelseExprRule()); } 
	 EOF 
;

// Rule ifelseExpr
ruleifelseExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfelseExprAccess().getGroup()); }
(rule__IfelseExpr__Group__0)
{ after(grammarAccess.getIfelseExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleboolAndExpr
entryRuleboolAndExpr 
:
{ before(grammarAccess.getBoolAndExprRule()); }
	 ruleboolAndExpr
{ after(grammarAccess.getBoolAndExprRule()); } 
	 EOF 
;

// Rule boolAndExpr
ruleboolAndExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolAndExprAccess().getGroup()); }
(rule__BoolAndExpr__Group__0)
{ after(grammarAccess.getBoolAndExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleboolOrExpr
entryRuleboolOrExpr 
:
{ before(grammarAccess.getBoolOrExprRule()); }
	 ruleboolOrExpr
{ after(grammarAccess.getBoolOrExprRule()); } 
	 EOF 
;

// Rule boolOrExpr
ruleboolOrExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolOrExprAccess().getGroup()); }
(rule__BoolOrExpr__Group__0)
{ after(grammarAccess.getBoolOrExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecompareExpr
entryRulecompareExpr 
:
{ before(grammarAccess.getCompareExprRule()); }
	 rulecompareExpr
{ after(grammarAccess.getCompareExprRule()); } 
	 EOF 
;

// Rule compareExpr
rulecompareExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompareExprAccess().getGroup()); }
(rule__CompareExpr__Group__0)
{ after(grammarAccess.getCompareExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesumExpr
entryRulesumExpr 
:
{ before(grammarAccess.getSumExprRule()); }
	 rulesumExpr
{ after(grammarAccess.getSumExprRule()); } 
	 EOF 
;

// Rule sumExpr
rulesumExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSumExprAccess().getGroup()); }
(rule__SumExpr__Group__0)
{ after(grammarAccess.getSumExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleprodExpr
entryRuleprodExpr 
:
{ before(grammarAccess.getProdExprRule()); }
	 ruleprodExpr
{ after(grammarAccess.getProdExprRule()); } 
	 EOF 
;

// Rule prodExpr
ruleprodExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProdExprAccess().getGroup()); }
(rule__ProdExpr__Group__0)
{ after(grammarAccess.getProdExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulepowExpr
entryRulepowExpr 
:
{ before(grammarAccess.getPowExprRule()); }
	 rulepowExpr
{ after(grammarAccess.getPowExprRule()); } 
	 EOF 
;

// Rule powExpr
rulepowExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPowExprAccess().getGroup()); }
(rule__PowExpr__Group__0)
{ after(grammarAccess.getPowExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleunaryExpr
entryRuleunaryExpr 
:
{ before(grammarAccess.getUnaryExprRule()); }
	 ruleunaryExpr
{ after(grammarAccess.getUnaryExprRule()); } 
	 EOF 
;

// Rule unaryExpr
ruleunaryExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryExprAccess().getAlternatives()); }
(rule__UnaryExpr__Alternatives)
{ after(grammarAccess.getUnaryExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotExpression
entryRuleNotExpression 
:
{ before(grammarAccess.getNotExpressionRule()); }
	 ruleNotExpression
{ after(grammarAccess.getNotExpressionRule()); } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNotExpressionAccess().getGroup()); }
(rule__NotExpression__Group__0)
{ after(grammarAccess.getNotExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNegativeExpression
entryRuleNegativeExpression 
:
{ before(grammarAccess.getNegativeExpressionRule()); }
	 ruleNegativeExpression
{ after(grammarAccess.getNegativeExpressionRule()); } 
	 EOF 
;

// Rule NegativeExpression
ruleNegativeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegativeExpressionAccess().getGroup()); }
(rule__NegativeExpression__Group__0)
{ after(grammarAccess.getNegativeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleatom
entryRuleatom 
:
{ before(grammarAccess.getAtomRule()); }
	 ruleatom
{ after(grammarAccess.getAtomRule()); } 
	 EOF 
;

// Rule atom
ruleatom
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomAccess().getAlternatives()); }
(rule__Atom__Alternatives)
{ after(grammarAccess.getAtomAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDoubleLiteral
entryRuleDoubleLiteral 
:
{ before(grammarAccess.getDoubleLiteralRule()); }
	 ruleDoubleLiteral
{ after(grammarAccess.getDoubleLiteralRule()); } 
	 EOF 
;

// Rule DoubleLiteral
ruleDoubleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDoubleLiteralAccess().getGroup()); }
(rule__DoubleLiteral__Group__0)
{ after(grammarAccess.getDoubleLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProbabilityFunctionLiteral
entryRuleProbabilityFunctionLiteral 
:
{ before(grammarAccess.getProbabilityFunctionLiteralRule()); }
	 ruleProbabilityFunctionLiteral
{ after(grammarAccess.getProbabilityFunctionLiteralRule()); } 
	 EOF 
;

// Rule ProbabilityFunctionLiteral
ruleProbabilityFunctionLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProbabilityFunctionLiteralAccess().getFunction_ProbabilityFunctionLiteralAssignment()); }
(rule__ProbabilityFunctionLiteral__Function_ProbabilityFunctionLiteralAssignment)
{ after(grammarAccess.getProbabilityFunctionLiteralAccess().getFunction_ProbabilityFunctionLiteralAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParenthesis
entryRuleParenthesis 
:
{ before(grammarAccess.getParenthesisRule()); }
	 ruleParenthesis
{ after(grammarAccess.getParenthesisRule()); } 
	 EOF 
;

// Rule Parenthesis
ruleParenthesis
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParenthesisAccess().getGroup()); }
(rule__Parenthesis__Group__0)
{ after(grammarAccess.getParenthesisAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionLiteral
entryRuleFunctionLiteral 
:
{ before(grammarAccess.getFunctionLiteralRule()); }
	 ruleFunctionLiteral
{ after(grammarAccess.getFunctionLiteralRule()); } 
	 EOF 
;

// Rule FunctionLiteral
ruleFunctionLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionLiteralAccess().getGroup()); }
(rule__FunctionLiteral__Group__0)
{ after(grammarAccess.getFunctionLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariable
entryRuleVariable 
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAccess().getId_VariableAssignment()); }
(rule__Variable__Id_VariableAssignment)
{ after(grammarAccess.getVariableAccess().getId_VariableAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstractNamedReference
entryRuleAbstractNamedReference 
:
{ before(grammarAccess.getAbstractNamedReferenceRule()); }
	 ruleAbstractNamedReference
{ after(grammarAccess.getAbstractNamedReferenceRule()); } 
	 EOF 
;

// Rule AbstractNamedReference
ruleAbstractNamedReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractNamedReferenceAccess().getAlternatives()); }
(rule__AbstractNamedReference__Alternatives)
{ after(grammarAccess.getAbstractNamedReferenceAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableReference
entryRuleVariableReference 
:
{ before(grammarAccess.getVariableReferenceRule()); }
	 ruleVariableReference
{ after(grammarAccess.getVariableReferenceRule()); } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableReferenceAccess().getReferenceNameAssignment()); }
(rule__VariableReference__ReferenceNameAssignment)
{ after(grammarAccess.getVariableReferenceAccess().getReferenceNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamespaceReference
entryRuleNamespaceReference 
:
{ before(grammarAccess.getNamespaceReferenceRule()); }
	 ruleNamespaceReference
{ after(grammarAccess.getNamespaceReferenceRule()); } 
	 EOF 
;

// Rule NamespaceReference
ruleNamespaceReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamespaceReferenceAccess().getGroup()); }
(rule__NamespaceReference__Group__0)
{ after(grammarAccess.getNamespaceReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoolLiteral
entryRuleBoolLiteral 
:
{ before(grammarAccess.getBoolLiteralRule()); }
	 ruleBoolLiteral
{ after(grammarAccess.getBoolLiteralRule()); } 
	 EOF 
;

// Rule BoolLiteral
ruleBoolLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolLiteralAccess().getValueAssignment()); }
(rule__BoolLiteral__ValueAssignment)
{ after(grammarAccess.getBoolLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
(rule__StringLiteral__ValueAssignment)
{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntLiteral
entryRuleIntLiteral 
:
{ before(grammarAccess.getIntLiteralRule()); }
	 ruleIntLiteral
{ after(grammarAccess.getIntLiteralRule()); } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntLiteralAccess().getGroup()); }
(rule__IntLiteral__Group__0)
{ after(grammarAccess.getIntLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnit
entryRuleUnit 
:
{ before(grammarAccess.getUnitRule()); }
	 ruleUnit
{ after(grammarAccess.getUnitRule()); } 
	 EOF 
;

// Rule Unit
ruleUnit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitAccess().getAlternatives()); }
(rule__Unit__Alternatives)
{ after(grammarAccess.getUnitAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleunitDiv
entryRuleunitDiv 
:
{ before(grammarAccess.getUnitDivRule()); }
	 ruleunitDiv
{ after(grammarAccess.getUnitDivRule()); } 
	 EOF 
;

// Rule unitDiv
ruleunitDiv
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitDivAccess().getGroup()); }
(rule__UnitDiv__Group__0)
{ after(grammarAccess.getUnitDivAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleunitMulti
entryRuleunitMulti 
:
{ before(grammarAccess.getUnitMultiRule()); }
	 ruleunitMulti
{ after(grammarAccess.getUnitMultiRule()); } 
	 EOF 
;

// Rule unitMulti
ruleunitMulti
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitMultiAccess().getGroup()); }
(rule__UnitMulti__Group__0)
{ after(grammarAccess.getUnitMultiAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleunitPow
entryRuleunitPow 
:
{ before(grammarAccess.getUnitPowRule()); }
	 ruleunitPow
{ after(grammarAccess.getUnitPowRule()); } 
	 EOF 
;

// Rule unitPow
ruleunitPow
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitPowAccess().getGroup()); }
(rule__UnitPow__Group__0)
{ after(grammarAccess.getUnitPowAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBaseUnit
entryRuleBaseUnit 
:
{ before(grammarAccess.getBaseUnitRule()); }
	 ruleBaseUnit
{ after(grammarAccess.getBaseUnitRule()); } 
	 EOF 
;

// Rule BaseUnit
ruleBaseUnit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBaseUnitAccess().getNameAssignment()); }
(rule__BaseUnit__NameAssignment)
{ after(grammarAccess.getBaseUnitAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledefinition
entryRuledefinition 
:
{ before(grammarAccess.getDefinitionRule()); }
	 ruledefinition
{ after(grammarAccess.getDefinitionRule()); } 
	 EOF 
;

// Rule definition
ruledefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefinitionAccess().getAlternatives()); }
(rule__Definition__Alternatives)
{ after(grammarAccess.getDefinitionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProbabilityDensityFunction
entryRuleProbabilityDensityFunction 
:
{ before(grammarAccess.getProbabilityDensityFunctionRule()); }
	 ruleProbabilityDensityFunction
{ after(grammarAccess.getProbabilityDensityFunctionRule()); } 
	 EOF 
;

// Rule ProbabilityDensityFunction
ruleProbabilityDensityFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProbabilityDensityFunctionAccess().getBoxedPDFParserRuleCall()); }
	ruleBoxedPDF
{ after(grammarAccess.getProbabilityDensityFunctionAccess().getBoxedPDFParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoxedPDF
entryRuleBoxedPDF 
:
{ before(grammarAccess.getBoxedPDFRule()); }
	 ruleBoxedPDF
{ after(grammarAccess.getBoxedPDFRule()); } 
	 EOF 
;

// Rule BoxedPDF
ruleBoxedPDF
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoxedPDFAccess().getGroup()); }
(rule__BoxedPDF__Group__0)
{ after(grammarAccess.getBoxedPDFAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProbabilityMassFunction
entryRuleProbabilityMassFunction 
:
{ before(grammarAccess.getProbabilityMassFunctionRule()); }
	 ruleProbabilityMassFunction
{ after(grammarAccess.getProbabilityMassFunctionRule()); } 
	 EOF 
;

// Rule ProbabilityMassFunction
ruleProbabilityMassFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getAlternatives()); }
(rule__ProbabilityMassFunction__Alternatives)
{ after(grammarAccess.getProbabilityMassFunctionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulenumeric_int_sample
entryRulenumeric_int_sample 
:
{ before(grammarAccess.getNumeric_int_sampleRule()); }
	 rulenumeric_int_sample
{ after(grammarAccess.getNumeric_int_sampleRule()); } 
	 EOF 
;

// Rule numeric_int_sample
rulenumeric_int_sample
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumeric_int_sampleAccess().getGroup()); }
(rule__Numeric_int_sample__Group__0)
{ after(grammarAccess.getNumeric_int_sampleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulenumeric_real_sample
entryRulenumeric_real_sample 
:
{ before(grammarAccess.getNumeric_real_sampleRule()); }
	 rulenumeric_real_sample
{ after(grammarAccess.getNumeric_real_sampleRule()); } 
	 EOF 
;

// Rule numeric_real_sample
rulenumeric_real_sample
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumeric_real_sampleAccess().getGroup()); }
(rule__Numeric_real_sample__Group__0)
{ after(grammarAccess.getNumeric_real_sampleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulereal_pdf_sample
entryRulereal_pdf_sample 
:
{ before(grammarAccess.getReal_pdf_sampleRule()); }
	 rulereal_pdf_sample
{ after(grammarAccess.getReal_pdf_sampleRule()); } 
	 EOF 
;

// Rule real_pdf_sample
rulereal_pdf_sample
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReal_pdf_sampleAccess().getGroup()); }
(rule__Real_pdf_sample__Group__0)
{ after(grammarAccess.getReal_pdf_sampleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulestringsample
entryRulestringsample 
:
{ before(grammarAccess.getStringsampleRule()); }
	 rulestringsample
{ after(grammarAccess.getStringsampleRule()); } 
	 EOF 
;

// Rule stringsample
rulestringsample
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringsampleAccess().getGroup()); }
(rule__Stringsample__Group__0)
{ after(grammarAccess.getStringsampleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleboolsample
entryRuleboolsample 
:
{ before(grammarAccess.getBoolsampleRule()); }
	 ruleboolsample
{ after(grammarAccess.getBoolsampleRule()); } 
	 EOF 
;

// Rule boolsample
ruleboolsample
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolsampleAccess().getGroup()); }
(rule__Boolsample__Group__0)
{ after(grammarAccess.getBoolsampleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSIGNED_NUMBER
entryRuleSIGNED_NUMBER 
:
{ before(grammarAccess.getSIGNED_NUMBERRule()); }
	 ruleSIGNED_NUMBER
{ after(grammarAccess.getSIGNED_NUMBERRule()); } 
	 EOF 
;

// Rule SIGNED_NUMBER
ruleSIGNED_NUMBER
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSIGNED_NUMBERAccess().getGroup()); }
(rule__SIGNED_NUMBER__Group__0)
{ after(grammarAccess.getSIGNED_NUMBERAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSIGNED_INT
entryRuleSIGNED_INT 
:
{ before(grammarAccess.getSIGNED_INTRule()); }
	 ruleSIGNED_INT
{ after(grammarAccess.getSIGNED_INTRule()); } 
	 EOF 
;

// Rule SIGNED_INT
ruleSIGNED_INT
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSIGNED_INTAccess().getGroup()); }
(rule__SIGNED_INT__Group__0)
{ after(grammarAccess.getSIGNED_INTAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule BooleanOperations
ruleBooleanOperations
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanOperationsAccess().getAlternatives()); }
(rule__BooleanOperations__Alternatives)
{ after(grammarAccess.getBooleanOperationsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule andoperation
ruleandoperation
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndoperationAccess().getANDEnumLiteralDeclaration()); }
(	'AND' 
)
{ after(grammarAccess.getAndoperationAccess().getANDEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule oroperations
ruleoroperations
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOroperationsAccess().getAlternatives()); }
(rule__Oroperations__Alternatives)
{ after(grammarAccess.getOroperationsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule CompareOperations
ruleCompareOperations
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationsAccess().getAlternatives()); }
(rule__CompareOperations__Alternatives)
{ after(grammarAccess.getCompareOperationsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule TermOperations
ruleTermOperations
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermOperationsAccess().getAlternatives()); }
(rule__TermOperations__Alternatives)
{ after(grammarAccess.getTermOperationsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ProductOperations
ruleProductOperations
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProductOperationsAccess().getAlternatives()); }
(rule__ProductOperations__Alternatives)
{ after(grammarAccess.getProductOperationsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule UnitNames
ruleUnitNames
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitNamesAccess().getAlternatives()); }
(rule__UnitNames__Alternatives)
{ after(grammarAccess.getUnitNamesAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__UnaryExpr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExprAccess().getNegativeExpressionParserRuleCall_0()); }
	ruleNegativeExpression
{ after(grammarAccess.getUnaryExprAccess().getNegativeExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getUnaryExprAccess().getNotExpressionParserRuleCall_1()); }
	ruleNotExpression
{ after(grammarAccess.getUnaryExprAccess().getNotExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getUnaryExprAccess().getAtomParserRuleCall_2()); }
	ruleatom
{ after(grammarAccess.getUnaryExprAccess().getAtomParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getIntLiteralParserRuleCall_0()); }
	ruleIntLiteral
{ after(grammarAccess.getAtomAccess().getIntLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getDoubleLiteralParserRuleCall_1()); }
	ruleDoubleLiteral
{ after(grammarAccess.getAtomAccess().getDoubleLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getStringLiteralParserRuleCall_2()); }
	ruleStringLiteral
{ after(grammarAccess.getAtomAccess().getStringLiteralParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getBoolLiteralParserRuleCall_3()); }
	ruleBoolLiteral
{ after(grammarAccess.getAtomAccess().getBoolLiteralParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getFunctionLiteralParserRuleCall_4()); }
	ruleFunctionLiteral
{ after(grammarAccess.getAtomAccess().getFunctionLiteralParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getVariableParserRuleCall_5()); }
	ruleVariable
{ after(grammarAccess.getAtomAccess().getVariableParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getParenthesisParserRuleCall_6()); }
	ruleParenthesis
{ after(grammarAccess.getAtomAccess().getParenthesisParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getProbabilityFunctionLiteralParserRuleCall_7()); }
	ruleProbabilityFunctionLiteral
{ after(grammarAccess.getAtomAccess().getProbabilityFunctionLiteralParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractNamedReference__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractNamedReferenceAccess().getVariableReferenceParserRuleCall_0()); }
	ruleVariableReference
{ after(grammarAccess.getAbstractNamedReferenceAccess().getVariableReferenceParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAbstractNamedReferenceAccess().getNamespaceReferenceParserRuleCall_1()); }
	ruleNamespaceReference
{ after(grammarAccess.getAbstractNamedReferenceAccess().getNamespaceReferenceParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unit__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitAccess().getUnitMultiParserRuleCall_0()); }
	ruleunitMulti
{ after(grammarAccess.getUnitAccess().getUnitMultiParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getUnitAccess().getUnitDivParserRuleCall_1()); }
	ruleunitDiv
{ after(grammarAccess.getUnitAccess().getUnitDivParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getUnitAccess().getBaseUnitParserRuleCall_2()); }
	ruleBaseUnit
{ after(grammarAccess.getUnitAccess().getBaseUnitParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitPow__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitPowAccess().getBaseUnitParserRuleCall_0_0()); }
	ruleBaseUnit
{ after(grammarAccess.getUnitPowAccess().getBaseUnitParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getUnitPowAccess().getGroup_0_1()); }
(rule__UnitPow__Group_0_1__0)
{ after(grammarAccess.getUnitPowAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitPow__Alternatives_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitPowAccess().getUnitMultiParserRuleCall_0_1_1_0()); }
	ruleunitMulti
{ after(grammarAccess.getUnitPowAccess().getUnitMultiParserRuleCall_0_1_1_0()); }
)

    |(
{ before(grammarAccess.getUnitPowAccess().getUnitDivParserRuleCall_0_1_1_1()); }
	ruleunitDiv
{ after(grammarAccess.getUnitPowAccess().getUnitDivParserRuleCall_0_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getProbabilityMassFunctionParserRuleCall_0()); }
	ruleProbabilityMassFunction
{ after(grammarAccess.getDefinitionAccess().getProbabilityMassFunctionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDefinitionAccess().getProbabilityDensityFunctionParserRuleCall_1()); }
	ruleProbabilityDensityFunction
{ after(grammarAccess.getDefinitionAccess().getProbabilityDensityFunctionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getGroup_0()); }
(rule__ProbabilityMassFunction__Group_0__0)
{ after(grammarAccess.getProbabilityMassFunctionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getGroup_1()); }
(rule__ProbabilityMassFunction__Group_1__0)
{ after(grammarAccess.getProbabilityMassFunctionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getGroup_2()); }
(rule__ProbabilityMassFunction__Group_2__0)
{ after(grammarAccess.getProbabilityMassFunctionAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getGroup_3()); }
(rule__ProbabilityMassFunction__Group_3__0)
{ after(grammarAccess.getProbabilityMassFunctionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOperations__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanOperationsAccess().getANDEnumLiteralDeclaration_0()); }
(	'AND' 
)
{ after(grammarAccess.getBooleanOperationsAccess().getANDEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBooleanOperationsAccess().getOREnumLiteralDeclaration_1()); }
(	'OR' 
)
{ after(grammarAccess.getBooleanOperationsAccess().getOREnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getBooleanOperationsAccess().getXOREnumLiteralDeclaration_2()); }
(	'XOR' 
)
{ after(grammarAccess.getBooleanOperationsAccess().getXOREnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Oroperations__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOroperationsAccess().getOREnumLiteralDeclaration_0()); }
(	'OR' 
)
{ after(grammarAccess.getOroperationsAccess().getOREnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getOroperationsAccess().getXOREnumLiteralDeclaration_1()); }
(	'XOR' 
)
{ after(grammarAccess.getOroperationsAccess().getXOREnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperations__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationsAccess().getGREATEREnumLiteralDeclaration_0()); }
(	'>' 
)
{ after(grammarAccess.getCompareOperationsAccess().getGREATEREnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getCompareOperationsAccess().getLESSEnumLiteralDeclaration_1()); }
(	'<' 
)
{ after(grammarAccess.getCompareOperationsAccess().getLESSEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getCompareOperationsAccess().getEQUALSEnumLiteralDeclaration_2()); }
(	'==' 
)
{ after(grammarAccess.getCompareOperationsAccess().getEQUALSEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getCompareOperationsAccess().getNOTEQUALEnumLiteralDeclaration_3()); }
(	'<>' 
)
{ after(grammarAccess.getCompareOperationsAccess().getNOTEQUALEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getCompareOperationsAccess().getGREATEREQUALEnumLiteralDeclaration_4()); }
(	'>=' 
)
{ after(grammarAccess.getCompareOperationsAccess().getGREATEREQUALEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getCompareOperationsAccess().getLESSEQUALEnumLiteralDeclaration_5()); }
(	'<=' 
)
{ after(grammarAccess.getCompareOperationsAccess().getLESSEQUALEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TermOperations__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermOperationsAccess().getADDEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getTermOperationsAccess().getADDEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getTermOperationsAccess().getSUBEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getTermOperationsAccess().getSUBEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProductOperations__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProductOperationsAccess().getMULTEnumLiteralDeclaration_0()); }
(	'*' 
)
{ after(grammarAccess.getProductOperationsAccess().getMULTEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getProductOperationsAccess().getDIVEnumLiteralDeclaration_1()); }
(	'/' 
)
{ after(grammarAccess.getProductOperationsAccess().getDIVEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getProductOperationsAccess().getMODEnumLiteralDeclaration_2()); }
(	'%' 
)
{ after(grammarAccess.getProductOperationsAccess().getMODEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitNames__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitNamesAccess().getUNITLESSEnumLiteralDeclaration_0()); }
(	'_' 
)
{ after(grammarAccess.getUnitNamesAccess().getUNITLESSEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getUnitNamesAccess().getUNITLESSEnumLiteralDeclaration_1()); }
(	'unitless' 
)
{ after(grammarAccess.getUnitNamesAccess().getUNITLESSEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getUnitNamesAccess().getBYTEEnumLiteralDeclaration_2()); }
(	'B' 
)
{ after(grammarAccess.getUnitNamesAccess().getBYTEEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getUnitNamesAccess().getSECONDEnumLiteralDeclaration_3()); }
(	's' 
)
{ after(grammarAccess.getUnitNamesAccess().getSECONDEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getUnitNamesAccess().getMETEREnumLiteralDeclaration_4()); }
(	'm' 
)
{ after(grammarAccess.getUnitNamesAccess().getMETEREnumLiteralDeclaration_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__IfelseExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfelseExpr__Group__0__Impl
	rule__IfelseExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfelseExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfelseExprAccess().getBoolAndExprParserRuleCall_0()); }
	ruleboolAndExpr
{ after(grammarAccess.getIfelseExprAccess().getBoolAndExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfelseExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfelseExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfelseExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfelseExprAccess().getGroup_1()); }
(rule__IfelseExpr__Group_1__0)?
{ after(grammarAccess.getIfelseExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IfelseExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfelseExpr__Group_1__0__Impl
	rule__IfelseExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfelseExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfelseExprAccess().getIfElseExpressionConditionExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getIfelseExprAccess().getIfElseExpressionConditionExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfelseExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfelseExpr__Group_1__1__Impl
	rule__IfelseExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfelseExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfelseExprAccess().getCONDDELIMITERTerminalRuleCall_1_1()); }
	RULE_CONDDELIMITER
{ after(grammarAccess.getIfelseExprAccess().getCONDDELIMITERTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfelseExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfelseExpr__Group_1__2__Impl
	rule__IfelseExpr__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfelseExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfelseExprAccess().getIfExpressionAssignment_1_2()); }
(rule__IfelseExpr__IfExpressionAssignment_1_2)
{ after(grammarAccess.getIfelseExprAccess().getIfExpressionAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfelseExpr__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfelseExpr__Group_1__3__Impl
	rule__IfelseExpr__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfelseExpr__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfelseExprAccess().getELSEDELIMITERTerminalRuleCall_1_3()); }
	RULE_ELSEDELIMITER
{ after(grammarAccess.getIfelseExprAccess().getELSEDELIMITERTerminalRuleCall_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfelseExpr__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfelseExpr__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfelseExpr__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfelseExprAccess().getElseExpressionAssignment_1_4()); }
(rule__IfelseExpr__ElseExpressionAssignment_1_4)
{ after(grammarAccess.getIfelseExprAccess().getElseExpressionAssignment_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__BoolAndExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolAndExpr__Group__0__Impl
	rule__BoolAndExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolAndExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAndExprAccess().getBoolOrExprParserRuleCall_0()); }
	ruleboolOrExpr
{ after(grammarAccess.getBoolAndExprAccess().getBoolOrExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolAndExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolAndExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolAndExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAndExprAccess().getGroup_1()); }
(rule__BoolAndExpr__Group_1__0)*
{ after(grammarAccess.getBoolAndExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BoolAndExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolAndExpr__Group_1__0__Impl
	rule__BoolAndExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolAndExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAndExprAccess().getBooleanOperatorExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getBoolAndExprAccess().getBooleanOperatorExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolAndExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolAndExpr__Group_1__1__Impl
	rule__BoolAndExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolAndExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAndExprAccess().getOperationAssignment_1_1()); }
(rule__BoolAndExpr__OperationAssignment_1_1)
{ after(grammarAccess.getBoolAndExprAccess().getOperationAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolAndExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolAndExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolAndExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAndExprAccess().getRightAssignment_1_2()); }
(rule__BoolAndExpr__RightAssignment_1_2)
{ after(grammarAccess.getBoolAndExprAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BoolOrExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolOrExpr__Group__0__Impl
	rule__BoolOrExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOrExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolOrExprAccess().getCompareExprParserRuleCall_0()); }
	rulecompareExpr
{ after(grammarAccess.getBoolOrExprAccess().getCompareExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolOrExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolOrExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOrExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolOrExprAccess().getGroup_1()); }
(rule__BoolOrExpr__Group_1__0)*
{ after(grammarAccess.getBoolOrExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BoolOrExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolOrExpr__Group_1__0__Impl
	rule__BoolOrExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOrExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolOrExprAccess().getBooleanOperatorExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getBoolOrExprAccess().getBooleanOperatorExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolOrExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolOrExpr__Group_1__1__Impl
	rule__BoolOrExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOrExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolOrExprAccess().getOperationAssignment_1_1()); }
(rule__BoolOrExpr__OperationAssignment_1_1)
{ after(grammarAccess.getBoolOrExprAccess().getOperationAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolOrExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolOrExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOrExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolOrExprAccess().getRightAssignment_1_2()); }
(rule__BoolOrExpr__RightAssignment_1_2)
{ after(grammarAccess.getBoolOrExprAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CompareExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpr__Group__0__Impl
	rule__CompareExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExprAccess().getSumExprParserRuleCall_0()); }
	rulesumExpr
{ after(grammarAccess.getCompareExprAccess().getSumExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExprAccess().getGroup_1()); }
(rule__CompareExpr__Group_1__0)?
{ after(grammarAccess.getCompareExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompareExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpr__Group_1__0__Impl
	rule__CompareExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExprAccess().getCompareExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getCompareExprAccess().getCompareExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpr__Group_1__1__Impl
	rule__CompareExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExprAccess().getOperationAssignment_1_1()); }
(rule__CompareExpr__OperationAssignment_1_1)
{ after(grammarAccess.getCompareExprAccess().getOperationAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExprAccess().getRightAssignment_1_2()); }
(rule__CompareExpr__RightAssignment_1_2)
{ after(grammarAccess.getCompareExprAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SumExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumExpr__Group__0__Impl
	rule__SumExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SumExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumExprAccess().getProdExprParserRuleCall_0()); }
	ruleprodExpr
{ after(grammarAccess.getSumExprAccess().getProdExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SumExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SumExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumExprAccess().getGroup_1()); }
(rule__SumExpr__Group_1__0)*
{ after(grammarAccess.getSumExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SumExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumExpr__Group_1__0__Impl
	rule__SumExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SumExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumExprAccess().getTermExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getSumExprAccess().getTermExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SumExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumExpr__Group_1__1__Impl
	rule__SumExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SumExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumExprAccess().getOperationAssignment_1_1()); }
(rule__SumExpr__OperationAssignment_1_1)
{ after(grammarAccess.getSumExprAccess().getOperationAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SumExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SumExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumExprAccess().getRightAssignment_1_2()); }
(rule__SumExpr__RightAssignment_1_2)
{ after(grammarAccess.getSumExprAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ProdExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProdExpr__Group__0__Impl
	rule__ProdExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProdExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProdExprAccess().getPowExprParserRuleCall_0()); }
	rulepowExpr
{ after(grammarAccess.getProdExprAccess().getPowExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProdExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProdExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProdExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProdExprAccess().getGroup_1()); }
(rule__ProdExpr__Group_1__0)*
{ after(grammarAccess.getProdExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ProdExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProdExpr__Group_1__0__Impl
	rule__ProdExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProdExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProdExprAccess().getProductExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getProdExprAccess().getProductExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProdExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProdExpr__Group_1__1__Impl
	rule__ProdExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProdExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProdExprAccess().getOperationAssignment_1_1()); }
(rule__ProdExpr__OperationAssignment_1_1)
{ after(grammarAccess.getProdExprAccess().getOperationAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProdExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProdExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProdExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProdExprAccess().getRightAssignment_1_2()); }
(rule__ProdExpr__RightAssignment_1_2)
{ after(grammarAccess.getProdExprAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PowExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowExpr__Group__0__Impl
	rule__PowExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowExprAccess().getUnaryExprParserRuleCall_0()); }
	ruleunaryExpr
{ after(grammarAccess.getPowExprAccess().getUnaryExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PowExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowExprAccess().getGroup_1()); }
(rule__PowExpr__Group_1__0)?
{ after(grammarAccess.getPowExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PowExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowExpr__Group_1__0__Impl
	rule__PowExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowExprAccess().getPowerExpressionBaseAction_1_0()); }
(

)
{ after(grammarAccess.getPowExprAccess().getPowerExpressionBaseAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PowExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowExpr__Group_1__1__Impl
	rule__PowExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PowExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowExprAccess().getPOWTerminalRuleCall_1_1()); }
	RULE_POW
{ after(grammarAccess.getPowExprAccess().getPOWTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PowExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowExprAccess().getExponentAssignment_1_2()); }
(rule__PowExpr__ExponentAssignment_1_2)
{ after(grammarAccess.getPowExprAccess().getExponentAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NotExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group__0__Impl
	rule__NotExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getNOTTerminalRuleCall_0()); }
	RULE_NOT
{ after(grammarAccess.getNotExpressionAccess().getNOTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getInnerAssignment_1()); }
(rule__NotExpression__InnerAssignment_1)
{ after(grammarAccess.getNotExpressionAccess().getInnerAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NegativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegativeExpression__Group__0__Impl
	rule__NegativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NegativeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegativeExpressionAccess().getHyphenMinusKeyword_0()); }

	'-' 

{ after(grammarAccess.getNegativeExpressionAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NegativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NegativeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegativeExpressionAccess().getInnerAssignment_1()); }
(rule__NegativeExpression__InnerAssignment_1)
{ after(grammarAccess.getNegativeExpressionAccess().getInnerAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DoubleLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleLiteral__Group__0__Impl
	rule__DoubleLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleLiteralAccess().getValueAssignment_0()); }
(rule__DoubleLiteral__ValueAssignment_0)
{ after(grammarAccess.getDoubleLiteralAccess().getValueAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoubleLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleLiteralAccess().getGroup_1()); }
(rule__DoubleLiteral__Group_1__0)?
{ after(grammarAccess.getDoubleLiteralAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DoubleLiteral__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleLiteral__Group_1__0__Impl
	rule__DoubleLiteral__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleLiteral__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleLiteralAccess().getSQUARE_PAREN_LTerminalRuleCall_1_0()); }
	RULE_SQUARE_PAREN_L
{ after(grammarAccess.getDoubleLiteralAccess().getSQUARE_PAREN_LTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoubleLiteral__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleLiteral__Group_1__1__Impl
	rule__DoubleLiteral__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleLiteral__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleLiteralAccess().getUnitAssignment_1_1()); }
(rule__DoubleLiteral__UnitAssignment_1_1)
{ after(grammarAccess.getDoubleLiteralAccess().getUnitAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoubleLiteral__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleLiteral__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleLiteral__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleLiteralAccess().getSQUARE_PAREN_RTerminalRuleCall_1_2()); }
	RULE_SQUARE_PAREN_R
{ after(grammarAccess.getDoubleLiteralAccess().getSQUARE_PAREN_RTerminalRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Parenthesis__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parenthesis__Group__0__Impl
	rule__Parenthesis__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parenthesis__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesisAccess().getLPARENTerminalRuleCall_0()); }
	RULE_LPAREN
{ after(grammarAccess.getParenthesisAccess().getLPARENTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parenthesis__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parenthesis__Group__1__Impl
	rule__Parenthesis__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parenthesis__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesisAccess().getInnerExpressionAssignment_1()); }
(rule__Parenthesis__InnerExpressionAssignment_1)
{ after(grammarAccess.getParenthesisAccess().getInnerExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parenthesis__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parenthesis__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parenthesis__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesisAccess().getRPARENTerminalRuleCall_2()); }
	RULE_RPAREN
{ after(grammarAccess.getParenthesisAccess().getRPARENTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FunctionLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionLiteral__Group__0__Impl
	rule__FunctionLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralAccess().getIdAssignment_0()); }
(rule__FunctionLiteral__IdAssignment_0)
{ after(grammarAccess.getFunctionLiteralAccess().getIdAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionLiteral__Group__1__Impl
	rule__FunctionLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralAccess().getLPARENTerminalRuleCall_1()); }
	RULE_LPAREN
{ after(grammarAccess.getFunctionLiteralAccess().getLPARENTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionLiteral__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionLiteral__Group__2__Impl
	rule__FunctionLiteral__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteral__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralAccess().getGroup_2()); }
(rule__FunctionLiteral__Group_2__0)?
{ after(grammarAccess.getFunctionLiteralAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionLiteral__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionLiteral__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteral__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralAccess().getRPARENTerminalRuleCall_3()); }
	RULE_RPAREN
{ after(grammarAccess.getFunctionLiteralAccess().getRPARENTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FunctionLiteral__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionLiteral__Group_2__0__Impl
	rule__FunctionLiteral__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteral__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralAccess().getParameters_FunctionLiteralAssignment_2_0()); }
(rule__FunctionLiteral__Parameters_FunctionLiteralAssignment_2_0)
{ after(grammarAccess.getFunctionLiteralAccess().getParameters_FunctionLiteralAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionLiteral__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionLiteral__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteral__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralAccess().getGroup_2_1()); }
(rule__FunctionLiteral__Group_2_1__0)*
{ after(grammarAccess.getFunctionLiteralAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionLiteral__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionLiteral__Group_2_1__0__Impl
	rule__FunctionLiteral__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteral__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralAccess().getCOLONTerminalRuleCall_2_1_0()); }
	RULE_COLON
{ after(grammarAccess.getFunctionLiteralAccess().getCOLONTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionLiteral__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionLiteral__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteral__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralAccess().getParameters_FunctionLiteralAssignment_2_1_1()); }
(rule__FunctionLiteral__Parameters_FunctionLiteralAssignment_2_1_1)
{ after(grammarAccess.getFunctionLiteralAccess().getParameters_FunctionLiteralAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NamespaceReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceReference__Group__0__Impl
	rule__NamespaceReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceReferenceAccess().getReferenceNameAssignment_0()); }
(rule__NamespaceReference__ReferenceNameAssignment_0)
{ after(grammarAccess.getNamespaceReferenceAccess().getReferenceNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceReference__Group__1__Impl
	rule__NamespaceReference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceReferenceAccess().getDOTTerminalRuleCall_1()); }
	RULE_DOT
{ after(grammarAccess.getNamespaceReferenceAccess().getDOTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceReference__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceReference__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceReference__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceReferenceAccess().getInnerReference_NamespaceReferenceAssignment_2()); }
(rule__NamespaceReference__InnerReference_NamespaceReferenceAssignment_2)
{ after(grammarAccess.getNamespaceReferenceAccess().getInnerReference_NamespaceReferenceAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IntLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntLiteral__Group__0__Impl
	rule__IntLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLiteralAccess().getValueAssignment_0()); }
(rule__IntLiteral__ValueAssignment_0)
{ after(grammarAccess.getIntLiteralAccess().getValueAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLiteralAccess().getGroup_1()); }
(rule__IntLiteral__Group_1__0)?
{ after(grammarAccess.getIntLiteralAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IntLiteral__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntLiteral__Group_1__0__Impl
	rule__IntLiteral__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLiteralAccess().getSQUARE_PAREN_LTerminalRuleCall_1_0()); }
	RULE_SQUARE_PAREN_L
{ after(grammarAccess.getIntLiteralAccess().getSQUARE_PAREN_LTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntLiteral__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntLiteral__Group_1__1__Impl
	rule__IntLiteral__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLiteralAccess().getUnitAssignment_1_1()); }
(rule__IntLiteral__UnitAssignment_1_1)
{ after(grammarAccess.getIntLiteralAccess().getUnitAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntLiteral__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntLiteral__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLiteralAccess().getSQUARE_PAREN_RTerminalRuleCall_1_2()); }
	RULE_SQUARE_PAREN_R
{ after(grammarAccess.getIntLiteralAccess().getSQUARE_PAREN_RTerminalRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnitDiv__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitDiv__Group__0__Impl
	rule__UnitDiv__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitDiv__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitDivAccess().getUnitPowParserRuleCall_0()); }
	ruleunitPow
{ after(grammarAccess.getUnitDivAccess().getUnitPowParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitDiv__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitDiv__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitDiv__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitDivAccess().getGroup_1()); }
(rule__UnitDiv__Group_1__0)?
{ after(grammarAccess.getUnitDivAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitDiv__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitDiv__Group_1__0__Impl
	rule__UnitDiv__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitDiv__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitDivAccess().getUnitDivisionDividendAction_1_0()); }
(

)
{ after(grammarAccess.getUnitDivAccess().getUnitDivisionDividendAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitDiv__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitDiv__Group_1__1__Impl
	rule__UnitDiv__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitDiv__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitDivAccess().getSolidusKeyword_1_1()); }

	'/' 

{ after(grammarAccess.getUnitDivAccess().getSolidusKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitDiv__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitDiv__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitDiv__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitDivAccess().getDivisorAssignment_1_2()); }
(rule__UnitDiv__DivisorAssignment_1_2)
{ after(grammarAccess.getUnitDivAccess().getDivisorAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnitMulti__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitMulti__Group__0__Impl
	rule__UnitMulti__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitMulti__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitMultiAccess().getUnitPowParserRuleCall_0()); }
	ruleunitPow
{ after(grammarAccess.getUnitMultiAccess().getUnitPowParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitMulti__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitMulti__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitMulti__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitMultiAccess().getGroup_1()); }
(rule__UnitMulti__Group_1__0)*
{ after(grammarAccess.getUnitMultiAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitMulti__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitMulti__Group_1__0__Impl
	rule__UnitMulti__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitMulti__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitMultiAccess().getUnitMultiplicationUnitsAction_1_0()); }
(

)
{ after(grammarAccess.getUnitMultiAccess().getUnitMultiplicationUnitsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitMulti__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitMulti__Group_1__1__Impl
	rule__UnitMulti__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitMulti__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitMultiAccess().getAsteriskKeyword_1_1()); }

	'*' 

{ after(grammarAccess.getUnitMultiAccess().getAsteriskKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitMulti__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitMulti__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitMulti__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitMultiAccess().getUnitsAssignment_1_2()); }
(rule__UnitMulti__UnitsAssignment_1_2)
{ after(grammarAccess.getUnitMultiAccess().getUnitsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnitPow__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitPow__Group__0__Impl
	rule__UnitPow__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitPow__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitPowAccess().getAlternatives_0()); }
(rule__UnitPow__Alternatives_0)
{ after(grammarAccess.getUnitPowAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitPow__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitPow__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitPow__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitPowAccess().getGroup_1()); }
(rule__UnitPow__Group_1__0)*
{ after(grammarAccess.getUnitPowAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitPow__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitPow__Group_0_1__0__Impl
	rule__UnitPow__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitPow__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitPowAccess().getLPARENTerminalRuleCall_0_1_0()); }
	RULE_LPAREN
{ after(grammarAccess.getUnitPowAccess().getLPARENTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitPow__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitPow__Group_0_1__1__Impl
	rule__UnitPow__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitPow__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitPowAccess().getAlternatives_0_1_1()); }
(rule__UnitPow__Alternatives_0_1_1)
{ after(grammarAccess.getUnitPowAccess().getAlternatives_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitPow__Group_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitPow__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitPow__Group_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitPowAccess().getRPARENTerminalRuleCall_0_1_2()); }
	RULE_RPAREN
{ after(grammarAccess.getUnitPowAccess().getRPARENTerminalRuleCall_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnitPow__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitPow__Group_1__0__Impl
	rule__UnitPow__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitPow__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitPowAccess().getUnitPowerUnitAction_1_0()); }
(

)
{ after(grammarAccess.getUnitPowAccess().getUnitPowerUnitAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitPow__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitPow__Group_1__1__Impl
	rule__UnitPow__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitPow__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitPowAccess().getPOWTerminalRuleCall_1_1()); }
	RULE_POW
{ after(grammarAccess.getUnitPowAccess().getPOWTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitPow__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitPow__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitPow__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitPowAccess().getExponentAssignment_1_2()); }
(rule__UnitPow__ExponentAssignment_1_2)
{ after(grammarAccess.getUnitPowAccess().getExponentAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BoxedPDF__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoxedPDF__Group__0__Impl
	rule__BoxedPDF__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoxedPDF__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoxedPDFAccess().getDOUBLEPDFTerminalRuleCall_0()); }
	RULE_DOUBLEPDF
{ after(grammarAccess.getBoxedPDFAccess().getDOUBLEPDFTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoxedPDF__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoxedPDF__Group__1__Impl
	rule__BoxedPDF__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BoxedPDF__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoxedPDFAccess().getSQUARE_PAREN_LTerminalRuleCall_1()); }
	RULE_SQUARE_PAREN_L
{ after(grammarAccess.getBoxedPDFAccess().getSQUARE_PAREN_LTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoxedPDF__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoxedPDF__Group__2__Impl
	rule__BoxedPDF__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BoxedPDF__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getBoxedPDFAccess().getSamplesAssignment_2()); }
(rule__BoxedPDF__SamplesAssignment_2)
{ after(grammarAccess.getBoxedPDFAccess().getSamplesAssignment_2()); }
)
(
{ before(grammarAccess.getBoxedPDFAccess().getSamplesAssignment_2()); }
(rule__BoxedPDF__SamplesAssignment_2)*
{ after(grammarAccess.getBoxedPDFAccess().getSamplesAssignment_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoxedPDF__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoxedPDF__Group__3__Impl
	rule__BoxedPDF__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BoxedPDF__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoxedPDFAccess().getSQUARE_PAREN_RTerminalRuleCall_3()); }
	RULE_SQUARE_PAREN_R
{ after(grammarAccess.getBoxedPDFAccess().getSQUARE_PAREN_RTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoxedPDF__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoxedPDF__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoxedPDF__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoxedPDFAccess().getGroup_4()); }
(rule__BoxedPDF__Group_4__0)?
{ after(grammarAccess.getBoxedPDFAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__BoxedPDF__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoxedPDF__Group_4__0__Impl
	rule__BoxedPDF__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoxedPDF__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoxedPDFAccess().getSQUARE_PAREN_LTerminalRuleCall_4_0()); }
	RULE_SQUARE_PAREN_L
{ after(grammarAccess.getBoxedPDFAccess().getSQUARE_PAREN_LTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoxedPDF__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoxedPDF__Group_4__1__Impl
	rule__BoxedPDF__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BoxedPDF__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoxedPDFAccess().getUnitAssignment_4_1()); }
(rule__BoxedPDF__UnitAssignment_4_1)
{ after(grammarAccess.getBoxedPDFAccess().getUnitAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoxedPDF__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoxedPDF__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoxedPDF__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoxedPDFAccess().getSQUARE_PAREN_RTerminalRuleCall_4_2()); }
	RULE_SQUARE_PAREN_R
{ after(grammarAccess.getBoxedPDFAccess().getSQUARE_PAREN_RTerminalRuleCall_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ProbabilityMassFunction__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_0__0__Impl
	rule__ProbabilityMassFunction__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getINTPMFTerminalRuleCall_0_0()); }
	RULE_INTPMF
{ after(grammarAccess.getProbabilityMassFunctionAccess().getINTPMFTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityMassFunction__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_0__1__Impl
	rule__ProbabilityMassFunction__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_LTerminalRuleCall_0_1()); }
	RULE_SQUARE_PAREN_L
{ after(grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_LTerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityMassFunction__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_0__2__Impl
	rule__ProbabilityMassFunction__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getSamplesAssignment_0_2()); }
(rule__ProbabilityMassFunction__SamplesAssignment_0_2)
{ after(grammarAccess.getProbabilityMassFunctionAccess().getSamplesAssignment_0_2()); }
)
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getSamplesAssignment_0_2()); }
(rule__ProbabilityMassFunction__SamplesAssignment_0_2)*
{ after(grammarAccess.getProbabilityMassFunctionAccess().getSamplesAssignment_0_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityMassFunction__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_0__3__Impl
	rule__ProbabilityMassFunction__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_RTerminalRuleCall_0_3()); }
	RULE_SQUARE_PAREN_R
{ after(grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_RTerminalRuleCall_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityMassFunction__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getGroup_0_4()); }
(rule__ProbabilityMassFunction__Group_0_4__0)?
{ after(grammarAccess.getProbabilityMassFunctionAccess().getGroup_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ProbabilityMassFunction__Group_0_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_0_4__0__Impl
	rule__ProbabilityMassFunction__Group_0_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_0_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_LTerminalRuleCall_0_4_0()); }
	RULE_SQUARE_PAREN_L
{ after(grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_LTerminalRuleCall_0_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityMassFunction__Group_0_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_0_4__1__Impl
	rule__ProbabilityMassFunction__Group_0_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_0_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getUnitAssignment_0_4_1()); }
(rule__ProbabilityMassFunction__UnitAssignment_0_4_1)
{ after(grammarAccess.getProbabilityMassFunctionAccess().getUnitAssignment_0_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityMassFunction__Group_0_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_0_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_0_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_RTerminalRuleCall_0_4_2()); }
	RULE_SQUARE_PAREN_R
{ after(grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_RTerminalRuleCall_0_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ProbabilityMassFunction__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_1__0__Impl
	rule__ProbabilityMassFunction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getDOUBLEPMFTerminalRuleCall_1_0()); }
	RULE_DOUBLEPMF
{ after(grammarAccess.getProbabilityMassFunctionAccess().getDOUBLEPMFTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityMassFunction__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_1__1__Impl
	rule__ProbabilityMassFunction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_LTerminalRuleCall_1_1()); }
	RULE_SQUARE_PAREN_L
{ after(grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_LTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityMassFunction__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_1__2__Impl
	rule__ProbabilityMassFunction__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getSamplesAssignment_1_2()); }
(rule__ProbabilityMassFunction__SamplesAssignment_1_2)
{ after(grammarAccess.getProbabilityMassFunctionAccess().getSamplesAssignment_1_2()); }
)
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getSamplesAssignment_1_2()); }
(rule__ProbabilityMassFunction__SamplesAssignment_1_2)*
{ after(grammarAccess.getProbabilityMassFunctionAccess().getSamplesAssignment_1_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityMassFunction__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_1__3__Impl
	rule__ProbabilityMassFunction__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_RTerminalRuleCall_1_3()); }
	RULE_SQUARE_PAREN_R
{ after(grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_RTerminalRuleCall_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityMassFunction__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getGroup_1_4()); }
(rule__ProbabilityMassFunction__Group_1_4__0)?
{ after(grammarAccess.getProbabilityMassFunctionAccess().getGroup_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ProbabilityMassFunction__Group_1_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_1_4__0__Impl
	rule__ProbabilityMassFunction__Group_1_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_1_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_LTerminalRuleCall_1_4_0()); }
	RULE_SQUARE_PAREN_L
{ after(grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_LTerminalRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityMassFunction__Group_1_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_1_4__1__Impl
	rule__ProbabilityMassFunction__Group_1_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_1_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getUnitAssignment_1_4_1()); }
(rule__ProbabilityMassFunction__UnitAssignment_1_4_1)
{ after(grammarAccess.getProbabilityMassFunctionAccess().getUnitAssignment_1_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityMassFunction__Group_1_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_1_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_1_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_RTerminalRuleCall_1_4_2()); }
	RULE_SQUARE_PAREN_R
{ after(grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_RTerminalRuleCall_1_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ProbabilityMassFunction__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_2__0__Impl
	rule__ProbabilityMassFunction__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getENUMPMFTerminalRuleCall_2_0()); }
	RULE_ENUMPMF
{ after(grammarAccess.getProbabilityMassFunctionAccess().getENUMPMFTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityMassFunction__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_2__1__Impl
	rule__ProbabilityMassFunction__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getGroup_2_1()); }
(rule__ProbabilityMassFunction__Group_2_1__0)?
{ after(grammarAccess.getProbabilityMassFunctionAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityMassFunction__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_2__2__Impl
	rule__ProbabilityMassFunction__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_LTerminalRuleCall_2_2()); }
	RULE_SQUARE_PAREN_L
{ after(grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_LTerminalRuleCall_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityMassFunction__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_2__3__Impl
	rule__ProbabilityMassFunction__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getSamplesAssignment_2_3()); }
(rule__ProbabilityMassFunction__SamplesAssignment_2_3)
{ after(grammarAccess.getProbabilityMassFunctionAccess().getSamplesAssignment_2_3()); }
)
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getSamplesAssignment_2_3()); }
(rule__ProbabilityMassFunction__SamplesAssignment_2_3)*
{ after(grammarAccess.getProbabilityMassFunctionAccess().getSamplesAssignment_2_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityMassFunction__Group_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_2__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_2__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_RTerminalRuleCall_2_4()); }
	RULE_SQUARE_PAREN_R
{ after(grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_RTerminalRuleCall_2_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ProbabilityMassFunction__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_2_1__0__Impl
	rule__ProbabilityMassFunction__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getLPARENTerminalRuleCall_2_1_0()); }
	RULE_LPAREN
{ after(grammarAccess.getProbabilityMassFunctionAccess().getLPARENTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityMassFunction__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_2_1__1__Impl
	rule__ProbabilityMassFunction__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getOrderedDomainAssignment_2_1_1()); }
(rule__ProbabilityMassFunction__OrderedDomainAssignment_2_1_1)
{ after(grammarAccess.getProbabilityMassFunctionAccess().getOrderedDomainAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityMassFunction__Group_2_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_2_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getRPARENTerminalRuleCall_2_1_2()); }
	RULE_RPAREN
{ after(grammarAccess.getProbabilityMassFunctionAccess().getRPARENTerminalRuleCall_2_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ProbabilityMassFunction__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_3__0__Impl
	rule__ProbabilityMassFunction__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getBOOLPMFTerminalRuleCall_3_0()); }
	RULE_BOOLPMF
{ after(grammarAccess.getProbabilityMassFunctionAccess().getBOOLPMFTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityMassFunction__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_3__1__Impl
	rule__ProbabilityMassFunction__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getGroup_3_1()); }
(rule__ProbabilityMassFunction__Group_3_1__0)?
{ after(grammarAccess.getProbabilityMassFunctionAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityMassFunction__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_3__2__Impl
	rule__ProbabilityMassFunction__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_LTerminalRuleCall_3_2()); }
	RULE_SQUARE_PAREN_L
{ after(grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_LTerminalRuleCall_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityMassFunction__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_3__3__Impl
	rule__ProbabilityMassFunction__Group_3__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getSamplesAssignment_3_3()); }
(rule__ProbabilityMassFunction__SamplesAssignment_3_3)
{ after(grammarAccess.getProbabilityMassFunctionAccess().getSamplesAssignment_3_3()); }
)
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getSamplesAssignment_3_3()); }
(rule__ProbabilityMassFunction__SamplesAssignment_3_3)*
{ after(grammarAccess.getProbabilityMassFunctionAccess().getSamplesAssignment_3_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityMassFunction__Group_3__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_3__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_3__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_RTerminalRuleCall_3_4()); }
	RULE_SQUARE_PAREN_R
{ after(grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_RTerminalRuleCall_3_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ProbabilityMassFunction__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_3_1__0__Impl
	rule__ProbabilityMassFunction__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getLPARENTerminalRuleCall_3_1_0()); }
	RULE_LPAREN
{ after(grammarAccess.getProbabilityMassFunctionAccess().getLPARENTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityMassFunction__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_3_1__1__Impl
	rule__ProbabilityMassFunction__Group_3_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getOrderedDomainAssignment_3_1_1()); }
(rule__ProbabilityMassFunction__OrderedDomainAssignment_3_1_1)
{ after(grammarAccess.getProbabilityMassFunctionAccess().getOrderedDomainAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityMassFunction__Group_3_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityMassFunction__Group_3_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__Group_3_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getRPARENTerminalRuleCall_3_1_2()); }
	RULE_RPAREN
{ after(grammarAccess.getProbabilityMassFunctionAccess().getRPARENTerminalRuleCall_3_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Numeric_int_sample__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Numeric_int_sample__Group__0__Impl
	rule__Numeric_int_sample__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Numeric_int_sample__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumeric_int_sampleAccess().getLPARENTerminalRuleCall_0()); }
	RULE_LPAREN
{ after(grammarAccess.getNumeric_int_sampleAccess().getLPARENTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Numeric_int_sample__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Numeric_int_sample__Group__1__Impl
	rule__Numeric_int_sample__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Numeric_int_sample__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumeric_int_sampleAccess().getValueAssignment_1()); }
(rule__Numeric_int_sample__ValueAssignment_1)
{ after(grammarAccess.getNumeric_int_sampleAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Numeric_int_sample__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Numeric_int_sample__Group__2__Impl
	rule__Numeric_int_sample__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Numeric_int_sample__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumeric_int_sampleAccess().getSEMITerminalRuleCall_2()); }
	RULE_SEMI
{ after(grammarAccess.getNumeric_int_sampleAccess().getSEMITerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Numeric_int_sample__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Numeric_int_sample__Group__3__Impl
	rule__Numeric_int_sample__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Numeric_int_sample__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumeric_int_sampleAccess().getProbabilityAssignment_3()); }
(rule__Numeric_int_sample__ProbabilityAssignment_3)
{ after(grammarAccess.getNumeric_int_sampleAccess().getProbabilityAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Numeric_int_sample__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Numeric_int_sample__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Numeric_int_sample__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumeric_int_sampleAccess().getRPARENTerminalRuleCall_4()); }
	RULE_RPAREN
{ after(grammarAccess.getNumeric_int_sampleAccess().getRPARENTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Numeric_real_sample__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Numeric_real_sample__Group__0__Impl
	rule__Numeric_real_sample__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Numeric_real_sample__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumeric_real_sampleAccess().getLPARENTerminalRuleCall_0()); }
	RULE_LPAREN
{ after(grammarAccess.getNumeric_real_sampleAccess().getLPARENTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Numeric_real_sample__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Numeric_real_sample__Group__1__Impl
	rule__Numeric_real_sample__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Numeric_real_sample__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumeric_real_sampleAccess().getValueAssignment_1()); }
(rule__Numeric_real_sample__ValueAssignment_1)
{ after(grammarAccess.getNumeric_real_sampleAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Numeric_real_sample__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Numeric_real_sample__Group__2__Impl
	rule__Numeric_real_sample__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Numeric_real_sample__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumeric_real_sampleAccess().getSEMITerminalRuleCall_2()); }
	RULE_SEMI
{ after(grammarAccess.getNumeric_real_sampleAccess().getSEMITerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Numeric_real_sample__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Numeric_real_sample__Group__3__Impl
	rule__Numeric_real_sample__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Numeric_real_sample__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumeric_real_sampleAccess().getProbabilityAssignment_3()); }
(rule__Numeric_real_sample__ProbabilityAssignment_3)
{ after(grammarAccess.getNumeric_real_sampleAccess().getProbabilityAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Numeric_real_sample__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Numeric_real_sample__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Numeric_real_sample__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumeric_real_sampleAccess().getRPARENTerminalRuleCall_4()); }
	RULE_RPAREN
{ after(grammarAccess.getNumeric_real_sampleAccess().getRPARENTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Real_pdf_sample__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real_pdf_sample__Group__0__Impl
	rule__Real_pdf_sample__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Real_pdf_sample__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReal_pdf_sampleAccess().getLPARENTerminalRuleCall_0()); }
	RULE_LPAREN
{ after(grammarAccess.getReal_pdf_sampleAccess().getLPARENTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real_pdf_sample__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real_pdf_sample__Group__1__Impl
	rule__Real_pdf_sample__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Real_pdf_sample__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReal_pdf_sampleAccess().getValueAssignment_1()); }
(rule__Real_pdf_sample__ValueAssignment_1)
{ after(grammarAccess.getReal_pdf_sampleAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real_pdf_sample__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real_pdf_sample__Group__2__Impl
	rule__Real_pdf_sample__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Real_pdf_sample__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReal_pdf_sampleAccess().getSEMITerminalRuleCall_2()); }
	RULE_SEMI
{ after(grammarAccess.getReal_pdf_sampleAccess().getSEMITerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real_pdf_sample__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real_pdf_sample__Group__3__Impl
	rule__Real_pdf_sample__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Real_pdf_sample__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReal_pdf_sampleAccess().getProbabilityAssignment_3()); }
(rule__Real_pdf_sample__ProbabilityAssignment_3)
{ after(grammarAccess.getReal_pdf_sampleAccess().getProbabilityAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real_pdf_sample__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real_pdf_sample__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Real_pdf_sample__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReal_pdf_sampleAccess().getRPARENTerminalRuleCall_4()); }
	RULE_RPAREN
{ after(grammarAccess.getReal_pdf_sampleAccess().getRPARENTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Stringsample__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Stringsample__Group__0__Impl
	rule__Stringsample__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Stringsample__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringsampleAccess().getLPARENTerminalRuleCall_0()); }
	RULE_LPAREN
{ after(grammarAccess.getStringsampleAccess().getLPARENTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Stringsample__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Stringsample__Group__1__Impl
	rule__Stringsample__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Stringsample__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringsampleAccess().getValueAssignment_1()); }
(rule__Stringsample__ValueAssignment_1)
{ after(grammarAccess.getStringsampleAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Stringsample__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Stringsample__Group__2__Impl
	rule__Stringsample__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Stringsample__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringsampleAccess().getSEMITerminalRuleCall_2()); }
	RULE_SEMI
{ after(grammarAccess.getStringsampleAccess().getSEMITerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Stringsample__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Stringsample__Group__3__Impl
	rule__Stringsample__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Stringsample__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringsampleAccess().getProbabilityAssignment_3()); }
(rule__Stringsample__ProbabilityAssignment_3)
{ after(grammarAccess.getStringsampleAccess().getProbabilityAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Stringsample__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Stringsample__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Stringsample__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringsampleAccess().getRPARENTerminalRuleCall_4()); }
	RULE_RPAREN
{ after(grammarAccess.getStringsampleAccess().getRPARENTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Boolsample__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Boolsample__Group__0__Impl
	rule__Boolsample__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolsample__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolsampleAccess().getLPARENTerminalRuleCall_0()); }
	RULE_LPAREN
{ after(grammarAccess.getBoolsampleAccess().getLPARENTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Boolsample__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Boolsample__Group__1__Impl
	rule__Boolsample__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolsample__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolsampleAccess().getValueAssignment_1()); }
(rule__Boolsample__ValueAssignment_1)
{ after(grammarAccess.getBoolsampleAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Boolsample__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Boolsample__Group__2__Impl
	rule__Boolsample__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolsample__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolsampleAccess().getSEMITerminalRuleCall_2()); }
	RULE_SEMI
{ after(grammarAccess.getBoolsampleAccess().getSEMITerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Boolsample__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Boolsample__Group__3__Impl
	rule__Boolsample__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolsample__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolsampleAccess().getProbabilityAssignment_3()); }
(rule__Boolsample__ProbabilityAssignment_3)
{ after(grammarAccess.getBoolsampleAccess().getProbabilityAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Boolsample__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Boolsample__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolsample__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolsampleAccess().getRPARENTerminalRuleCall_4()); }
	RULE_RPAREN
{ after(grammarAccess.getBoolsampleAccess().getRPARENTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SIGNED_NUMBER__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SIGNED_NUMBER__Group__0__Impl
	rule__SIGNED_NUMBER__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SIGNED_NUMBER__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSIGNED_NUMBERAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getSIGNED_NUMBERAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SIGNED_NUMBER__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SIGNED_NUMBER__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SIGNED_NUMBER__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSIGNED_NUMBERAccess().getDOUBLETerminalRuleCall_1()); }
	RULE_DOUBLE
{ after(grammarAccess.getSIGNED_NUMBERAccess().getDOUBLETerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SIGNED_INT__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SIGNED_INT__Group__0__Impl
	rule__SIGNED_INT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SIGNED_INT__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSIGNED_INTAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getSIGNED_INTAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SIGNED_INT__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SIGNED_INT__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SIGNED_INT__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSIGNED_INTAccess().getDECINTTerminalRuleCall_1()); }
	RULE_DECINT
{ after(grammarAccess.getSIGNED_INTAccess().getDECINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__IfelseExpr__IfExpressionAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfelseExprAccess().getIfExpressionBoolAndExprParserRuleCall_1_2_0()); }
	ruleboolAndExpr{ after(grammarAccess.getIfelseExprAccess().getIfExpressionBoolAndExprParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfelseExpr__ElseExpressionAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfelseExprAccess().getElseExpressionBoolAndExprParserRuleCall_1_4_0()); }
	ruleboolAndExpr{ after(grammarAccess.getIfelseExprAccess().getElseExpressionBoolAndExprParserRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__BoolAndExpr__OperationAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAndExprAccess().getOperationAndoperationEnumRuleCall_1_1_0()); }
	ruleandoperation{ after(grammarAccess.getBoolAndExprAccess().getOperationAndoperationEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolAndExpr__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAndExprAccess().getRightBoolOrExprParserRuleCall_1_2_0()); }
	ruleboolOrExpr{ after(grammarAccess.getBoolAndExprAccess().getRightBoolOrExprParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOrExpr__OperationAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolOrExprAccess().getOperationOroperationsEnumRuleCall_1_1_0()); }
	ruleoroperations{ after(grammarAccess.getBoolOrExprAccess().getOperationOroperationsEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOrExpr__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolOrExprAccess().getRightCompareExprParserRuleCall_1_2_0()); }
	rulecompareExpr{ after(grammarAccess.getBoolOrExprAccess().getRightCompareExprParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpr__OperationAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExprAccess().getOperationCompareOperationsEnumRuleCall_1_1_0()); }
	ruleCompareOperations{ after(grammarAccess.getCompareExprAccess().getOperationCompareOperationsEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpr__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExprAccess().getRightSumExprParserRuleCall_1_2_0()); }
	rulesumExpr{ after(grammarAccess.getCompareExprAccess().getRightSumExprParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SumExpr__OperationAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumExprAccess().getOperationTermOperationsEnumRuleCall_1_1_0()); }
	ruleTermOperations{ after(grammarAccess.getSumExprAccess().getOperationTermOperationsEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SumExpr__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumExprAccess().getRightProdExprParserRuleCall_1_2_0()); }
	ruleprodExpr{ after(grammarAccess.getSumExprAccess().getRightProdExprParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProdExpr__OperationAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProdExprAccess().getOperationProductOperationsEnumRuleCall_1_1_0()); }
	ruleProductOperations{ after(grammarAccess.getProdExprAccess().getOperationProductOperationsEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProdExpr__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProdExprAccess().getRightPowExprParserRuleCall_1_2_0()); }
	rulepowExpr{ after(grammarAccess.getProdExprAccess().getRightPowExprParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PowExpr__ExponentAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowExprAccess().getExponentUnaryExprParserRuleCall_1_2_0()); }
	ruleunaryExpr{ after(grammarAccess.getPowExprAccess().getExponentUnaryExprParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__InnerAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getInnerUnaryExprParserRuleCall_1_0()); }
	ruleunaryExpr{ after(grammarAccess.getNotExpressionAccess().getInnerUnaryExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegativeExpression__InnerAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegativeExpressionAccess().getInnerUnaryExprParserRuleCall_1_0()); }
	ruleunaryExpr{ after(grammarAccess.getNegativeExpressionAccess().getInnerUnaryExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleLiteral__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleLiteralAccess().getValueDOUBLETerminalRuleCall_0_0()); }
	RULE_DOUBLE{ after(grammarAccess.getDoubleLiteralAccess().getValueDOUBLETerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleLiteral__UnitAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleLiteralAccess().getUnitUnitParserRuleCall_1_1_0()); }
	ruleUnit{ after(grammarAccess.getDoubleLiteralAccess().getUnitUnitParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityFunctionLiteral__Function_ProbabilityFunctionLiteralAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityFunctionLiteralAccess().getFunction_ProbabilityFunctionLiteralDefinitionParserRuleCall_0()); }
	ruledefinition{ after(grammarAccess.getProbabilityFunctionLiteralAccess().getFunction_ProbabilityFunctionLiteralDefinitionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parenthesis__InnerExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesisAccess().getInnerExpressionIfelseExprParserRuleCall_1_0()); }
	ruleifelseExpr{ after(grammarAccess.getParenthesisAccess().getInnerExpressionIfelseExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteral__IdAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralAccess().getIdIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getFunctionLiteralAccess().getIdIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteral__Parameters_FunctionLiteralAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralAccess().getParameters_FunctionLiteralBoolAndExprParserRuleCall_2_0_0()); }
	ruleboolAndExpr{ after(grammarAccess.getFunctionLiteralAccess().getParameters_FunctionLiteralBoolAndExprParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteral__Parameters_FunctionLiteralAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralAccess().getParameters_FunctionLiteralBoolAndExprParserRuleCall_2_1_1_0()); }
	ruleboolAndExpr{ after(grammarAccess.getFunctionLiteralAccess().getParameters_FunctionLiteralBoolAndExprParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Id_VariableAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getId_VariableAbstractNamedReferenceParserRuleCall_0()); }
	ruleAbstractNamedReference{ after(grammarAccess.getVariableAccess().getId_VariableAbstractNamedReferenceParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__ReferenceNameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getReferenceNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getVariableReferenceAccess().getReferenceNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceReference__ReferenceNameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceReferenceAccess().getReferenceNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getNamespaceReferenceAccess().getReferenceNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceReference__InnerReference_NamespaceReferenceAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceReferenceAccess().getInnerReference_NamespaceReferenceAbstractNamedReferenceParserRuleCall_2_0()); }
	ruleAbstractNamedReference{ after(grammarAccess.getNamespaceReferenceAccess().getInnerReference_NamespaceReferenceAbstractNamedReferenceParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolLiteralAccess().getValueBOOLEAN_KEYWORDSTerminalRuleCall_0()); }
	RULE_BOOLEAN_KEYWORDS{ after(grammarAccess.getBoolLiteralAccess().getValueBOOLEAN_KEYWORDSTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLiteralAccess().getValueDECINTTerminalRuleCall_0_0()); }
	RULE_DECINT{ after(grammarAccess.getIntLiteralAccess().getValueDECINTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__UnitAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLiteralAccess().getUnitUnitParserRuleCall_1_1_0()); }
	ruleUnit{ after(grammarAccess.getIntLiteralAccess().getUnitUnitParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitDiv__DivisorAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitDivAccess().getDivisorUnitParserRuleCall_1_2_0()); }
	ruleUnit{ after(grammarAccess.getUnitDivAccess().getDivisorUnitParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitMulti__UnitsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitMultiAccess().getUnitsUnitParserRuleCall_1_2_0()); }
	ruleUnit{ after(grammarAccess.getUnitMultiAccess().getUnitsUnitParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitPow__ExponentAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitPowAccess().getExponentSIGNED_INTParserRuleCall_1_2_0()); }
	ruleSIGNED_INT{ after(grammarAccess.getUnitPowAccess().getExponentSIGNED_INTParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BaseUnit__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseUnitAccess().getNameUnitNamesEnumRuleCall_0()); }
	ruleUnitNames{ after(grammarAccess.getBaseUnitAccess().getNameUnitNamesEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoxedPDF__SamplesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoxedPDFAccess().getSamplesReal_pdf_sampleParserRuleCall_2_0()); }
	rulereal_pdf_sample{ after(grammarAccess.getBoxedPDFAccess().getSamplesReal_pdf_sampleParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoxedPDF__UnitAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoxedPDFAccess().getUnitUnitParserRuleCall_4_1_0()); }
	ruleUnit{ after(grammarAccess.getBoxedPDFAccess().getUnitUnitParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__SamplesAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getSamplesNumeric_int_sampleParserRuleCall_0_2_0()); }
	rulenumeric_int_sample{ after(grammarAccess.getProbabilityMassFunctionAccess().getSamplesNumeric_int_sampleParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__UnitAssignment_0_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getUnitUnitParserRuleCall_0_4_1_0()); }
	ruleUnit{ after(grammarAccess.getProbabilityMassFunctionAccess().getUnitUnitParserRuleCall_0_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__SamplesAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getSamplesNumeric_real_sampleParserRuleCall_1_2_0()); }
	rulenumeric_real_sample{ after(grammarAccess.getProbabilityMassFunctionAccess().getSamplesNumeric_real_sampleParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__UnitAssignment_1_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getUnitUnitParserRuleCall_1_4_1_0()); }
	ruleUnit{ after(grammarAccess.getProbabilityMassFunctionAccess().getUnitUnitParserRuleCall_1_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__OrderedDomainAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getOrderedDomainORDERED_DEFTerminalRuleCall_2_1_1_0()); }
	RULE_ORDERED_DEF{ after(grammarAccess.getProbabilityMassFunctionAccess().getOrderedDomainORDERED_DEFTerminalRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__SamplesAssignment_2_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getSamplesStringsampleParserRuleCall_2_3_0()); }
	rulestringsample{ after(grammarAccess.getProbabilityMassFunctionAccess().getSamplesStringsampleParserRuleCall_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__OrderedDomainAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getOrderedDomainORDERED_DEFTerminalRuleCall_3_1_1_0()); }
	RULE_ORDERED_DEF{ after(grammarAccess.getProbabilityMassFunctionAccess().getOrderedDomainORDERED_DEFTerminalRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityMassFunction__SamplesAssignment_3_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityMassFunctionAccess().getSamplesBoolsampleParserRuleCall_3_3_0()); }
	ruleboolsample{ after(grammarAccess.getProbabilityMassFunctionAccess().getSamplesBoolsampleParserRuleCall_3_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Numeric_int_sample__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumeric_int_sampleAccess().getValueSIGNED_INTParserRuleCall_1_0()); }
	ruleSIGNED_INT{ after(grammarAccess.getNumeric_int_sampleAccess().getValueSIGNED_INTParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Numeric_int_sample__ProbabilityAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumeric_int_sampleAccess().getProbabilityDOUBLETerminalRuleCall_3_0()); }
	RULE_DOUBLE{ after(grammarAccess.getNumeric_int_sampleAccess().getProbabilityDOUBLETerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Numeric_real_sample__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumeric_real_sampleAccess().getValueSIGNED_NUMBERParserRuleCall_1_0()); }
	ruleSIGNED_NUMBER{ after(grammarAccess.getNumeric_real_sampleAccess().getValueSIGNED_NUMBERParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Numeric_real_sample__ProbabilityAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumeric_real_sampleAccess().getProbabilityDOUBLETerminalRuleCall_3_0()); }
	RULE_DOUBLE{ after(grammarAccess.getNumeric_real_sampleAccess().getProbabilityDOUBLETerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Real_pdf_sample__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReal_pdf_sampleAccess().getValueSIGNED_NUMBERParserRuleCall_1_0()); }
	ruleSIGNED_NUMBER{ after(grammarAccess.getReal_pdf_sampleAccess().getValueSIGNED_NUMBERParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Real_pdf_sample__ProbabilityAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReal_pdf_sampleAccess().getProbabilityDOUBLETerminalRuleCall_3_0()); }
	RULE_DOUBLE{ after(grammarAccess.getReal_pdf_sampleAccess().getProbabilityDOUBLETerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Stringsample__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringsampleAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getStringsampleAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Stringsample__ProbabilityAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringsampleAccess().getProbabilityDOUBLETerminalRuleCall_3_0()); }
	RULE_DOUBLE{ after(grammarAccess.getStringsampleAccess().getProbabilityDOUBLETerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Boolsample__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolsampleAccess().getValueBOOLEAN_KEYWORDSTerminalRuleCall_1_0()); }
	RULE_BOOLEAN_KEYWORDS{ after(grammarAccess.getBoolsampleAccess().getValueBOOLEAN_KEYWORDSTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Boolsample__ProbabilityAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolsampleAccess().getProbabilityDOUBLETerminalRuleCall_3_0()); }
	RULE_DOUBLE{ after(grammarAccess.getBoolsampleAccess().getProbabilityDOUBLETerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_DOUBLE : RULE_DECINT (RULE_DOT RULE_DIGIT*|(RULE_DOT RULE_DIGIT*)? ('E'|'e') ('-'|'+')? RULE_DECINT);

RULE_DECINT : ('0'|'1'..'9' RULE_DIGIT*);

RULE_BOOLEAN_KEYWORDS : ('false'|'true');

RULE_NOT : 'NOT';

RULE_INTPMF : 'IntPMF';

RULE_DOUBLEPMF : 'DoublePMF';

RULE_ENUMPMF : 'EnumPMF';

RULE_DOUBLEPDF : 'DoublePDF';

RULE_BOOLPMF : 'BoolPMF';

RULE_POW : '^';

RULE_LPAREN : '(';

RULE_RPAREN : ')';

RULE_SEMI : ';';

RULE_COLON : ',';

RULE_ORDERED_DEF : 'ordered';

RULE_SQUARE_PAREN_L : '[';

RULE_SQUARE_PAREN_R : ']';

fragment RULE_DIGIT : '0'..'9';

RULE_DOT : '.';

RULE_CONDDELIMITER : '?';

RULE_ELSEDELIMITER : ':';

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


