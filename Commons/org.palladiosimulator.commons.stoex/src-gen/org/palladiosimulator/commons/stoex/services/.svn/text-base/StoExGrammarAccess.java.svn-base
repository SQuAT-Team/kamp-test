/*
 * generated by Xtext
 */
package org.palladiosimulator.commons.stoex.services;

import java.util.List;
import java.util.Map;

import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.resource.impl.BinaryGrammarResourceFactoryImpl;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

import com.google.inject.Inject;
import com.google.inject.Singleton;

@Singleton
public class StoExGrammarAccess extends AbstractGrammarElementFinder {

    public class ExpressionElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expression");
        private final RuleCall cIfelseExprParserRuleCall = (RuleCall) rule.eContents().get(1);

        // //#############################
        // // start-rule:
        // // expression -> ifelseExpr
        // expression returns Expression:
        // ifelseExpr;
        public ParserRule getRule() {
            return rule;
        }

        // ifelseExpr
        public RuleCall getIfelseExprParserRuleCall() {
            return cIfelseExprParserRuleCall;
        }
    }

    public class IfelseExprElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ifelseExpr");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cBoolAndExprParserRuleCall_0 = (RuleCall) cGroup.eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Action cIfElseExpressionConditionExpressionAction_1_0 = (Action) cGroup_1.eContents().get(0);
        private final RuleCall cCONDDELIMITERTerminalRuleCall_1_1 = (RuleCall) cGroup_1.eContents().get(1);
        private final Assignment cIfExpressionAssignment_1_2 = (Assignment) cGroup_1.eContents().get(2);
        private final RuleCall cIfExpressionBoolAndExprParserRuleCall_1_2_0 = (RuleCall) cIfExpressionAssignment_1_2
                .eContents().get(0);
        private final RuleCall cELSEDELIMITERTerminalRuleCall_1_3 = (RuleCall) cGroup_1.eContents().get(3);
        private final Assignment cElseExpressionAssignment_1_4 = (Assignment) cGroup_1.eContents().get(4);
        private final RuleCall cElseExpressionBoolAndExprParserRuleCall_1_4_0 = (RuleCall) cElseExpressionAssignment_1_4
                .eContents().get(0);

        // //#############################
        // // Stochastic Expressions:
        // // ifelseExpr -> boolAndExpr ('?' boolAndExpr ':' boolAndExpr)?
        // ifelseExpr returns IfElse:
        // boolAndExpr ({IfElseExpression.conditionExpression=current} CONDDELIMITER
        // ifExpression=boolAndExpr ELSEDELIMITER
        // elseExpression=boolAndExpr)?;
        public ParserRule getRule() {
            return rule;
        }

        // boolAndExpr ({IfElseExpression.conditionExpression=current} CONDDELIMITER
        // ifExpression=boolAndExpr ELSEDELIMITER
        // elseExpression=boolAndExpr)?
        public Group getGroup() {
            return cGroup;
        }

        // boolAndExpr
        public RuleCall getBoolAndExprParserRuleCall_0() {
            return cBoolAndExprParserRuleCall_0;
        }

        // ({IfElseExpression.conditionExpression=current} CONDDELIMITER ifExpression=boolAndExpr
        // ELSEDELIMITER
        // elseExpression=boolAndExpr)?
        public Group getGroup_1() {
            return cGroup_1;
        }

        // {IfElseExpression.conditionExpression=current}
        public Action getIfElseExpressionConditionExpressionAction_1_0() {
            return cIfElseExpressionConditionExpressionAction_1_0;
        }

        // CONDDELIMITER
        public RuleCall getCONDDELIMITERTerminalRuleCall_1_1() {
            return cCONDDELIMITERTerminalRuleCall_1_1;
        }

        // ifExpression=boolAndExpr
        public Assignment getIfExpressionAssignment_1_2() {
            return cIfExpressionAssignment_1_2;
        }

        // boolAndExpr
        public RuleCall getIfExpressionBoolAndExprParserRuleCall_1_2_0() {
            return cIfExpressionBoolAndExprParserRuleCall_1_2_0;
        }

        // ELSEDELIMITER
        public RuleCall getELSEDELIMITERTerminalRuleCall_1_3() {
            return cELSEDELIMITERTerminalRuleCall_1_3;
        }

        // elseExpression=boolAndExpr
        public Assignment getElseExpressionAssignment_1_4() {
            return cElseExpressionAssignment_1_4;
        }

        // boolAndExpr
        public RuleCall getElseExpressionBoolAndExprParserRuleCall_1_4_0() {
            return cElseExpressionBoolAndExprParserRuleCall_1_4_0;
        }
    }

    public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanExpression");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cBoolOrExprParserRuleCall_0 = (RuleCall) cGroup.eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Action cBooleanOperatorExpressionLeftAction_1_0 = (Action) cGroup_1.eContents().get(0);
        private final Assignment cOperationAssignment_1_1 = (Assignment) cGroup_1.eContents().get(1);
        private final RuleCall cOperationBooleanOperationsEnumRuleCall_1_1_0 = (RuleCall) cOperationAssignment_1_1
                .eContents().get(0);
        private final Assignment cRightAssignment_1_2 = (Assignment) cGroup_1.eContents().get(2);
        private final RuleCall cRightBoolOrExprParserRuleCall_1_2_0 = (RuleCall) cRightAssignment_1_2.eContents()
                .get(0);

        // //BooleanExpression -> boolOrExpr (BooleanOperations boolOrExpr)*
        // // Note: This is a workaround for the serializer to work with AND-Operations!
        // BooleanExpression:
        // boolOrExpr ({BooleanOperatorExpression.left=current} operation=BooleanOperations
        // right=boolOrExpr)*;
        public ParserRule getRule() {
            return rule;
        }

        // boolOrExpr ({BooleanOperatorExpression.left=current} operation=BooleanOperations
        // right=boolOrExpr)*
        public Group getGroup() {
            return cGroup;
        }

        // boolOrExpr
        public RuleCall getBoolOrExprParserRuleCall_0() {
            return cBoolOrExprParserRuleCall_0;
        }

        // ({BooleanOperatorExpression.left=current} operation=BooleanOperations right=boolOrExpr)*
        public Group getGroup_1() {
            return cGroup_1;
        }

        // {BooleanOperatorExpression.left=current}
        public Action getBooleanOperatorExpressionLeftAction_1_0() {
            return cBooleanOperatorExpressionLeftAction_1_0;
        }

        // operation=BooleanOperations
        public Assignment getOperationAssignment_1_1() {
            return cOperationAssignment_1_1;
        }

        // BooleanOperations
        public RuleCall getOperationBooleanOperationsEnumRuleCall_1_1_0() {
            return cOperationBooleanOperationsEnumRuleCall_1_1_0;
        }

        // right=boolOrExpr
        public Assignment getRightAssignment_1_2() {
            return cRightAssignment_1_2;
        }

        // boolOrExpr
        public RuleCall getRightBoolOrExprParserRuleCall_1_2_0() {
            return cRightBoolOrExprParserRuleCall_1_2_0;
        }
    }

    public class BoolAndExprElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boolAndExpr");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cBoolOrExprParserRuleCall_0 = (RuleCall) cGroup.eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Action cBooleanOperatorExpressionLeftAction_1_0 = (Action) cGroup_1.eContents().get(0);
        private final Assignment cOperationAssignment_1_1 = (Assignment) cGroup_1.eContents().get(1);
        private final RuleCall cOperationAndoperationEnumRuleCall_1_1_0 = (RuleCall) cOperationAssignment_1_1
                .eContents().get(0);
        private final Assignment cRightAssignment_1_2 = (Assignment) cGroup_1.eContents().get(2);
        private final RuleCall cRightBoolOrExprParserRuleCall_1_2_0 = (RuleCall) cRightAssignment_1_2.eContents()
                .get(0);

        // // boolAndExpr -> boolOrExpr (andoperation boolOrExpr)*
        // boolAndExpr returns BooleanExpression:
        // boolOrExpr ({BooleanOperatorExpression.left=current} operation=andoperation
        // right=boolOrExpr)*;
        public ParserRule getRule() {
            return rule;
        }

        // boolOrExpr ({BooleanOperatorExpression.left=current} operation=andoperation
        // right=boolOrExpr)*
        public Group getGroup() {
            return cGroup;
        }

        // boolOrExpr
        public RuleCall getBoolOrExprParserRuleCall_0() {
            return cBoolOrExprParserRuleCall_0;
        }

        // ({BooleanOperatorExpression.left=current} operation=andoperation right=boolOrExpr)*
        public Group getGroup_1() {
            return cGroup_1;
        }

        // {BooleanOperatorExpression.left=current}
        public Action getBooleanOperatorExpressionLeftAction_1_0() {
            return cBooleanOperatorExpressionLeftAction_1_0;
        }

        // operation=andoperation
        public Assignment getOperationAssignment_1_1() {
            return cOperationAssignment_1_1;
        }

        // andoperation
        public RuleCall getOperationAndoperationEnumRuleCall_1_1_0() {
            return cOperationAndoperationEnumRuleCall_1_1_0;
        }

        // right=boolOrExpr
        public Assignment getRightAssignment_1_2() {
            return cRightAssignment_1_2;
        }

        // boolOrExpr
        public RuleCall getRightBoolOrExprParserRuleCall_1_2_0() {
            return cRightBoolOrExprParserRuleCall_1_2_0;
        }
    }

    public class BoolOrExprElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boolOrExpr");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cCompareExprParserRuleCall_0 = (RuleCall) cGroup.eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Action cBooleanOperatorExpressionLeftAction_1_0 = (Action) cGroup_1.eContents().get(0);
        private final Assignment cOperationAssignment_1_1 = (Assignment) cGroup_1.eContents().get(1);
        private final RuleCall cOperationOroperationsEnumRuleCall_1_1_0 = (RuleCall) cOperationAssignment_1_1
                .eContents().get(0);
        private final Assignment cRightAssignment_1_2 = (Assignment) cGroup_1.eContents().get(2);
        private final RuleCall cRightCompareExprParserRuleCall_1_2_0 = (RuleCall) cRightAssignment_1_2.eContents().get(
                0);

        // // boolOrExpr -> compareExpr (oroperations compareExpr)*
        // boolOrExpr returns BooleanExpression:
        // compareExpr ({BooleanOperatorExpression.left=current} operation=oroperations
        // right=compareExpr)*;
        public ParserRule getRule() {
            return rule;
        }

        // compareExpr ({BooleanOperatorExpression.left=current} operation=oroperations
        // right=compareExpr)*
        public Group getGroup() {
            return cGroup;
        }

        // compareExpr
        public RuleCall getCompareExprParserRuleCall_0() {
            return cCompareExprParserRuleCall_0;
        }

        // ({BooleanOperatorExpression.left=current} operation=oroperations right=compareExpr)*
        public Group getGroup_1() {
            return cGroup_1;
        }

        // {BooleanOperatorExpression.left=current}
        public Action getBooleanOperatorExpressionLeftAction_1_0() {
            return cBooleanOperatorExpressionLeftAction_1_0;
        }

        // operation=oroperations
        public Assignment getOperationAssignment_1_1() {
            return cOperationAssignment_1_1;
        }

        // oroperations
        public RuleCall getOperationOroperationsEnumRuleCall_1_1_0() {
            return cOperationOroperationsEnumRuleCall_1_1_0;
        }

        // right=compareExpr
        public Assignment getRightAssignment_1_2() {
            return cRightAssignment_1_2;
        }

        // compareExpr
        public RuleCall getRightCompareExprParserRuleCall_1_2_0() {
            return cRightCompareExprParserRuleCall_1_2_0;
        }
    }

    public class CompareExprElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compareExpr");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cSumExprParserRuleCall_0 = (RuleCall) cGroup.eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Action cCompareExpressionLeftAction_1_0 = (Action) cGroup_1.eContents().get(0);
        private final Assignment cOperationAssignment_1_1 = (Assignment) cGroup_1.eContents().get(1);
        private final RuleCall cOperationCompareOperationsEnumRuleCall_1_1_0 = (RuleCall) cOperationAssignment_1_1
                .eContents().get(0);
        private final Assignment cRightAssignment_1_2 = (Assignment) cGroup_1.eContents().get(2);
        private final RuleCall cRightSumExprParserRuleCall_1_2_0 = (RuleCall) cRightAssignment_1_2.eContents().get(0);

        // // compareExpr -> sumExpr (CompareOperations sumExpr)?
        // compareExpr returns Comparison:
        // sumExpr ({CompareExpression.left=current} operation=CompareOperations right=sumExpr)?;

        public ParserRule getRule() {
            return rule;
        }

        // sumExpr ({CompareExpression.left=current} operation=CompareOperations right=sumExpr)?
        public Group getGroup() {
            return cGroup;
        }

        // sumExpr
        public RuleCall getSumExprParserRuleCall_0() {
            return cSumExprParserRuleCall_0;
        }

        // ({CompareExpression.left=current} operation=CompareOperations right=sumExpr)?
        public Group getGroup_1() {
            return cGroup_1;
        }

        // {CompareExpression.left=current}
        public Action getCompareExpressionLeftAction_1_0() {
            return cCompareExpressionLeftAction_1_0;
        }

        // operation=CompareOperations
        public Assignment getOperationAssignment_1_1() {
            return cOperationAssignment_1_1;
        }

        // CompareOperations
        public RuleCall getOperationCompareOperationsEnumRuleCall_1_1_0() {
            return cOperationCompareOperationsEnumRuleCall_1_1_0;
        }

        // right=sumExpr
        public Assignment getRightAssignment_1_2() {
            return cRightAssignment_1_2;
        }

        // sumExpr
        public RuleCall getRightSumExprParserRuleCall_1_2_0() {
            return cRightSumExprParserRuleCall_1_2_0;
        }
    }

    public class SumExprElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sumExpr");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cProdExprParserRuleCall_0 = (RuleCall) cGroup.eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Action cTermExpressionLeftAction_1_0 = (Action) cGroup_1.eContents().get(0);
        private final Assignment cOperationAssignment_1_1 = (Assignment) cGroup_1.eContents().get(1);
        private final RuleCall cOperationTermOperationsEnumRuleCall_1_1_0 = (RuleCall) cOperationAssignment_1_1
                .eContents().get(0);
        private final Assignment cRightAssignment_1_2 = (Assignment) cGroup_1.eContents().get(2);
        private final RuleCall cRightProdExprParserRuleCall_1_2_0 = (RuleCall) cRightAssignment_1_2.eContents().get(0);

        // // sumExpr -> prodExpr (TermOperations prodExpr)*
        // sumExpr returns Term:
        // prodExpr ({TermExpression.left=current} operation=TermOperations right=prodExpr)*;

        public ParserRule getRule() {
            return rule;
        }

        // prodExpr ({TermExpression.left=current} operation=TermOperations right=prodExpr)*
        public Group getGroup() {
            return cGroup;
        }

        // prodExpr
        public RuleCall getProdExprParserRuleCall_0() {
            return cProdExprParserRuleCall_0;
        }

        // ({TermExpression.left=current} operation=TermOperations right=prodExpr)*
        public Group getGroup_1() {
            return cGroup_1;
        }

        // {TermExpression.left=current}
        public Action getTermExpressionLeftAction_1_0() {
            return cTermExpressionLeftAction_1_0;
        }

        // operation=TermOperations
        public Assignment getOperationAssignment_1_1() {
            return cOperationAssignment_1_1;
        }

        // TermOperations
        public RuleCall getOperationTermOperationsEnumRuleCall_1_1_0() {
            return cOperationTermOperationsEnumRuleCall_1_1_0;
        }

        // right=prodExpr
        public Assignment getRightAssignment_1_2() {
            return cRightAssignment_1_2;
        }

        // prodExpr
        public RuleCall getRightProdExprParserRuleCall_1_2_0() {
            return cRightProdExprParserRuleCall_1_2_0;
        }
    }

    public class ProdExprElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "prodExpr");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cPowExprParserRuleCall_0 = (RuleCall) cGroup.eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Action cProductExpressionLeftAction_1_0 = (Action) cGroup_1.eContents().get(0);
        private final Assignment cOperationAssignment_1_1 = (Assignment) cGroup_1.eContents().get(1);
        private final RuleCall cOperationProductOperationsEnumRuleCall_1_1_0 = (RuleCall) cOperationAssignment_1_1
                .eContents().get(0);
        private final Assignment cRightAssignment_1_2 = (Assignment) cGroup_1.eContents().get(2);
        private final RuleCall cRightPowExprParserRuleCall_1_2_0 = (RuleCall) cRightAssignment_1_2.eContents().get(0);

        // // prodExpr -> powExpr (ProductOperations powExpr)*
        // prodExpr returns Product:
        // powExpr ({ProductExpression.left=current} operation=ProductOperations right=powExpr)*;

        public ParserRule getRule() {
            return rule;
        }

        // powExpr ({ProductExpression.left=current} operation=ProductOperations right=powExpr)*
        public Group getGroup() {
            return cGroup;
        }

        // powExpr
        public RuleCall getPowExprParserRuleCall_0() {
            return cPowExprParserRuleCall_0;
        }

        // ({ProductExpression.left=current} operation=ProductOperations right=powExpr)*
        public Group getGroup_1() {
            return cGroup_1;
        }

        // {ProductExpression.left=current}
        public Action getProductExpressionLeftAction_1_0() {
            return cProductExpressionLeftAction_1_0;
        }

        // operation=ProductOperations
        public Assignment getOperationAssignment_1_1() {
            return cOperationAssignment_1_1;
        }

        // ProductOperations
        public RuleCall getOperationProductOperationsEnumRuleCall_1_1_0() {
            return cOperationProductOperationsEnumRuleCall_1_1_0;
        }

        // right=powExpr
        public Assignment getRightAssignment_1_2() {
            return cRightAssignment_1_2;
        }

        // powExpr
        public RuleCall getRightPowExprParserRuleCall_1_2_0() {
            return cRightPowExprParserRuleCall_1_2_0;
        }
    }

    public class PowExprElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "powExpr");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cUnaryExprParserRuleCall_0 = (RuleCall) cGroup.eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Action cPowerExpressionBaseAction_1_0 = (Action) cGroup_1.eContents().get(0);
        private final RuleCall cPOWTerminalRuleCall_1_1 = (RuleCall) cGroup_1.eContents().get(1);
        private final Assignment cExponentAssignment_1_2 = (Assignment) cGroup_1.eContents().get(2);
        private final RuleCall cExponentUnaryExprParserRuleCall_1_2_0 = (RuleCall) cExponentAssignment_1_2.eContents()
                .get(0);

        // // powExpr -> unaryExpr (POW unaryExpr)?
        // powExpr returns Power:
        // unaryExpr ({PowerExpression.base=current} POW exponent=unaryExpr)?;

        public ParserRule getRule() {
            return rule;
        }

        // unaryExpr ({PowerExpression.base=current} POW exponent=unaryExpr)?
        public Group getGroup() {
            return cGroup;
        }

        // unaryExpr
        public RuleCall getUnaryExprParserRuleCall_0() {
            return cUnaryExprParserRuleCall_0;
        }

        // ({PowerExpression.base=current} POW exponent=unaryExpr)?
        public Group getGroup_1() {
            return cGroup_1;
        }

        // {PowerExpression.base=current}
        public Action getPowerExpressionBaseAction_1_0() {
            return cPowerExpressionBaseAction_1_0;
        }

        // POW
        public RuleCall getPOWTerminalRuleCall_1_1() {
            return cPOWTerminalRuleCall_1_1;
        }

        // exponent=unaryExpr
        public Assignment getExponentAssignment_1_2() {
            return cExponentAssignment_1_2;
        }

        // unaryExpr
        public RuleCall getExponentUnaryExprParserRuleCall_1_2_0() {
            return cExponentUnaryExprParserRuleCall_1_2_0;
        }
    }

    public class UnaryExprElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unaryExpr");
        private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
        private final RuleCall cNegativeExpressionParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
        private final RuleCall cNotExpressionParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);
        private final RuleCall cAtomParserRuleCall_2 = (RuleCall) cAlternatives.eContents().get(2);

        // // unaryExpr -> NegativeExpression | NotExpression | atom
        // unaryExpr returns Unary:
        // NegativeExpression | NotExpression | atom;

        public ParserRule getRule() {
            return rule;
        }

        // NegativeExpression | NotExpression | atom
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // NegativeExpression
        public RuleCall getNegativeExpressionParserRuleCall_0() {
            return cNegativeExpressionParserRuleCall_0;
        }

        // NotExpression
        public RuleCall getNotExpressionParserRuleCall_1() {
            return cNotExpressionParserRuleCall_1;
        }

        // atom
        public RuleCall getAtomParserRuleCall_2() {
            return cAtomParserRuleCall_2;
        }
    }

    public class NotExpressionElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NotExpression");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cNOTTerminalRuleCall_0 = (RuleCall) cGroup.eContents().get(0);
        private final Assignment cInnerAssignment_1 = (Assignment) cGroup.eContents().get(1);
        private final RuleCall cInnerUnaryExprParserRuleCall_1_0 = (RuleCall) cInnerAssignment_1.eContents().get(0);

        // // NotExpression -> NOT unaryExpr
        // NotExpression:
        // NOT inner=unaryExpr;

        public ParserRule getRule() {
            return rule;
        }

        // NOT inner=unaryExpr
        public Group getGroup() {
            return cGroup;
        }

        // NOT
        public RuleCall getNOTTerminalRuleCall_0() {
            return cNOTTerminalRuleCall_0;
        }

        // inner=unaryExpr
        public Assignment getInnerAssignment_1() {
            return cInnerAssignment_1;
        }

        // unaryExpr
        public RuleCall getInnerUnaryExprParserRuleCall_1_0() {
            return cInnerUnaryExprParserRuleCall_1_0;
        }
    }

    public class NegativeExpressionElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NegativeExpression");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Keyword cHyphenMinusKeyword_0 = (Keyword) cGroup.eContents().get(0);
        private final Assignment cInnerAssignment_1 = (Assignment) cGroup.eContents().get(1);
        private final RuleCall cInnerUnaryExprParserRuleCall_1_0 = (RuleCall) cInnerAssignment_1.eContents().get(0);

        // // NegativeExpression -> '-' unaryExpr
        // NegativeExpression:
        // "-" inner=unaryExpr;

        public ParserRule getRule() {
            return rule;
        }

        // "-" inner=unaryExpr
        public Group getGroup() {
            return cGroup;
        }

        // "-"
        public Keyword getHyphenMinusKeyword_0() {
            return cHyphenMinusKeyword_0;
        }

        // inner=unaryExpr
        public Assignment getInnerAssignment_1() {
            return cInnerAssignment_1;
        }

        // unaryExpr
        public RuleCall getInnerUnaryExprParserRuleCall_1_0() {
            return cInnerUnaryExprParserRuleCall_1_0;
        }
    }

    public class AtomElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "atom");
        private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
        private final RuleCall cIntLiteralParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
        private final RuleCall cDoubleLiteralParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);
        private final RuleCall cStringLiteralParserRuleCall_2 = (RuleCall) cAlternatives.eContents().get(2);
        private final RuleCall cBoolLiteralParserRuleCall_3 = (RuleCall) cAlternatives.eContents().get(3);
        private final RuleCall cFunctionLiteralParserRuleCall_4 = (RuleCall) cAlternatives.eContents().get(4);
        private final RuleCall cVariableParserRuleCall_5 = (RuleCall) cAlternatives.eContents().get(5);
        private final RuleCall cParenthesisParserRuleCall_6 = (RuleCall) cAlternatives.eContents().get(6);
        private final RuleCall cProbabilityFunctionLiteralParserRuleCall_7 = (RuleCall) cAlternatives.eContents()
                .get(7);

        // // atom -> IntLiteral | DoubleLiteral |StringLiteral | BoolLiteral | FunctionLiteral |
        // Variable | Parenthesis | ProbabilityFunctionLiteral
        // atom returns Atom:
        // IntLiteral | DoubleLiteral | StringLiteral | BoolLiteral | FunctionLiteral | Variable |
        // Parenthesis |
        // ProbabilityFunctionLiteral;

        public ParserRule getRule() {
            return rule;
        }

        // IntLiteral | DoubleLiteral | StringLiteral | BoolLiteral | FunctionLiteral | Variable |
        // Parenthesis |
        // ProbabilityFunctionLiteral
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // IntLiteral
        public RuleCall getIntLiteralParserRuleCall_0() {
            return cIntLiteralParserRuleCall_0;
        }

        // DoubleLiteral
        public RuleCall getDoubleLiteralParserRuleCall_1() {
            return cDoubleLiteralParserRuleCall_1;
        }

        // StringLiteral
        public RuleCall getStringLiteralParserRuleCall_2() {
            return cStringLiteralParserRuleCall_2;
        }

        // BoolLiteral
        public RuleCall getBoolLiteralParserRuleCall_3() {
            return cBoolLiteralParserRuleCall_3;
        }

        // FunctionLiteral
        public RuleCall getFunctionLiteralParserRuleCall_4() {
            return cFunctionLiteralParserRuleCall_4;
        }

        // Variable
        public RuleCall getVariableParserRuleCall_5() {
            return cVariableParserRuleCall_5;
        }

        // Parenthesis
        public RuleCall getParenthesisParserRuleCall_6() {
            return cParenthesisParserRuleCall_6;
        }

        // ProbabilityFunctionLiteral
        public RuleCall getProbabilityFunctionLiteralParserRuleCall_7() {
            return cProbabilityFunctionLiteralParserRuleCall_7;
        }
    }

    public class DoubleLiteralElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleLiteral");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cValueAssignment_0 = (Assignment) cGroup.eContents().get(0);
        private final RuleCall cValueDOUBLETerminalRuleCall_0_0 = (RuleCall) cValueAssignment_0.eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final RuleCall cSQUARE_PAREN_LTerminalRuleCall_1_0 = (RuleCall) cGroup_1.eContents().get(0);
        private final Assignment cUnitAssignment_1_1 = (Assignment) cGroup_1.eContents().get(1);
        private final RuleCall cUnitUnitParserRuleCall_1_1_0 = (RuleCall) cUnitAssignment_1_1.eContents().get(0);
        private final RuleCall cSQUARE_PAREN_RTerminalRuleCall_1_2 = (RuleCall) cGroup_1.eContents().get(2);

        // // DoubleLiteral -> DOUBLE (SQUARE_PAREN_L Unit SQUARE_PAREN_R)?
        // DoubleLiteral:
        // value=DOUBLE (SQUARE_PAREN_L unit=Unit SQUARE_PAREN_R)?;

        public ParserRule getRule() {
            return rule;
        }

        // value=DOUBLE (SQUARE_PAREN_L unit=Unit SQUARE_PAREN_R)?
        public Group getGroup() {
            return cGroup;
        }

        // value=DOUBLE
        public Assignment getValueAssignment_0() {
            return cValueAssignment_0;
        }

        // DOUBLE
        public RuleCall getValueDOUBLETerminalRuleCall_0_0() {
            return cValueDOUBLETerminalRuleCall_0_0;
        }

        // (SQUARE_PAREN_L unit=Unit SQUARE_PAREN_R)?
        public Group getGroup_1() {
            return cGroup_1;
        }

        // SQUARE_PAREN_L
        public RuleCall getSQUARE_PAREN_LTerminalRuleCall_1_0() {
            return cSQUARE_PAREN_LTerminalRuleCall_1_0;
        }

        // unit=Unit
        public Assignment getUnitAssignment_1_1() {
            return cUnitAssignment_1_1;
        }

        // Unit
        public RuleCall getUnitUnitParserRuleCall_1_1_0() {
            return cUnitUnitParserRuleCall_1_1_0;
        }

        // SQUARE_PAREN_R
        public RuleCall getSQUARE_PAREN_RTerminalRuleCall_1_2() {
            return cSQUARE_PAREN_RTerminalRuleCall_1_2;
        }
    }

    public class ProbabilityFunctionLiteralElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
                "ProbabilityFunctionLiteral");
        private final Assignment cFunction_ProbabilityFunctionLiteralAssignment = (Assignment) rule.eContents().get(1);
        private final RuleCall cFunction_ProbabilityFunctionLiteralDefinitionParserRuleCall_0 = (RuleCall) cFunction_ProbabilityFunctionLiteralAssignment
                .eContents().get(0);

        // // ProbabilityFunctionLiteral -> definition
        // ProbabilityFunctionLiteral:
        // function_ProbabilityFunctionLiteral=definition;

        public ParserRule getRule() {
            return rule;
        }

        // function_ProbabilityFunctionLiteral=definition
        public Assignment getFunction_ProbabilityFunctionLiteralAssignment() {
            return cFunction_ProbabilityFunctionLiteralAssignment;
        }

        // definition
        public RuleCall getFunction_ProbabilityFunctionLiteralDefinitionParserRuleCall_0() {
            return cFunction_ProbabilityFunctionLiteralDefinitionParserRuleCall_0;
        }
    }

    public class ParenthesisElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parenthesis");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cLPARENTerminalRuleCall_0 = (RuleCall) cGroup.eContents().get(0);
        private final Assignment cInnerExpressionAssignment_1 = (Assignment) cGroup.eContents().get(1);
        private final RuleCall cInnerExpressionIfelseExprParserRuleCall_1_0 = (RuleCall) cInnerExpressionAssignment_1
                .eContents().get(0);
        private final RuleCall cRPARENTerminalRuleCall_2 = (RuleCall) cGroup.eContents().get(2);

        // // Parenthesis -> LPAREN ifelseExpr RPAREN
        // Parenthesis:
        // LPAREN innerExpression=ifelseExpr RPAREN;

        public ParserRule getRule() {
            return rule;
        }

        // LPAREN innerExpression=ifelseExpr RPAREN
        public Group getGroup() {
            return cGroup;
        }

        // LPAREN
        public RuleCall getLPARENTerminalRuleCall_0() {
            return cLPARENTerminalRuleCall_0;
        }

        // innerExpression=ifelseExpr
        public Assignment getInnerExpressionAssignment_1() {
            return cInnerExpressionAssignment_1;
        }

        // ifelseExpr
        public RuleCall getInnerExpressionIfelseExprParserRuleCall_1_0() {
            return cInnerExpressionIfelseExprParserRuleCall_1_0;
        }

        // RPAREN
        public RuleCall getRPARENTerminalRuleCall_2() {
            return cRPARENTerminalRuleCall_2;
        }
    }

    public class FunctionLiteralElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionLiteral");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cIdAssignment_0 = (Assignment) cGroup.eContents().get(0);
        private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall) cIdAssignment_0.eContents().get(0);
        private final RuleCall cLPARENTerminalRuleCall_1 = (RuleCall) cGroup.eContents().get(1);
        private final Group cGroup_2 = (Group) cGroup.eContents().get(2);
        private final Assignment cParameters_FunctionLiteralAssignment_2_0 = (Assignment) cGroup_2.eContents().get(0);
        private final RuleCall cParameters_FunctionLiteralBoolAndExprParserRuleCall_2_0_0 = (RuleCall) cParameters_FunctionLiteralAssignment_2_0
                .eContents().get(0);
        private final Group cGroup_2_1 = (Group) cGroup_2.eContents().get(1);
        private final RuleCall cCOLONTerminalRuleCall_2_1_0 = (RuleCall) cGroup_2_1.eContents().get(0);
        private final Assignment cParameters_FunctionLiteralAssignment_2_1_1 = (Assignment) cGroup_2_1.eContents().get(
                1);
        private final RuleCall cParameters_FunctionLiteralBoolAndExprParserRuleCall_2_1_1_0 = (RuleCall) cParameters_FunctionLiteralAssignment_2_1_1
                .eContents().get(0);
        private final RuleCall cRPARENTerminalRuleCall_3 = (RuleCall) cGroup.eContents().get(3);

        // // FunctionLiteral -> ID LPAREN (boolAndExpr (COLON boolAndExpr)* )? RPAREN
        // FunctionLiteral:
        // id=ID LPAREN (parameters_FunctionLiteral+=boolAndExpr (COLON
        // parameters_FunctionLiteral+=boolAndExpr)*)? RPAREN;

        public ParserRule getRule() {
            return rule;
        }

        // id=ID LPAREN (parameters_FunctionLiteral+=boolAndExpr (COLON
        // parameters_FunctionLiteral+=boolAndExpr)*)? RPAREN
        public Group getGroup() {
            return cGroup;
        }

        // id=ID
        public Assignment getIdAssignment_0() {
            return cIdAssignment_0;
        }

        // ID
        public RuleCall getIdIDTerminalRuleCall_0_0() {
            return cIdIDTerminalRuleCall_0_0;
        }

        // LPAREN
        public RuleCall getLPARENTerminalRuleCall_1() {
            return cLPARENTerminalRuleCall_1;
        }

        // (parameters_FunctionLiteral+=boolAndExpr (COLON
        // parameters_FunctionLiteral+=boolAndExpr)*)?
        public Group getGroup_2() {
            return cGroup_2;
        }

        // parameters_FunctionLiteral+=boolAndExpr
        public Assignment getParameters_FunctionLiteralAssignment_2_0() {
            return cParameters_FunctionLiteralAssignment_2_0;
        }

        // boolAndExpr
        public RuleCall getParameters_FunctionLiteralBoolAndExprParserRuleCall_2_0_0() {
            return cParameters_FunctionLiteralBoolAndExprParserRuleCall_2_0_0;
        }

        // (COLON parameters_FunctionLiteral+=boolAndExpr)*
        public Group getGroup_2_1() {
            return cGroup_2_1;
        }

        // COLON
        public RuleCall getCOLONTerminalRuleCall_2_1_0() {
            return cCOLONTerminalRuleCall_2_1_0;
        }

        // parameters_FunctionLiteral+=boolAndExpr
        public Assignment getParameters_FunctionLiteralAssignment_2_1_1() {
            return cParameters_FunctionLiteralAssignment_2_1_1;
        }

        // boolAndExpr
        public RuleCall getParameters_FunctionLiteralBoolAndExprParserRuleCall_2_1_1_0() {
            return cParameters_FunctionLiteralBoolAndExprParserRuleCall_2_1_1_0;
        }

        // RPAREN
        public RuleCall getRPARENTerminalRuleCall_3() {
            return cRPARENTerminalRuleCall_3;
        }
    }

    public class VariableElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
        private final Assignment cId_VariableAssignment = (Assignment) rule.eContents().get(1);
        private final RuleCall cId_VariableAbstractNamedReferenceParserRuleCall_0 = (RuleCall) cId_VariableAssignment
                .eContents().get(0);

        // // Variable -> AbstractNamedReference
        // Variable:
        // id_Variable=AbstractNamedReference;

        public ParserRule getRule() {
            return rule;
        }

        // id_Variable=AbstractNamedReference
        public Assignment getId_VariableAssignment() {
            return cId_VariableAssignment;
        }

        // AbstractNamedReference
        public RuleCall getId_VariableAbstractNamedReferenceParserRuleCall_0() {
            return cId_VariableAbstractNamedReferenceParserRuleCall_0;
        }
    }

    public class AbstractNamedReferenceElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "AbstractNamedReference");
        private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
        private final RuleCall cVariableReferenceParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
        private final RuleCall cNamespaceReferenceParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);

        // // AbstractNamedReference -> VariableReference|NamespaceReference
        // AbstractNamedReference:
        // VariableReference | NamespaceReference;

        public ParserRule getRule() {
            return rule;
        }

        // VariableReference | NamespaceReference
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // VariableReference
        public RuleCall getVariableReferenceParserRuleCall_0() {
            return cVariableReferenceParserRuleCall_0;
        }

        // NamespaceReference
        public RuleCall getNamespaceReferenceParserRuleCall_1() {
            return cNamespaceReferenceParserRuleCall_1;
        }
    }

    public class VariableReferenceElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableReference");
        private final Assignment cReferenceNameAssignment = (Assignment) rule.eContents().get(1);
        private final RuleCall cReferenceNameIDTerminalRuleCall_0 = (RuleCall) cReferenceNameAssignment.eContents()
                .get(0);

        // // VariableReference -> ID
        // VariableReference:
        // referenceName=ID;

        public ParserRule getRule() {
            return rule;
        }

        // referenceName=ID
        public Assignment getReferenceNameAssignment() {
            return cReferenceNameAssignment;
        }

        // ID
        public RuleCall getReferenceNameIDTerminalRuleCall_0() {
            return cReferenceNameIDTerminalRuleCall_0;
        }
    }

    public class NamespaceReferenceElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamespaceReference");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cReferenceNameAssignment_0 = (Assignment) cGroup.eContents().get(0);
        private final RuleCall cReferenceNameIDTerminalRuleCall_0_0 = (RuleCall) cReferenceNameAssignment_0.eContents()
                .get(0);
        private final RuleCall cDOTTerminalRuleCall_1 = (RuleCall) cGroup.eContents().get(1);
        private final Assignment cInnerReference_NamespaceReferenceAssignment_2 = (Assignment) cGroup.eContents()
                .get(2);
        private final RuleCall cInnerReference_NamespaceReferenceAbstractNamedReferenceParserRuleCall_2_0 = (RuleCall) cInnerReference_NamespaceReferenceAssignment_2
                .eContents().get(0);

        // // NamespaceReference -> ID DOT AbstractNamedReference
        // NamespaceReference:
        // referenceName=ID DOT innerReference_NamespaceReference=AbstractNamedReference;

        public ParserRule getRule() {
            return rule;
        }

        // referenceName=ID DOT innerReference_NamespaceReference=AbstractNamedReference
        public Group getGroup() {
            return cGroup;
        }

        // referenceName=ID
        public Assignment getReferenceNameAssignment_0() {
            return cReferenceNameAssignment_0;
        }

        // ID
        public RuleCall getReferenceNameIDTerminalRuleCall_0_0() {
            return cReferenceNameIDTerminalRuleCall_0_0;
        }

        // DOT
        public RuleCall getDOTTerminalRuleCall_1() {
            return cDOTTerminalRuleCall_1;
        }

        // innerReference_NamespaceReference=AbstractNamedReference
        public Assignment getInnerReference_NamespaceReferenceAssignment_2() {
            return cInnerReference_NamespaceReferenceAssignment_2;
        }

        // AbstractNamedReference
        public RuleCall getInnerReference_NamespaceReferenceAbstractNamedReferenceParserRuleCall_2_0() {
            return cInnerReference_NamespaceReferenceAbstractNamedReferenceParserRuleCall_2_0;
        }
    }

    public class BoolLiteralElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolLiteral");
        private final Assignment cValueAssignment = (Assignment) rule.eContents().get(1);
        private final RuleCall cValueBOOLEAN_KEYWORDSTerminalRuleCall_0 = (RuleCall) cValueAssignment.eContents()
                .get(0);

        // // BoolLiteral -> BOOLEAN_KEYWORDS
        // BoolLiteral:
        // value=BOOLEAN_KEYWORDS;

        public ParserRule getRule() {
            return rule;
        }

        // value=BOOLEAN_KEYWORDS
        public Assignment getValueAssignment() {
            return cValueAssignment;
        }

        // BOOLEAN_KEYWORDS
        public RuleCall getValueBOOLEAN_KEYWORDSTerminalRuleCall_0() {
            return cValueBOOLEAN_KEYWORDSTerminalRuleCall_0;
        }
    }

    public class StringLiteralElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
        private final Assignment cValueAssignment = (Assignment) rule.eContents().get(1);
        private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall) cValueAssignment.eContents().get(0);

        // // StringLiteral -> STRING
        // StringLiteral:
        // value=STRING;

        public ParserRule getRule() {
            return rule;
        }

        // value=STRING
        public Assignment getValueAssignment() {
            return cValueAssignment;
        }

        // STRING
        public RuleCall getValueSTRINGTerminalRuleCall_0() {
            return cValueSTRINGTerminalRuleCall_0;
        }
    }

    public class IntLiteralElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntLiteral");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cValueAssignment_0 = (Assignment) cGroup.eContents().get(0);
        private final RuleCall cValueDECINTTerminalRuleCall_0_0 = (RuleCall) cValueAssignment_0.eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final RuleCall cSQUARE_PAREN_LTerminalRuleCall_1_0 = (RuleCall) cGroup_1.eContents().get(0);
        private final Assignment cUnitAssignment_1_1 = (Assignment) cGroup_1.eContents().get(1);
        private final RuleCall cUnitUnitParserRuleCall_1_1_0 = (RuleCall) cUnitAssignment_1_1.eContents().get(0);
        private final RuleCall cSQUARE_PAREN_RTerminalRuleCall_1_2 = (RuleCall) cGroup_1.eContents().get(2);

        // // IntLiteral -> DECINT (SQUARE_PAREN_L Unit SQUARE_PAREN_R)?
        // IntLiteral:
        // value=DECINT (SQUARE_PAREN_L unit=Unit SQUARE_PAREN_R)?;

        public ParserRule getRule() {
            return rule;
        }

        // value=DECINT (SQUARE_PAREN_L unit=Unit SQUARE_PAREN_R)?
        public Group getGroup() {
            return cGroup;
        }

        // value=DECINT
        public Assignment getValueAssignment_0() {
            return cValueAssignment_0;
        }

        // DECINT
        public RuleCall getValueDECINTTerminalRuleCall_0_0() {
            return cValueDECINTTerminalRuleCall_0_0;
        }

        // (SQUARE_PAREN_L unit=Unit SQUARE_PAREN_R)?
        public Group getGroup_1() {
            return cGroup_1;
        }

        // SQUARE_PAREN_L
        public RuleCall getSQUARE_PAREN_LTerminalRuleCall_1_0() {
            return cSQUARE_PAREN_LTerminalRuleCall_1_0;
        }

        // unit=Unit
        public Assignment getUnitAssignment_1_1() {
            return cUnitAssignment_1_1;
        }

        // Unit
        public RuleCall getUnitUnitParserRuleCall_1_1_0() {
            return cUnitUnitParserRuleCall_1_1_0;
        }

        // SQUARE_PAREN_R
        public RuleCall getSQUARE_PAREN_RTerminalRuleCall_1_2() {
            return cSQUARE_PAREN_RTerminalRuleCall_1_2;
        }
    }

    public class UnitElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Unit");
        private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
        private final RuleCall cUnitMultiParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
        private final RuleCall cUnitDivParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);
        private final RuleCall cBaseUnitParserRuleCall_2 = (RuleCall) cAlternatives.eContents().get(2);

        // //#############################
        // // Units:
        // // Unit -> unitMulti | unitDiv | BaseUnit
        // Unit:
        // unitMulti | unitDiv | BaseUnit;

        public ParserRule getRule() {
            return rule;
        }

        // unitMulti | unitDiv | BaseUnit
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // unitMulti
        public RuleCall getUnitMultiParserRuleCall_0() {
            return cUnitMultiParserRuleCall_0;
        }

        // unitDiv
        public RuleCall getUnitDivParserRuleCall_1() {
            return cUnitDivParserRuleCall_1;
        }

        // BaseUnit
        public RuleCall getBaseUnitParserRuleCall_2() {
            return cBaseUnitParserRuleCall_2;
        }
    }

    public class UnitDivElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unitDiv");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cUnitPowParserRuleCall_0 = (RuleCall) cGroup.eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Action cUnitDivisionDividendAction_1_0 = (Action) cGroup_1.eContents().get(0);
        private final Keyword cSolidusKeyword_1_1 = (Keyword) cGroup_1.eContents().get(1);
        private final Assignment cDivisorAssignment_1_2 = (Assignment) cGroup_1.eContents().get(2);
        private final RuleCall cDivisorUnitParserRuleCall_1_2_0 = (RuleCall) cDivisorAssignment_1_2.eContents().get(0);

        // // unitDiv -> unitPow ('/' Unit)?
        // unitDiv returns Unit:
        // unitPow ({UnitDivision.dividend=current} "/" divisor=Unit)?;

        public ParserRule getRule() {
            return rule;
        }

        // unitPow ({UnitDivision.dividend=current} "/" divisor=Unit)?
        public Group getGroup() {
            return cGroup;
        }

        // unitPow
        public RuleCall getUnitPowParserRuleCall_0() {
            return cUnitPowParserRuleCall_0;
        }

        // ({UnitDivision.dividend=current} "/" divisor=Unit)?
        public Group getGroup_1() {
            return cGroup_1;
        }

        // {UnitDivision.dividend=current}
        public Action getUnitDivisionDividendAction_1_0() {
            return cUnitDivisionDividendAction_1_0;
        }

        // "/"
        public Keyword getSolidusKeyword_1_1() {
            return cSolidusKeyword_1_1;
        }

        // divisor=Unit
        public Assignment getDivisorAssignment_1_2() {
            return cDivisorAssignment_1_2;
        }

        // Unit
        public RuleCall getDivisorUnitParserRuleCall_1_2_0() {
            return cDivisorUnitParserRuleCall_1_2_0;
        }
    }

    public class UnitMultiElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unitMulti");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cUnitPowParserRuleCall_0 = (RuleCall) cGroup.eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Action cUnitMultiplicationUnitsAction_1_0 = (Action) cGroup_1.eContents().get(0);
        private final Keyword cAsteriskKeyword_1_1 = (Keyword) cGroup_1.eContents().get(1);
        private final Assignment cUnitsAssignment_1_2 = (Assignment) cGroup_1.eContents().get(2);
        private final RuleCall cUnitsUnitParserRuleCall_1_2_0 = (RuleCall) cUnitsAssignment_1_2.eContents().get(0);

        // // unitMulti -> unitPow ('*' Unit)*
        // unitMulti returns Unit:
        // unitPow ({UnitMultiplication.units+=current} "*" units+=Unit)*;

        public ParserRule getRule() {
            return rule;
        }

        // unitPow ({UnitMultiplication.units+=current} "*" units+=Unit)*
        public Group getGroup() {
            return cGroup;
        }

        // unitPow
        public RuleCall getUnitPowParserRuleCall_0() {
            return cUnitPowParserRuleCall_0;
        }

        // ({UnitMultiplication.units+=current} "*" units+=Unit)*
        public Group getGroup_1() {
            return cGroup_1;
        }

        // {UnitMultiplication.units+=current}
        public Action getUnitMultiplicationUnitsAction_1_0() {
            return cUnitMultiplicationUnitsAction_1_0;
        }

        // "*"
        public Keyword getAsteriskKeyword_1_1() {
            return cAsteriskKeyword_1_1;
        }

        // units+=Unit
        public Assignment getUnitsAssignment_1_2() {
            return cUnitsAssignment_1_2;
        }

        // Unit
        public RuleCall getUnitsUnitParserRuleCall_1_2_0() {
            return cUnitsUnitParserRuleCall_1_2_0;
        }
    }

    public class UnitPowElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unitPow");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Alternatives cAlternatives_0 = (Alternatives) cGroup.eContents().get(0);
        private final RuleCall cBaseUnitParserRuleCall_0_0 = (RuleCall) cAlternatives_0.eContents().get(0);
        private final Group cGroup_0_1 = (Group) cAlternatives_0.eContents().get(1);
        private final RuleCall cLPARENTerminalRuleCall_0_1_0 = (RuleCall) cGroup_0_1.eContents().get(0);
        private final Alternatives cAlternatives_0_1_1 = (Alternatives) cGroup_0_1.eContents().get(1);
        private final RuleCall cUnitMultiParserRuleCall_0_1_1_0 = (RuleCall) cAlternatives_0_1_1.eContents().get(0);
        private final RuleCall cUnitDivParserRuleCall_0_1_1_1 = (RuleCall) cAlternatives_0_1_1.eContents().get(1);
        private final RuleCall cRPARENTerminalRuleCall_0_1_2 = (RuleCall) cGroup_0_1.eContents().get(2);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Action cUnitPowerUnitAction_1_0 = (Action) cGroup_1.eContents().get(0);
        private final RuleCall cPOWTerminalRuleCall_1_1 = (RuleCall) cGroup_1.eContents().get(1);
        private final Assignment cExponentAssignment_1_2 = (Assignment) cGroup_1.eContents().get(2);
        private final RuleCall cExponentSIGNED_INTParserRuleCall_1_2_0 = (RuleCall) cExponentAssignment_1_2.eContents()
                .get(0);

        // // unitPow -> (BaseUnit | LPAREN (unitMulti | unitDiv) RPAREN) (POW SIGNED_INT)*
        // unitPow returns Unit:
        // (BaseUnit | LPAREN (unitMulti | unitDiv) RPAREN) ({UnitPower.unit=current} POW
        // exponent=SIGNED_INT)*;

        public ParserRule getRule() {
            return rule;
        }

        // (BaseUnit | LPAREN (unitMulti | unitDiv) RPAREN) ({UnitPower.unit=current} POW
        // exponent=SIGNED_INT)*
        public Group getGroup() {
            return cGroup;
        }

        // BaseUnit | LPAREN (unitMulti | unitDiv) RPAREN
        public Alternatives getAlternatives_0() {
            return cAlternatives_0;
        }

        // BaseUnit
        public RuleCall getBaseUnitParserRuleCall_0_0() {
            return cBaseUnitParserRuleCall_0_0;
        }

        // LPAREN (unitMulti | unitDiv) RPAREN
        public Group getGroup_0_1() {
            return cGroup_0_1;
        }

        // LPAREN
        public RuleCall getLPARENTerminalRuleCall_0_1_0() {
            return cLPARENTerminalRuleCall_0_1_0;
        }

        // unitMulti | unitDiv
        public Alternatives getAlternatives_0_1_1() {
            return cAlternatives_0_1_1;
        }

        // unitMulti
        public RuleCall getUnitMultiParserRuleCall_0_1_1_0() {
            return cUnitMultiParserRuleCall_0_1_1_0;
        }

        // unitDiv
        public RuleCall getUnitDivParserRuleCall_0_1_1_1() {
            return cUnitDivParserRuleCall_0_1_1_1;
        }

        // RPAREN
        public RuleCall getRPARENTerminalRuleCall_0_1_2() {
            return cRPARENTerminalRuleCall_0_1_2;
        }

        // ({UnitPower.unit=current} POW exponent=SIGNED_INT)*
        public Group getGroup_1() {
            return cGroup_1;
        }

        // {UnitPower.unit=current}
        public Action getUnitPowerUnitAction_1_0() {
            return cUnitPowerUnitAction_1_0;
        }

        // POW
        public RuleCall getPOWTerminalRuleCall_1_1() {
            return cPOWTerminalRuleCall_1_1;
        }

        // exponent=SIGNED_INT
        public Assignment getExponentAssignment_1_2() {
            return cExponentAssignment_1_2;
        }

        // SIGNED_INT
        public RuleCall getExponentSIGNED_INTParserRuleCall_1_2_0() {
            return cExponentSIGNED_INTParserRuleCall_1_2_0;
        }
    }

    public class BaseUnitElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BaseUnit");
        private final Assignment cNameAssignment = (Assignment) rule.eContents().get(1);
        private final RuleCall cNameUnitNamesEnumRuleCall_0 = (RuleCall) cNameAssignment.eContents().get(0);

        // // BaseUnit -> UnitNames
        // BaseUnit:
        // name=UnitNames;

        public ParserRule getRule() {
            return rule;
        }

        // name=UnitNames
        public Assignment getNameAssignment() {
            return cNameAssignment;
        }

        // UnitNames
        public RuleCall getNameUnitNamesEnumRuleCall_0() {
            return cNameUnitNamesEnumRuleCall_0;
        }
    }

    public class DefinitionElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "definition");
        private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
        private final RuleCall cProbabilityMassFunctionParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
        private final RuleCall cProbabilityDensityFunctionParserRuleCall_1 = (RuleCall) cAlternatives.eContents()
                .get(1);

        // //#############################
        // //Probability Functions:
        // // definition -> ProbabilityMassFunction | ProbabilityDensityFunction
        // definition returns ProbabilityFunction:
        // ProbabilityMassFunction | ProbabilityDensityFunction;

        public ParserRule getRule() {
            return rule;
        }

        // ProbabilityMassFunction | ProbabilityDensityFunction
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // ProbabilityMassFunction
        public RuleCall getProbabilityMassFunctionParserRuleCall_0() {
            return cProbabilityMassFunctionParserRuleCall_0;
        }

        // ProbabilityDensityFunction
        public RuleCall getProbabilityDensityFunctionParserRuleCall_1() {
            return cProbabilityDensityFunctionParserRuleCall_1;
        }
    }

    public class ProbabilityDensityFunctionElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
                "ProbabilityDensityFunction");
        private final RuleCall cBoxedPDFParserRuleCall = (RuleCall) rule.eContents().get(1);

        // // ProbabilityDensityFunction -> BoxedPDF
        // ProbabilityDensityFunction:
        // BoxedPDF;

        public ParserRule getRule() {
            return rule;
        }

        // BoxedPDF
        public RuleCall getBoxedPDFParserRuleCall() {
            return cBoxedPDFParserRuleCall;
        }
    }

    public class BoxedPDFElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoxedPDF");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cDOUBLEPDFTerminalRuleCall_0 = (RuleCall) cGroup.eContents().get(0);
        private final RuleCall cSQUARE_PAREN_LTerminalRuleCall_1 = (RuleCall) cGroup.eContents().get(1);
        private final Assignment cSamplesAssignment_2 = (Assignment) cGroup.eContents().get(2);
        private final RuleCall cSamplesReal_pdf_sampleParserRuleCall_2_0 = (RuleCall) cSamplesAssignment_2.eContents()
                .get(0);
        private final RuleCall cSQUARE_PAREN_RTerminalRuleCall_3 = (RuleCall) cGroup.eContents().get(3);
        private final Group cGroup_4 = (Group) cGroup.eContents().get(4);
        private final RuleCall cSQUARE_PAREN_LTerminalRuleCall_4_0 = (RuleCall) cGroup_4.eContents().get(0);
        private final Assignment cUnitAssignment_4_1 = (Assignment) cGroup_4.eContents().get(1);
        private final RuleCall cUnitUnitParserRuleCall_4_1_0 = (RuleCall) cUnitAssignment_4_1.eContents().get(0);
        private final RuleCall cSQUARE_PAREN_RTerminalRuleCall_4_2 = (RuleCall) cGroup_4.eContents().get(2);

        // // BoxedPDF -> DOUBLEPDF SQUARE_PAREN_L (real_pdf_sample)+ SQUARE_PAREN_R (SQUARE_PAREN_L
        // Unit SQUARE_PAREN_R)?
        // BoxedPDF:
        // DOUBLEPDF SQUARE_PAREN_L samples+=real_pdf_sample+ SQUARE_PAREN_R (SQUARE_PAREN_L
        // unit=Unit SQUARE_PAREN_R)?;

        public ParserRule getRule() {
            return rule;
        }

        // DOUBLEPDF SQUARE_PAREN_L samples+=real_pdf_sample+ SQUARE_PAREN_R (SQUARE_PAREN_L
        // unit=Unit SQUARE_PAREN_R)?
        public Group getGroup() {
            return cGroup;
        }

        // DOUBLEPDF
        public RuleCall getDOUBLEPDFTerminalRuleCall_0() {
            return cDOUBLEPDFTerminalRuleCall_0;
        }

        // SQUARE_PAREN_L
        public RuleCall getSQUARE_PAREN_LTerminalRuleCall_1() {
            return cSQUARE_PAREN_LTerminalRuleCall_1;
        }

        // samples+=real_pdf_sample+
        public Assignment getSamplesAssignment_2() {
            return cSamplesAssignment_2;
        }

        // real_pdf_sample
        public RuleCall getSamplesReal_pdf_sampleParserRuleCall_2_0() {
            return cSamplesReal_pdf_sampleParserRuleCall_2_0;
        }

        // SQUARE_PAREN_R
        public RuleCall getSQUARE_PAREN_RTerminalRuleCall_3() {
            return cSQUARE_PAREN_RTerminalRuleCall_3;
        }

        // (SQUARE_PAREN_L unit=Unit SQUARE_PAREN_R)?
        public Group getGroup_4() {
            return cGroup_4;
        }

        // SQUARE_PAREN_L
        public RuleCall getSQUARE_PAREN_LTerminalRuleCall_4_0() {
            return cSQUARE_PAREN_LTerminalRuleCall_4_0;
        }

        // unit=Unit
        public Assignment getUnitAssignment_4_1() {
            return cUnitAssignment_4_1;
        }

        // Unit
        public RuleCall getUnitUnitParserRuleCall_4_1_0() {
            return cUnitUnitParserRuleCall_4_1_0;
        }

        // SQUARE_PAREN_R
        public RuleCall getSQUARE_PAREN_RTerminalRuleCall_4_2() {
            return cSQUARE_PAREN_RTerminalRuleCall_4_2;
        }
    }

    public class ProbabilityMassFunctionElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
                "ProbabilityMassFunction");
        private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
        private final Group cGroup_0 = (Group) cAlternatives.eContents().get(0);
        private final RuleCall cINTPMFTerminalRuleCall_0_0 = (RuleCall) cGroup_0.eContents().get(0);
        private final RuleCall cSQUARE_PAREN_LTerminalRuleCall_0_1 = (RuleCall) cGroup_0.eContents().get(1);
        private final Assignment cSamplesAssignment_0_2 = (Assignment) cGroup_0.eContents().get(2);
        private final RuleCall cSamplesNumeric_int_sampleParserRuleCall_0_2_0 = (RuleCall) cSamplesAssignment_0_2
                .eContents().get(0);
        private final RuleCall cSQUARE_PAREN_RTerminalRuleCall_0_3 = (RuleCall) cGroup_0.eContents().get(3);
        private final Group cGroup_0_4 = (Group) cGroup_0.eContents().get(4);
        private final RuleCall cSQUARE_PAREN_LTerminalRuleCall_0_4_0 = (RuleCall) cGroup_0_4.eContents().get(0);
        private final Assignment cUnitAssignment_0_4_1 = (Assignment) cGroup_0_4.eContents().get(1);
        private final RuleCall cUnitUnitParserRuleCall_0_4_1_0 = (RuleCall) cUnitAssignment_0_4_1.eContents().get(0);
        private final RuleCall cSQUARE_PAREN_RTerminalRuleCall_0_4_2 = (RuleCall) cGroup_0_4.eContents().get(2);
        private final Group cGroup_1 = (Group) cAlternatives.eContents().get(1);
        private final RuleCall cDOUBLEPMFTerminalRuleCall_1_0 = (RuleCall) cGroup_1.eContents().get(0);
        private final RuleCall cSQUARE_PAREN_LTerminalRuleCall_1_1 = (RuleCall) cGroup_1.eContents().get(1);
        private final Assignment cSamplesAssignment_1_2 = (Assignment) cGroup_1.eContents().get(2);
        private final RuleCall cSamplesNumeric_real_sampleParserRuleCall_1_2_0 = (RuleCall) cSamplesAssignment_1_2
                .eContents().get(0);
        private final RuleCall cSQUARE_PAREN_RTerminalRuleCall_1_3 = (RuleCall) cGroup_1.eContents().get(3);
        private final Group cGroup_1_4 = (Group) cGroup_1.eContents().get(4);
        private final RuleCall cSQUARE_PAREN_LTerminalRuleCall_1_4_0 = (RuleCall) cGroup_1_4.eContents().get(0);
        private final Assignment cUnitAssignment_1_4_1 = (Assignment) cGroup_1_4.eContents().get(1);
        private final RuleCall cUnitUnitParserRuleCall_1_4_1_0 = (RuleCall) cUnitAssignment_1_4_1.eContents().get(0);
        private final RuleCall cSQUARE_PAREN_RTerminalRuleCall_1_4_2 = (RuleCall) cGroup_1_4.eContents().get(2);
        private final Group cGroup_2 = (Group) cAlternatives.eContents().get(2);
        private final RuleCall cENUMPMFTerminalRuleCall_2_0 = (RuleCall) cGroup_2.eContents().get(0);
        private final Group cGroup_2_1 = (Group) cGroup_2.eContents().get(1);
        private final RuleCall cLPARENTerminalRuleCall_2_1_0 = (RuleCall) cGroup_2_1.eContents().get(0);
        private final Assignment cOrderedDomainAssignment_2_1_1 = (Assignment) cGroup_2_1.eContents().get(1);
        private final RuleCall cOrderedDomainORDERED_DEFTerminalRuleCall_2_1_1_0 = (RuleCall) cOrderedDomainAssignment_2_1_1
                .eContents().get(0);
        private final RuleCall cRPARENTerminalRuleCall_2_1_2 = (RuleCall) cGroup_2_1.eContents().get(2);
        private final RuleCall cSQUARE_PAREN_LTerminalRuleCall_2_2 = (RuleCall) cGroup_2.eContents().get(2);
        private final Assignment cSamplesAssignment_2_3 = (Assignment) cGroup_2.eContents().get(3);
        private final RuleCall cSamplesStringsampleParserRuleCall_2_3_0 = (RuleCall) cSamplesAssignment_2_3.eContents()
                .get(0);
        private final RuleCall cSQUARE_PAREN_RTerminalRuleCall_2_4 = (RuleCall) cGroup_2.eContents().get(4);
        private final Group cGroup_3 = (Group) cAlternatives.eContents().get(3);
        private final RuleCall cBOOLPMFTerminalRuleCall_3_0 = (RuleCall) cGroup_3.eContents().get(0);
        private final Group cGroup_3_1 = (Group) cGroup_3.eContents().get(1);
        private final RuleCall cLPARENTerminalRuleCall_3_1_0 = (RuleCall) cGroup_3_1.eContents().get(0);
        private final Assignment cOrderedDomainAssignment_3_1_1 = (Assignment) cGroup_3_1.eContents().get(1);
        private final RuleCall cOrderedDomainORDERED_DEFTerminalRuleCall_3_1_1_0 = (RuleCall) cOrderedDomainAssignment_3_1_1
                .eContents().get(0);
        private final RuleCall cRPARENTerminalRuleCall_3_1_2 = (RuleCall) cGroup_3_1.eContents().get(2);
        private final RuleCall cSQUARE_PAREN_LTerminalRuleCall_3_2 = (RuleCall) cGroup_3.eContents().get(2);
        private final Assignment cSamplesAssignment_3_3 = (Assignment) cGroup_3.eContents().get(3);
        private final RuleCall cSamplesBoolsampleParserRuleCall_3_3_0 = (RuleCall) cSamplesAssignment_3_3.eContents()
                .get(0);
        private final RuleCall cSQUARE_PAREN_RTerminalRuleCall_3_4 = (RuleCall) cGroup_3.eContents().get(4);

        // // ProbabilityMassFunction -> INTPMF SQUARE_PAREN_L (numeric_int_sample)+ SQUARE_PAREN_R
        // (SQUARE_PAREN_L Unit SQUARE_PAREN_R)?
        // // ProbabilityMassFunction -> DOUBLEPMF SQUARE_PAREN_L (numeric_real_sample)+
        // SQUARE_PAREN_R (SQUARE_PAREN_L Unit SQUARE_PAREN_R)?
        // // ProbabilityMassFunction -> ENUMPMF (LPAREN ORDERED_DEF RPAREN)? SQUARE_PAREN_L
        // (stringsample)+ SQUARE_PAREN_R (SQUARE_PAREN_L Unit SQUARE_PAREN_R)?
        // // ProbabilityMassFunction -> BOOLPMF (LPAREN ORDERED_DEF RPAREN)? SQUARE_PAREN_L
        // (boolsample)+ SQUARE_PAREN_R (SQUARE_PAREN_L Unit SQUARE_PAREN_R)?
        // ProbabilityMassFunction: // Numeric PMF
        // INTPMF SQUARE_PAREN_L samples+=numeric_int_sample+ SQUARE_PAREN_R (SQUARE_PAREN_L
        // unit=Unit SQUARE_PAREN_R)? // Enum PMF
        // // Bool PMF
        // | DOUBLEPMF SQUARE_PAREN_L samples+=numeric_real_sample+ SQUARE_PAREN_R (SQUARE_PAREN_L
        // unit=Unit SQUARE_PAREN_R)? |
        // ENUMPMF (LPAREN orderedDomain?=ORDERED_DEF RPAREN)? SQUARE_PAREN_L samples+=stringsample+
        // SQUARE_PAREN_R | BOOLPMF
        // (LPAREN orderedDomain?=ORDERED_DEF RPAREN)? SQUARE_PAREN_L samples+=boolsample+
        // SQUARE_PAREN_R;

        public ParserRule getRule() {
            return rule;
        }

        // // Numeric PMF
        // INTPMF SQUARE_PAREN_L samples+=numeric_int_sample+ SQUARE_PAREN_R (SQUARE_PAREN_L
        // unit=Unit SQUARE_PAREN_R)? // Enum PMF
        // // Bool PMF
        // | DOUBLEPMF SQUARE_PAREN_L samples+=numeric_real_sample+ SQUARE_PAREN_R (SQUARE_PAREN_L
        // unit=Unit SQUARE_PAREN_R)? |
        // ENUMPMF (LPAREN orderedDomain?=ORDERED_DEF RPAREN)? SQUARE_PAREN_L samples+=stringsample+
        // SQUARE_PAREN_R | BOOLPMF
        // (LPAREN orderedDomain?=ORDERED_DEF RPAREN)? SQUARE_PAREN_L samples+=boolsample+
        // SQUARE_PAREN_R
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // // Numeric PMF
        // INTPMF SQUARE_PAREN_L samples+=numeric_int_sample+ SQUARE_PAREN_R (SQUARE_PAREN_L
        // unit=Unit SQUARE_PAREN_R)?
        public Group getGroup_0() {
            return cGroup_0;
        }

        // // Numeric PMF
        // INTPMF
        public RuleCall getINTPMFTerminalRuleCall_0_0() {
            return cINTPMFTerminalRuleCall_0_0;
        }

        // SQUARE_PAREN_L
        public RuleCall getSQUARE_PAREN_LTerminalRuleCall_0_1() {
            return cSQUARE_PAREN_LTerminalRuleCall_0_1;
        }

        // samples+=numeric_int_sample+
        public Assignment getSamplesAssignment_0_2() {
            return cSamplesAssignment_0_2;
        }

        // numeric_int_sample
        public RuleCall getSamplesNumeric_int_sampleParserRuleCall_0_2_0() {
            return cSamplesNumeric_int_sampleParserRuleCall_0_2_0;
        }

        // SQUARE_PAREN_R
        public RuleCall getSQUARE_PAREN_RTerminalRuleCall_0_3() {
            return cSQUARE_PAREN_RTerminalRuleCall_0_3;
        }

        // (SQUARE_PAREN_L unit=Unit SQUARE_PAREN_R)?
        public Group getGroup_0_4() {
            return cGroup_0_4;
        }

        // SQUARE_PAREN_L
        public RuleCall getSQUARE_PAREN_LTerminalRuleCall_0_4_0() {
            return cSQUARE_PAREN_LTerminalRuleCall_0_4_0;
        }

        // unit=Unit
        public Assignment getUnitAssignment_0_4_1() {
            return cUnitAssignment_0_4_1;
        }

        // Unit
        public RuleCall getUnitUnitParserRuleCall_0_4_1_0() {
            return cUnitUnitParserRuleCall_0_4_1_0;
        }

        // SQUARE_PAREN_R
        public RuleCall getSQUARE_PAREN_RTerminalRuleCall_0_4_2() {
            return cSQUARE_PAREN_RTerminalRuleCall_0_4_2;
        }

        // DOUBLEPMF SQUARE_PAREN_L samples+=numeric_real_sample+ SQUARE_PAREN_R (SQUARE_PAREN_L
        // unit=Unit SQUARE_PAREN_R)?
        public Group getGroup_1() {
            return cGroup_1;
        }

        // DOUBLEPMF
        public RuleCall getDOUBLEPMFTerminalRuleCall_1_0() {
            return cDOUBLEPMFTerminalRuleCall_1_0;
        }

        // SQUARE_PAREN_L
        public RuleCall getSQUARE_PAREN_LTerminalRuleCall_1_1() {
            return cSQUARE_PAREN_LTerminalRuleCall_1_1;
        }

        // samples+=numeric_real_sample+
        public Assignment getSamplesAssignment_1_2() {
            return cSamplesAssignment_1_2;
        }

        // numeric_real_sample
        public RuleCall getSamplesNumeric_real_sampleParserRuleCall_1_2_0() {
            return cSamplesNumeric_real_sampleParserRuleCall_1_2_0;
        }

        // SQUARE_PAREN_R
        public RuleCall getSQUARE_PAREN_RTerminalRuleCall_1_3() {
            return cSQUARE_PAREN_RTerminalRuleCall_1_3;
        }

        // (SQUARE_PAREN_L unit=Unit SQUARE_PAREN_R)?
        public Group getGroup_1_4() {
            return cGroup_1_4;
        }

        // SQUARE_PAREN_L
        public RuleCall getSQUARE_PAREN_LTerminalRuleCall_1_4_0() {
            return cSQUARE_PAREN_LTerminalRuleCall_1_4_0;
        }

        // unit=Unit
        public Assignment getUnitAssignment_1_4_1() {
            return cUnitAssignment_1_4_1;
        }

        // Unit
        public RuleCall getUnitUnitParserRuleCall_1_4_1_0() {
            return cUnitUnitParserRuleCall_1_4_1_0;
        }

        // SQUARE_PAREN_R
        public RuleCall getSQUARE_PAREN_RTerminalRuleCall_1_4_2() {
            return cSQUARE_PAREN_RTerminalRuleCall_1_4_2;
        }

        // ENUMPMF (LPAREN orderedDomain?=ORDERED_DEF RPAREN)? SQUARE_PAREN_L samples+=stringsample+
        // SQUARE_PAREN_R
        public Group getGroup_2() {
            return cGroup_2;
        }

        // ENUMPMF
        public RuleCall getENUMPMFTerminalRuleCall_2_0() {
            return cENUMPMFTerminalRuleCall_2_0;
        }

        // (LPAREN orderedDomain?=ORDERED_DEF RPAREN)?
        public Group getGroup_2_1() {
            return cGroup_2_1;
        }

        // LPAREN
        public RuleCall getLPARENTerminalRuleCall_2_1_0() {
            return cLPARENTerminalRuleCall_2_1_0;
        }

        // orderedDomain?=ORDERED_DEF
        public Assignment getOrderedDomainAssignment_2_1_1() {
            return cOrderedDomainAssignment_2_1_1;
        }

        // ORDERED_DEF
        public RuleCall getOrderedDomainORDERED_DEFTerminalRuleCall_2_1_1_0() {
            return cOrderedDomainORDERED_DEFTerminalRuleCall_2_1_1_0;
        }

        // RPAREN
        public RuleCall getRPARENTerminalRuleCall_2_1_2() {
            return cRPARENTerminalRuleCall_2_1_2;
        }

        // SQUARE_PAREN_L
        public RuleCall getSQUARE_PAREN_LTerminalRuleCall_2_2() {
            return cSQUARE_PAREN_LTerminalRuleCall_2_2;
        }

        // samples+=stringsample+
        public Assignment getSamplesAssignment_2_3() {
            return cSamplesAssignment_2_3;
        }

        // stringsample
        public RuleCall getSamplesStringsampleParserRuleCall_2_3_0() {
            return cSamplesStringsampleParserRuleCall_2_3_0;
        }

        // SQUARE_PAREN_R
        public RuleCall getSQUARE_PAREN_RTerminalRuleCall_2_4() {
            return cSQUARE_PAREN_RTerminalRuleCall_2_4;
        }

        // BOOLPMF (LPAREN orderedDomain?=ORDERED_DEF RPAREN)? SQUARE_PAREN_L samples+=boolsample+
        // SQUARE_PAREN_R
        public Group getGroup_3() {
            return cGroup_3;
        }

        // BOOLPMF
        public RuleCall getBOOLPMFTerminalRuleCall_3_0() {
            return cBOOLPMFTerminalRuleCall_3_0;
        }

        // (LPAREN orderedDomain?=ORDERED_DEF RPAREN)?
        public Group getGroup_3_1() {
            return cGroup_3_1;
        }

        // LPAREN
        public RuleCall getLPARENTerminalRuleCall_3_1_0() {
            return cLPARENTerminalRuleCall_3_1_0;
        }

        // orderedDomain?=ORDERED_DEF
        public Assignment getOrderedDomainAssignment_3_1_1() {
            return cOrderedDomainAssignment_3_1_1;
        }

        // ORDERED_DEF
        public RuleCall getOrderedDomainORDERED_DEFTerminalRuleCall_3_1_1_0() {
            return cOrderedDomainORDERED_DEFTerminalRuleCall_3_1_1_0;
        }

        // RPAREN
        public RuleCall getRPARENTerminalRuleCall_3_1_2() {
            return cRPARENTerminalRuleCall_3_1_2;
        }

        // SQUARE_PAREN_L
        public RuleCall getSQUARE_PAREN_LTerminalRuleCall_3_2() {
            return cSQUARE_PAREN_LTerminalRuleCall_3_2;
        }

        // samples+=boolsample+
        public Assignment getSamplesAssignment_3_3() {
            return cSamplesAssignment_3_3;
        }

        // boolsample
        public RuleCall getSamplesBoolsampleParserRuleCall_3_3_0() {
            return cSamplesBoolsampleParserRuleCall_3_3_0;
        }

        // SQUARE_PAREN_R
        public RuleCall getSQUARE_PAREN_RTerminalRuleCall_3_4() {
            return cSQUARE_PAREN_RTerminalRuleCall_3_4;
        }
    }

    public class Numeric_int_sampleElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "numeric_int_sample");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cLPARENTerminalRuleCall_0 = (RuleCall) cGroup.eContents().get(0);
        private final Assignment cValueAssignment_1 = (Assignment) cGroup.eContents().get(1);
        private final RuleCall cValueSIGNED_INTParserRuleCall_1_0 = (RuleCall) cValueAssignment_1.eContents().get(0);
        private final RuleCall cSEMITerminalRuleCall_2 = (RuleCall) cGroup.eContents().get(2);
        private final Assignment cProbabilityAssignment_3 = (Assignment) cGroup.eContents().get(3);
        private final RuleCall cProbabilityDOUBLETerminalRuleCall_3_0 = (RuleCall) cProbabilityAssignment_3.eContents()
                .get(0);
        private final RuleCall cRPARENTerminalRuleCall_4 = (RuleCall) cGroup.eContents().get(4);

        // // numeric_int_sample -> LPAREN SIGNED_INT SEMI DOUBLE RPAREN
        // numeric_int_sample returns IntSample:
        // LPAREN value= //INT
        // SIGNED_INT SEMI probability= //DOUBLE
        // DOUBLE RPAREN;

        public ParserRule getRule() {
            return rule;
        }

        // LPAREN value= //INT
        // SIGNED_INT SEMI probability= //DOUBLE
        // DOUBLE RPAREN
        public Group getGroup() {
            return cGroup;
        }

        // LPAREN
        public RuleCall getLPARENTerminalRuleCall_0() {
            return cLPARENTerminalRuleCall_0;
        }

        // value= //INT
        // SIGNED_INT
        public Assignment getValueAssignment_1() {
            return cValueAssignment_1;
        }

        // //INT
        // SIGNED_INT
        public RuleCall getValueSIGNED_INTParserRuleCall_1_0() {
            return cValueSIGNED_INTParserRuleCall_1_0;
        }

        // SEMI
        public RuleCall getSEMITerminalRuleCall_2() {
            return cSEMITerminalRuleCall_2;
        }

        // probability= //DOUBLE
        // DOUBLE
        public Assignment getProbabilityAssignment_3() {
            return cProbabilityAssignment_3;
        }

        // //DOUBLE
        // DOUBLE
        public RuleCall getProbabilityDOUBLETerminalRuleCall_3_0() {
            return cProbabilityDOUBLETerminalRuleCall_3_0;
        }

        // RPAREN
        public RuleCall getRPARENTerminalRuleCall_4() {
            return cRPARENTerminalRuleCall_4;
        }
    }

    public class Numeric_real_sampleElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "numeric_real_sample");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cLPARENTerminalRuleCall_0 = (RuleCall) cGroup.eContents().get(0);
        private final Assignment cValueAssignment_1 = (Assignment) cGroup.eContents().get(1);
        private final RuleCall cValueSIGNED_NUMBERParserRuleCall_1_0 = (RuleCall) cValueAssignment_1.eContents().get(0);
        private final RuleCall cSEMITerminalRuleCall_2 = (RuleCall) cGroup.eContents().get(2);
        private final Assignment cProbabilityAssignment_3 = (Assignment) cGroup.eContents().get(3);
        private final RuleCall cProbabilityDOUBLETerminalRuleCall_3_0 = (RuleCall) cProbabilityAssignment_3.eContents()
                .get(0);
        private final RuleCall cRPARENTerminalRuleCall_4 = (RuleCall) cGroup.eContents().get(4);

        // // numeric_real_sample -> LPAREN SIGNED_NUMBER SEMI DOUBLE RPAREN
        // numeric_real_sample returns DoubleSample:
        // LPAREN value= //DOUBLE
        // SIGNED_NUMBER SEMI probability= //DOUBLE
        // DOUBLE RPAREN;

        public ParserRule getRule() {
            return rule;
        }

        // LPAREN value= //DOUBLE
        // SIGNED_NUMBER SEMI probability= //DOUBLE
        // DOUBLE RPAREN
        public Group getGroup() {
            return cGroup;
        }

        // LPAREN
        public RuleCall getLPARENTerminalRuleCall_0() {
            return cLPARENTerminalRuleCall_0;
        }

        // value= //DOUBLE
        // SIGNED_NUMBER
        public Assignment getValueAssignment_1() {
            return cValueAssignment_1;
        }

        // //DOUBLE
        // SIGNED_NUMBER
        public RuleCall getValueSIGNED_NUMBERParserRuleCall_1_0() {
            return cValueSIGNED_NUMBERParserRuleCall_1_0;
        }

        // SEMI
        public RuleCall getSEMITerminalRuleCall_2() {
            return cSEMITerminalRuleCall_2;
        }

        // probability= //DOUBLE
        // DOUBLE
        public Assignment getProbabilityAssignment_3() {
            return cProbabilityAssignment_3;
        }

        // //DOUBLE
        // DOUBLE
        public RuleCall getProbabilityDOUBLETerminalRuleCall_3_0() {
            return cProbabilityDOUBLETerminalRuleCall_3_0;
        }

        // RPAREN
        public RuleCall getRPARENTerminalRuleCall_4() {
            return cRPARENTerminalRuleCall_4;
        }
    }

    public class Real_pdf_sampleElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "real_pdf_sample");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cLPARENTerminalRuleCall_0 = (RuleCall) cGroup.eContents().get(0);
        private final Assignment cValueAssignment_1 = (Assignment) cGroup.eContents().get(1);
        private final RuleCall cValueSIGNED_NUMBERParserRuleCall_1_0 = (RuleCall) cValueAssignment_1.eContents().get(0);
        private final RuleCall cSEMITerminalRuleCall_2 = (RuleCall) cGroup.eContents().get(2);
        private final Assignment cProbabilityAssignment_3 = (Assignment) cGroup.eContents().get(3);
        private final RuleCall cProbabilityDOUBLETerminalRuleCall_3_0 = (RuleCall) cProbabilityAssignment_3.eContents()
                .get(0);
        private final RuleCall cRPARENTerminalRuleCall_4 = (RuleCall) cGroup.eContents().get(4);

        // // real_pdf_sample -> LPAREN SIGNED_NUMBER SEMI DOUBLE RPAREN
        // real_pdf_sample returns ContinuousSample:
        // LPAREN value= //DOUBLE
        // SIGNED_NUMBER SEMI probability= //DOUBLE
        // DOUBLE RPAREN;

        public ParserRule getRule() {
            return rule;
        }

        // LPAREN value= //DOUBLE
        // SIGNED_NUMBER SEMI probability= //DOUBLE
        // DOUBLE RPAREN
        public Group getGroup() {
            return cGroup;
        }

        // LPAREN
        public RuleCall getLPARENTerminalRuleCall_0() {
            return cLPARENTerminalRuleCall_0;
        }

        // value= //DOUBLE
        // SIGNED_NUMBER
        public Assignment getValueAssignment_1() {
            return cValueAssignment_1;
        }

        // //DOUBLE
        // SIGNED_NUMBER
        public RuleCall getValueSIGNED_NUMBERParserRuleCall_1_0() {
            return cValueSIGNED_NUMBERParserRuleCall_1_0;
        }

        // SEMI
        public RuleCall getSEMITerminalRuleCall_2() {
            return cSEMITerminalRuleCall_2;
        }

        // probability= //DOUBLE
        // DOUBLE
        public Assignment getProbabilityAssignment_3() {
            return cProbabilityAssignment_3;
        }

        // //DOUBLE
        // DOUBLE
        public RuleCall getProbabilityDOUBLETerminalRuleCall_3_0() {
            return cProbabilityDOUBLETerminalRuleCall_3_0;
        }

        // RPAREN
        public RuleCall getRPARENTerminalRuleCall_4() {
            return cRPARENTerminalRuleCall_4;
        }
    }

    public class StringsampleElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "stringsample");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cLPARENTerminalRuleCall_0 = (RuleCall) cGroup.eContents().get(0);
        private final Assignment cValueAssignment_1 = (Assignment) cGroup.eContents().get(1);
        private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall) cValueAssignment_1.eContents().get(0);
        private final RuleCall cSEMITerminalRuleCall_2 = (RuleCall) cGroup.eContents().get(2);
        private final Assignment cProbabilityAssignment_3 = (Assignment) cGroup.eContents().get(3);
        private final RuleCall cProbabilityDOUBLETerminalRuleCall_3_0 = (RuleCall) cProbabilityAssignment_3.eContents()
                .get(0);
        private final RuleCall cRPARENTerminalRuleCall_4 = (RuleCall) cGroup.eContents().get(4);

        // // stringsample -> LPAREN STRING SEMI DOUBLE RPAREN
        // stringsample returns StringSample:
        // LPAREN value=STRING SEMI probability= //DOUBLE
        // DOUBLE RPAREN;

        public ParserRule getRule() {
            return rule;
        }

        // LPAREN value=STRING SEMI probability= //DOUBLE
        // DOUBLE RPAREN
        public Group getGroup() {
            return cGroup;
        }

        // LPAREN
        public RuleCall getLPARENTerminalRuleCall_0() {
            return cLPARENTerminalRuleCall_0;
        }

        // value=STRING
        public Assignment getValueAssignment_1() {
            return cValueAssignment_1;
        }

        // STRING
        public RuleCall getValueSTRINGTerminalRuleCall_1_0() {
            return cValueSTRINGTerminalRuleCall_1_0;
        }

        // SEMI
        public RuleCall getSEMITerminalRuleCall_2() {
            return cSEMITerminalRuleCall_2;
        }

        // probability= //DOUBLE
        // DOUBLE
        public Assignment getProbabilityAssignment_3() {
            return cProbabilityAssignment_3;
        }

        // //DOUBLE
        // DOUBLE
        public RuleCall getProbabilityDOUBLETerminalRuleCall_3_0() {
            return cProbabilityDOUBLETerminalRuleCall_3_0;
        }

        // RPAREN
        public RuleCall getRPARENTerminalRuleCall_4() {
            return cRPARENTerminalRuleCall_4;
        }
    }

    public class BoolsampleElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boolsample");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cLPARENTerminalRuleCall_0 = (RuleCall) cGroup.eContents().get(0);
        private final Assignment cValueAssignment_1 = (Assignment) cGroup.eContents().get(1);
        private final RuleCall cValueBOOLEAN_KEYWORDSTerminalRuleCall_1_0 = (RuleCall) cValueAssignment_1.eContents()
                .get(0);
        private final RuleCall cSEMITerminalRuleCall_2 = (RuleCall) cGroup.eContents().get(2);
        private final Assignment cProbabilityAssignment_3 = (Assignment) cGroup.eContents().get(3);
        private final RuleCall cProbabilityDOUBLETerminalRuleCall_3_0 = (RuleCall) cProbabilityAssignment_3.eContents()
                .get(0);
        private final RuleCall cRPARENTerminalRuleCall_4 = (RuleCall) cGroup.eContents().get(4);

        // // boolsample -> LPAREN BOOLEAN_KEYWORDS SEMI DOUBLE RPAREN
        // boolsample returns BoolSample:
        // LPAREN value=BOOLEAN_KEYWORDS SEMI probability= //DOUBLE
        // DOUBLE RPAREN;

        public ParserRule getRule() {
            return rule;
        }

        // LPAREN value=BOOLEAN_KEYWORDS SEMI probability= //DOUBLE
        // DOUBLE RPAREN
        public Group getGroup() {
            return cGroup;
        }

        // LPAREN
        public RuleCall getLPARENTerminalRuleCall_0() {
            return cLPARENTerminalRuleCall_0;
        }

        // value=BOOLEAN_KEYWORDS
        public Assignment getValueAssignment_1() {
            return cValueAssignment_1;
        }

        // BOOLEAN_KEYWORDS
        public RuleCall getValueBOOLEAN_KEYWORDSTerminalRuleCall_1_0() {
            return cValueBOOLEAN_KEYWORDSTerminalRuleCall_1_0;
        }

        // SEMI
        public RuleCall getSEMITerminalRuleCall_2() {
            return cSEMITerminalRuleCall_2;
        }

        // probability= //DOUBLE
        // DOUBLE
        public Assignment getProbabilityAssignment_3() {
            return cProbabilityAssignment_3;
        }

        // //DOUBLE
        // DOUBLE
        public RuleCall getProbabilityDOUBLETerminalRuleCall_3_0() {
            return cProbabilityDOUBLETerminalRuleCall_3_0;
        }

        // RPAREN
        public RuleCall getRPARENTerminalRuleCall_4() {
            return cRPARENTerminalRuleCall_4;
        }
    }

    public class SIGNED_NUMBERElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SIGNED_NUMBER");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Keyword cHyphenMinusKeyword_0 = (Keyword) cGroup.eContents().get(0);
        private final RuleCall cDOUBLETerminalRuleCall_1 = (RuleCall) cGroup.eContents().get(1);

        // //#############################
        // // Datatype rules/terminals:
        // // SIGNED_NUMBER -> ('-')? DOUBLE
        // SIGNED_NUMBER returns ecore::EDouble:
        // "-"? DOUBLE;

        public ParserRule getRule() {
            return rule;
        }

        // "-"? DOUBLE
        public Group getGroup() {
            return cGroup;
        }

        // "-"?
        public Keyword getHyphenMinusKeyword_0() {
            return cHyphenMinusKeyword_0;
        }

        // DOUBLE
        public RuleCall getDOUBLETerminalRuleCall_1() {
            return cDOUBLETerminalRuleCall_1;
        }
    }

    public class SIGNED_INTElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SIGNED_INT");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Keyword cHyphenMinusKeyword_0 = (Keyword) cGroup.eContents().get(0);
        private final RuleCall cDECINTTerminalRuleCall_1 = (RuleCall) cGroup.eContents().get(1);

        // // SIGNED_INT -> ('-')? DECINT
        // SIGNED_INT returns ecore::EInt:
        // "-"? DECINT;

        public ParserRule getRule() {
            return rule;
        }

        // "-"? DECINT
        public Group getGroup() {
            return cGroup;
        }

        // "-"?
        public Keyword getHyphenMinusKeyword_0() {
            return cHyphenMinusKeyword_0;
        }

        // DECINT
        public RuleCall getDECINTTerminalRuleCall_1() {
            return cDECINTTerminalRuleCall_1;
        }
    }

    public class BooleanOperationsElements extends AbstractEnumRuleElementFinder {
        private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanOperations");
        private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
        private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration) cAlternatives
                .eContents().get(0);
        private final Keyword cANDANDKeyword_0_0 = (Keyword) cANDEnumLiteralDeclaration_0.eContents().get(0);
        private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration) cAlternatives
                .eContents().get(1);
        private final Keyword cORORKeyword_1_0 = (Keyword) cOREnumLiteralDeclaration_1.eContents().get(0);
        private final EnumLiteralDeclaration cXOREnumLiteralDeclaration_2 = (EnumLiteralDeclaration) cAlternatives
                .eContents().get(2);
        private final Keyword cXORXORKeyword_2_0 = (Keyword) cXOREnumLiteralDeclaration_2.eContents().get(0);

        // //BooleanOperations -> AND | OR | XOR
        // enum BooleanOperations:
        // AND | OR | XOR;
        public EnumRule getRule() {
            return rule;
        }

        // AND | OR | XOR
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // AND
        public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() {
            return cANDEnumLiteralDeclaration_0;
        }

        // "AND"
        public Keyword getANDANDKeyword_0_0() {
            return cANDANDKeyword_0_0;
        }

        // OR
        public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() {
            return cOREnumLiteralDeclaration_1;
        }

        // "OR"
        public Keyword getORORKeyword_1_0() {
            return cORORKeyword_1_0;
        }

        // XOR
        public EnumLiteralDeclaration getXOREnumLiteralDeclaration_2() {
            return cXOREnumLiteralDeclaration_2;
        }

        // "XOR"
        public Keyword getXORXORKeyword_2_0() {
            return cXORXORKeyword_2_0;
        }
    }

    public class AndoperationElements extends AbstractEnumRuleElementFinder {
        private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "andoperation");
        private final EnumLiteralDeclaration cANDEnumLiteralDeclaration = (EnumLiteralDeclaration) rule.eContents()
                .get(1);
        private final Keyword cANDANDKeyword_0 = (Keyword) cANDEnumLiteralDeclaration.eContents().get(0);

        // // andoperation -> AND
        // enum andoperation returns BooleanOperations:
        // AND;
        public EnumRule getRule() {
            return rule;
        }

        // AND
        public EnumLiteralDeclaration getANDEnumLiteralDeclaration() {
            return cANDEnumLiteralDeclaration;
        }

        // "AND"
        public Keyword getANDANDKeyword_0() {
            return cANDANDKeyword_0;
        }
    }

    public class OroperationsElements extends AbstractEnumRuleElementFinder {
        private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "oroperations");
        private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
        private final EnumLiteralDeclaration cOREnumLiteralDeclaration_0 = (EnumLiteralDeclaration) cAlternatives
                .eContents().get(0);
        private final Keyword cORORKeyword_0_0 = (Keyword) cOREnumLiteralDeclaration_0.eContents().get(0);
        private final EnumLiteralDeclaration cXOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration) cAlternatives
                .eContents().get(1);
        private final Keyword cXORXORKeyword_1_0 = (Keyword) cXOREnumLiteralDeclaration_1.eContents().get(0);

        // // oroperations -> OR|XOR
        // enum oroperations returns BooleanOperations:
        // OR | XOR;
        public EnumRule getRule() {
            return rule;
        }

        // OR | XOR
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // OR
        public EnumLiteralDeclaration getOREnumLiteralDeclaration_0() {
            return cOREnumLiteralDeclaration_0;
        }

        // "OR"
        public Keyword getORORKeyword_0_0() {
            return cORORKeyword_0_0;
        }

        // XOR
        public EnumLiteralDeclaration getXOREnumLiteralDeclaration_1() {
            return cXOREnumLiteralDeclaration_1;
        }

        // "XOR"
        public Keyword getXORXORKeyword_1_0() {
            return cXORXORKeyword_1_0;
        }
    }

    public class CompareOperationsElements extends AbstractEnumRuleElementFinder {
        private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CompareOperations");
        private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
        private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration) cAlternatives
                .eContents().get(0);
        private final Keyword cGREATERGreaterThanSignKeyword_0_0 = (Keyword) cGREATEREnumLiteralDeclaration_0
                .eContents().get(0);
        private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration) cAlternatives
                .eContents().get(1);
        private final Keyword cLESSLessThanSignKeyword_1_0 = (Keyword) cLESSEnumLiteralDeclaration_1.eContents().get(0);
        private final EnumLiteralDeclaration cEQUALSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration) cAlternatives
                .eContents().get(2);
        private final Keyword cEQUALSEqualsSignEqualsSignKeyword_2_0 = (Keyword) cEQUALSEnumLiteralDeclaration_2
                .eContents().get(0);
        private final EnumLiteralDeclaration cNOTEQUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration) cAlternatives
                .eContents().get(3);
        private final Keyword cNOTEQUALLessThanSignGreaterThanSignKeyword_3_0 = (Keyword) cNOTEQUALEnumLiteralDeclaration_3
                .eContents().get(0);
        private final EnumLiteralDeclaration cGREATEREQUALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration) cAlternatives
                .eContents().get(4);
        private final Keyword cGREATEREQUALGreaterThanSignEqualsSignKeyword_4_0 = (Keyword) cGREATEREQUALEnumLiteralDeclaration_4
                .eContents().get(0);
        private final EnumLiteralDeclaration cLESSEQUALEnumLiteralDeclaration_5 = (EnumLiteralDeclaration) cAlternatives
                .eContents().get(5);
        private final Keyword cLESSEQUALLessThanSignEqualsSignKeyword_5_0 = (Keyword) cLESSEQUALEnumLiteralDeclaration_5
                .eContents().get(0);

        // // CompareOperations -> '>' | '<' | '==' | '<>' | '>=' | '<='
        // enum CompareOperations:
        // GREATER=">" | LESS="<" | EQUALS="==" | NOTEQUAL="<>" | GREATEREQUAL=">=" |
        // LESSEQUAL="<=";
        public EnumRule getRule() {
            return rule;
        }

        // GREATER=">" | LESS="<" | EQUALS="==" | NOTEQUAL="<>" | GREATEREQUAL=">=" | LESSEQUAL="<="
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // GREATER=">"
        public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_0() {
            return cGREATEREnumLiteralDeclaration_0;
        }

        // ">"
        public Keyword getGREATERGreaterThanSignKeyword_0_0() {
            return cGREATERGreaterThanSignKeyword_0_0;
        }

        // LESS="<"
        public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_1() {
            return cLESSEnumLiteralDeclaration_1;
        }

        // "<"
        public Keyword getLESSLessThanSignKeyword_1_0() {
            return cLESSLessThanSignKeyword_1_0;
        }

        // EQUALS="=="
        public EnumLiteralDeclaration getEQUALSEnumLiteralDeclaration_2() {
            return cEQUALSEnumLiteralDeclaration_2;
        }

        // "=="
        public Keyword getEQUALSEqualsSignEqualsSignKeyword_2_0() {
            return cEQUALSEqualsSignEqualsSignKeyword_2_0;
        }

        // NOTEQUAL="<>"
        public EnumLiteralDeclaration getNOTEQUALEnumLiteralDeclaration_3() {
            return cNOTEQUALEnumLiteralDeclaration_3;
        }

        // "<>"
        public Keyword getNOTEQUALLessThanSignGreaterThanSignKeyword_3_0() {
            return cNOTEQUALLessThanSignGreaterThanSignKeyword_3_0;
        }

        // GREATEREQUAL=">="
        public EnumLiteralDeclaration getGREATEREQUALEnumLiteralDeclaration_4() {
            return cGREATEREQUALEnumLiteralDeclaration_4;
        }

        // ">="
        public Keyword getGREATEREQUALGreaterThanSignEqualsSignKeyword_4_0() {
            return cGREATEREQUALGreaterThanSignEqualsSignKeyword_4_0;
        }

        // LESSEQUAL="<="
        public EnumLiteralDeclaration getLESSEQUALEnumLiteralDeclaration_5() {
            return cLESSEQUALEnumLiteralDeclaration_5;
        }

        // "<="
        public Keyword getLESSEQUALLessThanSignEqualsSignKeyword_5_0() {
            return cLESSEQUALLessThanSignEqualsSignKeyword_5_0;
        }
    }

    public class TermOperationsElements extends AbstractEnumRuleElementFinder {
        private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TermOperations");
        private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
        private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration) cAlternatives
                .eContents().get(0);
        private final Keyword cADDPlusSignKeyword_0_0 = (Keyword) cADDEnumLiteralDeclaration_0.eContents().get(0);
        private final EnumLiteralDeclaration cSUBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration) cAlternatives
                .eContents().get(1);
        private final Keyword cSUBHyphenMinusKeyword_1_0 = (Keyword) cSUBEnumLiteralDeclaration_1.eContents().get(0);

        // // TermOperations -> "+" | "-"
        // enum TermOperations:
        // ADD="+" | SUB="-";
        public EnumRule getRule() {
            return rule;
        }

        // ADD="+" | SUB="-"
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // ADD="+"
        public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() {
            return cADDEnumLiteralDeclaration_0;
        }

        // "+"
        public Keyword getADDPlusSignKeyword_0_0() {
            return cADDPlusSignKeyword_0_0;
        }

        // SUB="-"
        public EnumLiteralDeclaration getSUBEnumLiteralDeclaration_1() {
            return cSUBEnumLiteralDeclaration_1;
        }

        // "-"
        public Keyword getSUBHyphenMinusKeyword_1_0() {
            return cSUBHyphenMinusKeyword_1_0;
        }
    }

    public class ProductOperationsElements extends AbstractEnumRuleElementFinder {
        private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ProductOperations");
        private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
        private final EnumLiteralDeclaration cMULTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration) cAlternatives
                .eContents().get(0);
        private final Keyword cMULTAsteriskKeyword_0_0 = (Keyword) cMULTEnumLiteralDeclaration_0.eContents().get(0);
        private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_1 = (EnumLiteralDeclaration) cAlternatives
                .eContents().get(1);
        private final Keyword cDIVSolidusKeyword_1_0 = (Keyword) cDIVEnumLiteralDeclaration_1.eContents().get(0);
        private final EnumLiteralDeclaration cMODEnumLiteralDeclaration_2 = (EnumLiteralDeclaration) cAlternatives
                .eContents().get(2);
        private final Keyword cMODPercentSignKeyword_2_0 = (Keyword) cMODEnumLiteralDeclaration_2.eContents().get(0);

        // // ProductOperations -> "*" | "/" | "%"
        // enum ProductOperations:
        // MULT="*" | DIV="/" | MOD="%";
        public EnumRule getRule() {
            return rule;
        }

        // MULT="*" | DIV="/" | MOD="%"
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // MULT="*"
        public EnumLiteralDeclaration getMULTEnumLiteralDeclaration_0() {
            return cMULTEnumLiteralDeclaration_0;
        }

        // "*"
        public Keyword getMULTAsteriskKeyword_0_0() {
            return cMULTAsteriskKeyword_0_0;
        }

        // DIV="/"
        public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_1() {
            return cDIVEnumLiteralDeclaration_1;
        }

        // "/"
        public Keyword getDIVSolidusKeyword_1_0() {
            return cDIVSolidusKeyword_1_0;
        }

        // MOD="%"
        public EnumLiteralDeclaration getMODEnumLiteralDeclaration_2() {
            return cMODEnumLiteralDeclaration_2;
        }

        // "%"
        public Keyword getMODPercentSignKeyword_2_0() {
            return cMODPercentSignKeyword_2_0;
        }
    }

    public class UnitNamesElements extends AbstractEnumRuleElementFinder {
        private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UnitNames");
        private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
        private final EnumLiteralDeclaration cUNITLESSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration) cAlternatives
                .eContents().get(0);
        private final Keyword cUNITLESS_Keyword_0_0 = (Keyword) cUNITLESSEnumLiteralDeclaration_0.eContents().get(0);
        private final EnumLiteralDeclaration cUNITLESSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration) cAlternatives
                .eContents().get(1);
        private final Keyword cUNITLESSUnitlessKeyword_1_0 = (Keyword) cUNITLESSEnumLiteralDeclaration_1.eContents()
                .get(0);
        private final EnumLiteralDeclaration cBYTEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration) cAlternatives
                .eContents().get(2);
        private final Keyword cBYTEBKeyword_2_0 = (Keyword) cBYTEEnumLiteralDeclaration_2.eContents().get(0);
        private final EnumLiteralDeclaration cSECONDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration) cAlternatives
                .eContents().get(3);
        private final Keyword cSECONDSKeyword_3_0 = (Keyword) cSECONDEnumLiteralDeclaration_3.eContents().get(0);
        private final EnumLiteralDeclaration cMETEREnumLiteralDeclaration_4 = (EnumLiteralDeclaration) cAlternatives
                .eContents().get(4);
        private final Keyword cMETERMKeyword_4_0 = (Keyword) cMETEREnumLiteralDeclaration_4.eContents().get(0);

        // // UnitNames -> "_" | "unitless" | "B" | "s" | "m"
        // enum UnitNames:
        // UNITLESS="_" | UNITLESS="unitless" | BYTE="B" | SECOND="s" | METER="m";
        public EnumRule getRule() {
            return rule;
        }

        // UNITLESS="_" | UNITLESS="unitless" | BYTE="B" | SECOND="s" | METER="m"
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // UNITLESS="_"
        public EnumLiteralDeclaration getUNITLESSEnumLiteralDeclaration_0() {
            return cUNITLESSEnumLiteralDeclaration_0;
        }

        // "_"
        public Keyword getUNITLESS_Keyword_0_0() {
            return cUNITLESS_Keyword_0_0;
        }

        // UNITLESS="unitless"
        public EnumLiteralDeclaration getUNITLESSEnumLiteralDeclaration_1() {
            return cUNITLESSEnumLiteralDeclaration_1;
        }

        // "unitless"
        public Keyword getUNITLESSUnitlessKeyword_1_0() {
            return cUNITLESSUnitlessKeyword_1_0;
        }

        // BYTE="B"
        public EnumLiteralDeclaration getBYTEEnumLiteralDeclaration_2() {
            return cBYTEEnumLiteralDeclaration_2;
        }

        // "B"
        public Keyword getBYTEBKeyword_2_0() {
            return cBYTEBKeyword_2_0;
        }

        // SECOND="s"
        public EnumLiteralDeclaration getSECONDEnumLiteralDeclaration_3() {
            return cSECONDEnumLiteralDeclaration_3;
        }

        // "s"
        public Keyword getSECONDSKeyword_3_0() {
            return cSECONDSKeyword_3_0;
        }

        // METER="m"
        public EnumLiteralDeclaration getMETEREnumLiteralDeclaration_4() {
            return cMETEREnumLiteralDeclaration_4;
        }

        // "m"
        public Keyword getMETERMKeyword_4_0() {
            return cMETERMKeyword_4_0;
        }
    }

    private final ExpressionElements pExpression;
    private final IfelseExprElements pIfelseExpr;
    private final BooleanExpressionElements pBooleanExpression;
    private final BooleanOperationsElements unknownRuleBooleanOperations;
    private final BoolAndExprElements pBoolAndExpr;
    private final AndoperationElements unknownRuleAndoperation;
    private final BoolOrExprElements pBoolOrExpr;
    private final OroperationsElements unknownRuleOroperations;
    private final CompareExprElements pCompareExpr;
    private final CompareOperationsElements unknownRuleCompareOperations;
    private final SumExprElements pSumExpr;
    private final TermOperationsElements unknownRuleTermOperations;
    private final ProdExprElements pProdExpr;
    private final ProductOperationsElements unknownRuleProductOperations;
    private final PowExprElements pPowExpr;
    private final UnaryExprElements pUnaryExpr;
    private final NotExpressionElements pNotExpression;
    private final NegativeExpressionElements pNegativeExpression;
    private final AtomElements pAtom;
    private final DoubleLiteralElements pDoubleLiteral;
    private final ProbabilityFunctionLiteralElements pProbabilityFunctionLiteral;
    private final ParenthesisElements pParenthesis;
    private final FunctionLiteralElements pFunctionLiteral;
    private final VariableElements pVariable;
    private final AbstractNamedReferenceElements pAbstractNamedReference;
    private final VariableReferenceElements pVariableReference;
    private final NamespaceReferenceElements pNamespaceReference;
    private final BoolLiteralElements pBoolLiteral;
    private final StringLiteralElements pStringLiteral;
    private final IntLiteralElements pIntLiteral;
    private final UnitElements pUnit;
    private final UnitDivElements pUnitDiv;
    private final UnitMultiElements pUnitMulti;
    private final UnitPowElements pUnitPow;
    private final BaseUnitElements pBaseUnit;
    private final UnitNamesElements unknownRuleUnitNames;
    private final DefinitionElements pDefinition;
    private final ProbabilityDensityFunctionElements pProbabilityDensityFunction;
    private final BoxedPDFElements pBoxedPDF;
    private final ProbabilityMassFunctionElements pProbabilityMassFunction;
    private final Numeric_int_sampleElements pNumeric_int_sample;
    private final Numeric_real_sampleElements pNumeric_real_sample;
    private final Real_pdf_sampleElements pReal_pdf_sample;
    private final StringsampleElements pStringsample;
    private final BoolsampleElements pBoolsample;
    private final SIGNED_NUMBERElements pSIGNED_NUMBER;
    private final SIGNED_INTElements pSIGNED_INT;
    private final TerminalRule tDOUBLE;
    private final TerminalRule tDECINT;
    private final TerminalRule tBOOLEAN_KEYWORDS;
    private final TerminalRule tNOT;
    private final TerminalRule tINTPMF;
    private final TerminalRule tDOUBLEPMF;
    private final TerminalRule tENUMPMF;
    private final TerminalRule tDOUBLEPDF;
    private final TerminalRule tBOOLPMF;
    private final TerminalRule tPOW;
    private final TerminalRule tLPAREN;
    private final TerminalRule tRPAREN;
    private final TerminalRule tSEMI;
    private final TerminalRule tCOLON;
    private final TerminalRule tORDERED_DEF;
    private final TerminalRule tSQUARE_PAREN_L;
    private final TerminalRule tSQUARE_PAREN_R;
    private final TerminalRule tDIGIT;
    private final TerminalRule tDOT;
    private final TerminalRule tCONDDELIMITER;
    private final TerminalRule tELSEDELIMITER;
    private final TerminalRule tID;
    private final TerminalRule tSTRING;
    private final TerminalRule tML_COMMENT;
    private final TerminalRule tSL_COMMENT;
    private final TerminalRule tWS;
    private final TerminalRule tANY_OTHER;

    private final Grammar grammar;

    @Inject
    public StoExGrammarAccess(GrammarProvider grammarProvider) {
        Resource.Factory.Registry reg = Resource.Factory.Registry.INSTANCE;
        Map<String, Object> m = reg.getExtensionToFactoryMap();

        // FIX for xtext StoEx: Register xtextbin in the Resource Factory
        if (!Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().containsKey("xtextbin"))
            Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("xtextbin",
                    new BinaryGrammarResourceFactoryImpl());

        this.grammar = internalFindGrammar(grammarProvider);
        this.pExpression = new ExpressionElements();
        this.pIfelseExpr = new IfelseExprElements();
        this.pBooleanExpression = new BooleanExpressionElements();
        this.unknownRuleBooleanOperations = new BooleanOperationsElements();
        this.pBoolAndExpr = new BoolAndExprElements();
        this.unknownRuleAndoperation = new AndoperationElements();
        this.pBoolOrExpr = new BoolOrExprElements();
        this.unknownRuleOroperations = new OroperationsElements();
        this.pCompareExpr = new CompareExprElements();
        this.unknownRuleCompareOperations = new CompareOperationsElements();
        this.pSumExpr = new SumExprElements();
        this.unknownRuleTermOperations = new TermOperationsElements();
        this.pProdExpr = new ProdExprElements();
        this.unknownRuleProductOperations = new ProductOperationsElements();
        this.pPowExpr = new PowExprElements();
        this.pUnaryExpr = new UnaryExprElements();
        this.pNotExpression = new NotExpressionElements();
        this.pNegativeExpression = new NegativeExpressionElements();
        this.pAtom = new AtomElements();
        this.pDoubleLiteral = new DoubleLiteralElements();
        this.pProbabilityFunctionLiteral = new ProbabilityFunctionLiteralElements();
        this.pParenthesis = new ParenthesisElements();
        this.pFunctionLiteral = new FunctionLiteralElements();
        this.pVariable = new VariableElements();
        this.pAbstractNamedReference = new AbstractNamedReferenceElements();
        this.pVariableReference = new VariableReferenceElements();
        this.pNamespaceReference = new NamespaceReferenceElements();
        this.pBoolLiteral = new BoolLiteralElements();
        this.pStringLiteral = new StringLiteralElements();
        this.pIntLiteral = new IntLiteralElements();
        this.pUnit = new UnitElements();
        this.pUnitDiv = new UnitDivElements();
        this.pUnitMulti = new UnitMultiElements();
        this.pUnitPow = new UnitPowElements();
        this.pBaseUnit = new BaseUnitElements();
        this.unknownRuleUnitNames = new UnitNamesElements();
        this.pDefinition = new DefinitionElements();
        this.pProbabilityDensityFunction = new ProbabilityDensityFunctionElements();
        this.pBoxedPDF = new BoxedPDFElements();
        this.pProbabilityMassFunction = new ProbabilityMassFunctionElements();
        this.pNumeric_int_sample = new Numeric_int_sampleElements();
        this.pNumeric_real_sample = new Numeric_real_sampleElements();
        this.pReal_pdf_sample = new Real_pdf_sampleElements();
        this.pStringsample = new StringsampleElements();
        this.pBoolsample = new BoolsampleElements();
        this.pSIGNED_NUMBER = new SIGNED_NUMBERElements();
        this.pSIGNED_INT = new SIGNED_INTElements();
        this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE");
        this.tDECINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECINT");
        this.tBOOLEAN_KEYWORDS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN_KEYWORDS");
        this.tNOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NOT");
        this.tINTPMF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTPMF");
        this.tDOUBLEPMF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLEPMF");
        this.tENUMPMF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ENUMPMF");
        this.tDOUBLEPDF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLEPDF");
        this.tBOOLPMF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLPMF");
        this.tPOW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "POW");
        this.tLPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LPAREN");
        this.tRPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RPAREN");
        this.tSEMI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SEMI");
        this.tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COLON");
        this.tORDERED_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ORDERED_DEF");
        this.tSQUARE_PAREN_L = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SQUARE_PAREN_L");
        this.tSQUARE_PAREN_R = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SQUARE_PAREN_R");
        this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIGIT");
        this.tDOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOT");
        this.tCONDDELIMITER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CONDDELIMITER");
        this.tELSEDELIMITER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ELSEDELIMITER");
        this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
        this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
        this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT");
        this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
        this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
        this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER");
    }

    protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
        Grammar grammar = grammarProvider.getGrammar(this);
        while (grammar != null) {
            if ("org.palladiosimulator.commons.stoex.StoEx".equals(grammar.getName())) {
                return grammar;
            }
            List<Grammar> grammars = grammar.getUsedGrammars();
            if (!grammars.isEmpty()) {
                grammar = grammars.iterator().next();
            } else {
                return null;
            }
        }
        return grammar;
    }

    public Grammar getGrammar() {
        return grammar;
    }

    // //#############################
    // // start-rule:
    // // expression -> ifelseExpr
    // expression returns Expression:
    // ifelseExpr;
    public ExpressionElements getExpressionAccess() {
        return pExpression;
    }

    public ParserRule getExpressionRule() {
        return getExpressionAccess().getRule();
    }

    // //#############################
    // // Stochastic Expressions:
    // // ifelseExpr -> boolAndExpr ('?' boolAndExpr ':' boolAndExpr)?
    // ifelseExpr returns IfElse:
    // boolAndExpr ({IfElseExpression.conditionExpression=current} CONDDELIMITER
    // ifExpression=boolAndExpr ELSEDELIMITER
    // elseExpression=boolAndExpr)?;
    public IfelseExprElements getIfelseExprAccess() {
        return pIfelseExpr;
    }

    public ParserRule getIfelseExprRule() {
        return getIfelseExprAccess().getRule();
    }

    // //BooleanExpression -> boolOrExpr (BooleanOperations boolOrExpr)*
    // // Note: This is a workaround for the serializer to work with AND-Operations!
    // BooleanExpression:
    // boolOrExpr ({BooleanOperatorExpression.left=current} operation=BooleanOperations
    // right=boolOrExpr)*;
    public BooleanExpressionElements getBooleanExpressionAccess() {
        return pBooleanExpression;
    }

    public ParserRule getBooleanExpressionRule() {
        return getBooleanExpressionAccess().getRule();
    }

    // //BooleanOperations -> AND | OR | XOR
    // enum BooleanOperations:
    // AND | OR | XOR;
    public BooleanOperationsElements getBooleanOperationsAccess() {
        return unknownRuleBooleanOperations;
    }

    public EnumRule getBooleanOperationsRule() {
        return getBooleanOperationsAccess().getRule();
    }

    // // boolAndExpr -> boolOrExpr (andoperation boolOrExpr)*
    // boolAndExpr returns BooleanExpression:
    // boolOrExpr ({BooleanOperatorExpression.left=current} operation=andoperation
    // right=boolOrExpr)*;
    public BoolAndExprElements getBoolAndExprAccess() {
        return pBoolAndExpr;
    }

    public ParserRule getBoolAndExprRule() {
        return getBoolAndExprAccess().getRule();
    }

    // // andoperation -> AND
    // enum andoperation returns BooleanOperations:
    // AND;
    public AndoperationElements getAndoperationAccess() {
        return unknownRuleAndoperation;
    }

    public EnumRule getAndoperationRule() {
        return getAndoperationAccess().getRule();
    }

    // // boolOrExpr -> compareExpr (oroperations compareExpr)*
    // boolOrExpr returns BooleanExpression:
    // compareExpr ({BooleanOperatorExpression.left=current} operation=oroperations
    // right=compareExpr)*;
    public BoolOrExprElements getBoolOrExprAccess() {
        return pBoolOrExpr;
    }

    public ParserRule getBoolOrExprRule() {
        return getBoolOrExprAccess().getRule();
    }

    // // oroperations -> OR|XOR
    // enum oroperations returns BooleanOperations:
    // OR | XOR;
    public OroperationsElements getOroperationsAccess() {
        return unknownRuleOroperations;
    }

    public EnumRule getOroperationsRule() {
        return getOroperationsAccess().getRule();
    }

    // // compareExpr -> sumExpr (CompareOperations sumExpr)?
    // compareExpr returns Comparison:
    // sumExpr ({CompareExpression.left=current} operation=CompareOperations right=sumExpr)?;
    public CompareExprElements getCompareExprAccess() {
        return pCompareExpr;
    }

    public ParserRule getCompareExprRule() {
        return getCompareExprAccess().getRule();
    }

    // // CompareOperations -> '>' | '<' | '==' | '<>' | '>=' | '<='
    // enum CompareOperations:
    // GREATER=">" | LESS="<" | EQUALS="==" | NOTEQUAL="<>" | GREATEREQUAL=">=" | LESSEQUAL="<=";
    public CompareOperationsElements getCompareOperationsAccess() {
        return unknownRuleCompareOperations;
    }

    public EnumRule getCompareOperationsRule() {
        return getCompareOperationsAccess().getRule();
    }

    // // sumExpr -> prodExpr (TermOperations prodExpr)*
    // sumExpr returns Term:
    // prodExpr ({TermExpression.left=current} operation=TermOperations right=prodExpr)*;
    public SumExprElements getSumExprAccess() {
        return pSumExpr;
    }

    public ParserRule getSumExprRule() {
        return getSumExprAccess().getRule();
    }

    // // TermOperations -> "+" | "-"
    // enum TermOperations:
    // ADD="+" | SUB="-";
    public TermOperationsElements getTermOperationsAccess() {
        return unknownRuleTermOperations;
    }

    public EnumRule getTermOperationsRule() {
        return getTermOperationsAccess().getRule();
    }

    // // prodExpr -> powExpr (ProductOperations powExpr)*
    // prodExpr returns Product:
    // powExpr ({ProductExpression.left=current} operation=ProductOperations right=powExpr)*;
    public ProdExprElements getProdExprAccess() {
        return pProdExpr;
    }

    public ParserRule getProdExprRule() {
        return getProdExprAccess().getRule();
    }

    // // ProductOperations -> "*" | "/" | "%"
    // enum ProductOperations:
    // MULT="*" | DIV="/" | MOD="%";
    public ProductOperationsElements getProductOperationsAccess() {
        return unknownRuleProductOperations;
    }

    public EnumRule getProductOperationsRule() {
        return getProductOperationsAccess().getRule();
    }

    // // powExpr -> unaryExpr (POW unaryExpr)?
    // powExpr returns Power:
    // unaryExpr ({PowerExpression.base=current} POW exponent=unaryExpr)?;
    public PowExprElements getPowExprAccess() {
        return pPowExpr;
    }

    public ParserRule getPowExprRule() {
        return getPowExprAccess().getRule();
    }

    // // unaryExpr -> NegativeExpression | NotExpression | atom
    // unaryExpr returns Unary:
    // NegativeExpression | NotExpression | atom;
    public UnaryExprElements getUnaryExprAccess() {
        return pUnaryExpr;
    }

    public ParserRule getUnaryExprRule() {
        return getUnaryExprAccess().getRule();
    }

    // // NotExpression -> NOT unaryExpr
    // NotExpression:
    // NOT inner=unaryExpr;
    public NotExpressionElements getNotExpressionAccess() {
        return pNotExpression;
    }

    public ParserRule getNotExpressionRule() {
        return getNotExpressionAccess().getRule();
    }

    // // NegativeExpression -> '-' unaryExpr
    // NegativeExpression:
    // "-" inner=unaryExpr;
    public NegativeExpressionElements getNegativeExpressionAccess() {
        return pNegativeExpression;
    }

    public ParserRule getNegativeExpressionRule() {
        return getNegativeExpressionAccess().getRule();
    }

    // // atom -> IntLiteral | DoubleLiteral |StringLiteral | BoolLiteral | FunctionLiteral |
    // Variable | Parenthesis | ProbabilityFunctionLiteral
    // atom returns Atom:
    // IntLiteral | DoubleLiteral | StringLiteral | BoolLiteral | FunctionLiteral | Variable |
    // Parenthesis |
    // ProbabilityFunctionLiteral;
    public AtomElements getAtomAccess() {
        return pAtom;
    }

    public ParserRule getAtomRule() {
        return getAtomAccess().getRule();
    }

    // // DoubleLiteral -> DOUBLE (SQUARE_PAREN_L Unit SQUARE_PAREN_R)?
    // DoubleLiteral:
    // value=DOUBLE (SQUARE_PAREN_L unit=Unit SQUARE_PAREN_R)?;
    public DoubleLiteralElements getDoubleLiteralAccess() {
        return pDoubleLiteral;
    }

    public ParserRule getDoubleLiteralRule() {
        return getDoubleLiteralAccess().getRule();
    }

    // // ProbabilityFunctionLiteral -> definition
    // ProbabilityFunctionLiteral:
    // function_ProbabilityFunctionLiteral=definition;
    public ProbabilityFunctionLiteralElements getProbabilityFunctionLiteralAccess() {
        return pProbabilityFunctionLiteral;
    }

    public ParserRule getProbabilityFunctionLiteralRule() {
        return getProbabilityFunctionLiteralAccess().getRule();
    }

    // // Parenthesis -> LPAREN ifelseExpr RPAREN
    // Parenthesis:
    // LPAREN innerExpression=ifelseExpr RPAREN;
    public ParenthesisElements getParenthesisAccess() {
        return pParenthesis;
    }

    public ParserRule getParenthesisRule() {
        return getParenthesisAccess().getRule();
    }

    // // FunctionLiteral -> ID LPAREN (boolAndExpr (COLON boolAndExpr)* )? RPAREN
    // FunctionLiteral:
    // id=ID LPAREN (parameters_FunctionLiteral+=boolAndExpr (COLON
    // parameters_FunctionLiteral+=boolAndExpr)*)? RPAREN;
    public FunctionLiteralElements getFunctionLiteralAccess() {
        return pFunctionLiteral;
    }

    public ParserRule getFunctionLiteralRule() {
        return getFunctionLiteralAccess().getRule();
    }

    // // Variable -> AbstractNamedReference
    // Variable:
    // id_Variable=AbstractNamedReference;
    public VariableElements getVariableAccess() {
        return pVariable;
    }

    public ParserRule getVariableRule() {
        return getVariableAccess().getRule();
    }

    // // AbstractNamedReference -> VariableReference|NamespaceReference
    // AbstractNamedReference:
    // VariableReference | NamespaceReference;
    public AbstractNamedReferenceElements getAbstractNamedReferenceAccess() {
        return pAbstractNamedReference;
    }

    public ParserRule getAbstractNamedReferenceRule() {
        return getAbstractNamedReferenceAccess().getRule();
    }

    // // VariableReference -> ID
    // VariableReference:
    // referenceName=ID;
    public VariableReferenceElements getVariableReferenceAccess() {
        return pVariableReference;
    }

    public ParserRule getVariableReferenceRule() {
        return getVariableReferenceAccess().getRule();
    }

    // // NamespaceReference -> ID DOT AbstractNamedReference
    // NamespaceReference:
    // referenceName=ID DOT innerReference_NamespaceReference=AbstractNamedReference;
    public NamespaceReferenceElements getNamespaceReferenceAccess() {
        return pNamespaceReference;
    }

    public ParserRule getNamespaceReferenceRule() {
        return getNamespaceReferenceAccess().getRule();
    }

    // // BoolLiteral -> BOOLEAN_KEYWORDS
    // BoolLiteral:
    // value=BOOLEAN_KEYWORDS;
    public BoolLiteralElements getBoolLiteralAccess() {
        return pBoolLiteral;
    }

    public ParserRule getBoolLiteralRule() {
        return getBoolLiteralAccess().getRule();
    }

    // // StringLiteral -> STRING
    // StringLiteral:
    // value=STRING;
    public StringLiteralElements getStringLiteralAccess() {
        return pStringLiteral;
    }

    public ParserRule getStringLiteralRule() {
        return getStringLiteralAccess().getRule();
    }

    // // IntLiteral -> DECINT (SQUARE_PAREN_L Unit SQUARE_PAREN_R)?
    // IntLiteral:
    // value=DECINT (SQUARE_PAREN_L unit=Unit SQUARE_PAREN_R)?;
    public IntLiteralElements getIntLiteralAccess() {
        return pIntLiteral;
    }

    public ParserRule getIntLiteralRule() {
        return getIntLiteralAccess().getRule();
    }

    // //#############################
    // // Units:
    // // Unit -> unitMulti | unitDiv | BaseUnit
    // Unit:
    // unitMulti | unitDiv | BaseUnit;
    public UnitElements getUnitAccess() {
        return pUnit;
    }

    public ParserRule getUnitRule() {
        return getUnitAccess().getRule();
    }

    // // unitDiv -> unitPow ('/' Unit)?
    // unitDiv returns Unit:
    // unitPow ({UnitDivision.dividend=current} "/" divisor=Unit)?;
    public UnitDivElements getUnitDivAccess() {
        return pUnitDiv;
    }

    public ParserRule getUnitDivRule() {
        return getUnitDivAccess().getRule();
    }

    // // unitMulti -> unitPow ('*' Unit)*
    // unitMulti returns Unit:
    // unitPow ({UnitMultiplication.units+=current} "*" units+=Unit)*;
    public UnitMultiElements getUnitMultiAccess() {
        return pUnitMulti;
    }

    public ParserRule getUnitMultiRule() {
        return getUnitMultiAccess().getRule();
    }

    // // unitPow -> (BaseUnit | LPAREN (unitMulti | unitDiv) RPAREN) (POW SIGNED_INT)*
    // unitPow returns Unit:
    // (BaseUnit | LPAREN (unitMulti | unitDiv) RPAREN) ({UnitPower.unit=current} POW
    // exponent=SIGNED_INT)*;
    public UnitPowElements getUnitPowAccess() {
        return pUnitPow;
    }

    public ParserRule getUnitPowRule() {
        return getUnitPowAccess().getRule();
    }

    // // BaseUnit -> UnitNames
    // BaseUnit:
    // name=UnitNames;
    public BaseUnitElements getBaseUnitAccess() {
        return pBaseUnit;
    }

    public ParserRule getBaseUnitRule() {
        return getBaseUnitAccess().getRule();
    }

    // // UnitNames -> "_" | "unitless" | "B" | "s" | "m"
    // enum UnitNames:
    // UNITLESS="_" | UNITLESS="unitless" | BYTE="B" | SECOND="s" | METER="m";
    public UnitNamesElements getUnitNamesAccess() {
        return unknownRuleUnitNames;
    }

    public EnumRule getUnitNamesRule() {
        return getUnitNamesAccess().getRule();
    }

    // //#############################
    // //Probability Functions:
    // // definition -> ProbabilityMassFunction | ProbabilityDensityFunction
    // definition returns ProbabilityFunction:
    // ProbabilityMassFunction | ProbabilityDensityFunction;
    public DefinitionElements getDefinitionAccess() {
        return pDefinition;
    }

    public ParserRule getDefinitionRule() {
        return getDefinitionAccess().getRule();
    }

    // // ProbabilityDensityFunction -> BoxedPDF
    // ProbabilityDensityFunction:
    // BoxedPDF;
    public ProbabilityDensityFunctionElements getProbabilityDensityFunctionAccess() {
        return pProbabilityDensityFunction;
    }

    public ParserRule getProbabilityDensityFunctionRule() {
        return getProbabilityDensityFunctionAccess().getRule();
    }

    // // BoxedPDF -> DOUBLEPDF SQUARE_PAREN_L (real_pdf_sample)+ SQUARE_PAREN_R (SQUARE_PAREN_L
    // Unit SQUARE_PAREN_R)?
    // BoxedPDF:
    // DOUBLEPDF SQUARE_PAREN_L samples+=real_pdf_sample+ SQUARE_PAREN_R (SQUARE_PAREN_L unit=Unit
    // SQUARE_PAREN_R)?;
    public BoxedPDFElements getBoxedPDFAccess() {
        return pBoxedPDF;
    }

    public ParserRule getBoxedPDFRule() {
        return getBoxedPDFAccess().getRule();
    }

    // // ProbabilityMassFunction -> INTPMF SQUARE_PAREN_L (numeric_int_sample)+ SQUARE_PAREN_R
    // (SQUARE_PAREN_L Unit SQUARE_PAREN_R)?
    // // ProbabilityMassFunction -> DOUBLEPMF SQUARE_PAREN_L (numeric_real_sample)+ SQUARE_PAREN_R
    // (SQUARE_PAREN_L Unit SQUARE_PAREN_R)?
    // // ProbabilityMassFunction -> ENUMPMF (LPAREN ORDERED_DEF RPAREN)? SQUARE_PAREN_L
    // (stringsample)+ SQUARE_PAREN_R (SQUARE_PAREN_L Unit SQUARE_PAREN_R)?
    // // ProbabilityMassFunction -> BOOLPMF (LPAREN ORDERED_DEF RPAREN)? SQUARE_PAREN_L
    // (boolsample)+ SQUARE_PAREN_R (SQUARE_PAREN_L Unit SQUARE_PAREN_R)?
    // ProbabilityMassFunction: // Numeric PMF
    // INTPMF SQUARE_PAREN_L samples+=numeric_int_sample+ SQUARE_PAREN_R (SQUARE_PAREN_L unit=Unit
    // SQUARE_PAREN_R)? // Enum PMF
    // // Bool PMF
    // | DOUBLEPMF SQUARE_PAREN_L samples+=numeric_real_sample+ SQUARE_PAREN_R (SQUARE_PAREN_L
    // unit=Unit SQUARE_PAREN_R)? |
    // ENUMPMF (LPAREN orderedDomain?=ORDERED_DEF RPAREN)? SQUARE_PAREN_L samples+=stringsample+
    // SQUARE_PAREN_R | BOOLPMF
    // (LPAREN orderedDomain?=ORDERED_DEF RPAREN)? SQUARE_PAREN_L samples+=boolsample+
    // SQUARE_PAREN_R;
    public ProbabilityMassFunctionElements getProbabilityMassFunctionAccess() {
        return pProbabilityMassFunction;
    }

    public ParserRule getProbabilityMassFunctionRule() {
        return getProbabilityMassFunctionAccess().getRule();
    }

    // // numeric_int_sample -> LPAREN SIGNED_INT SEMI DOUBLE RPAREN
    // numeric_int_sample returns IntSample:
    // LPAREN value= //INT
    // SIGNED_INT SEMI probability= //DOUBLE
    // DOUBLE RPAREN;
    public Numeric_int_sampleElements getNumeric_int_sampleAccess() {
        return pNumeric_int_sample;
    }

    public ParserRule getNumeric_int_sampleRule() {
        return getNumeric_int_sampleAccess().getRule();
    }

    // // numeric_real_sample -> LPAREN SIGNED_NUMBER SEMI DOUBLE RPAREN
    // numeric_real_sample returns DoubleSample:
    // LPAREN value= //DOUBLE
    // SIGNED_NUMBER SEMI probability= //DOUBLE
    // DOUBLE RPAREN;
    public Numeric_real_sampleElements getNumeric_real_sampleAccess() {
        return pNumeric_real_sample;
    }

    public ParserRule getNumeric_real_sampleRule() {
        return getNumeric_real_sampleAccess().getRule();
    }

    // // real_pdf_sample -> LPAREN SIGNED_NUMBER SEMI DOUBLE RPAREN
    // real_pdf_sample returns ContinuousSample:
    // LPAREN value= //DOUBLE
    // SIGNED_NUMBER SEMI probability= //DOUBLE
    // DOUBLE RPAREN;
    public Real_pdf_sampleElements getReal_pdf_sampleAccess() {
        return pReal_pdf_sample;
    }

    public ParserRule getReal_pdf_sampleRule() {
        return getReal_pdf_sampleAccess().getRule();
    }

    // // stringsample -> LPAREN STRING SEMI DOUBLE RPAREN
    // stringsample returns StringSample:
    // LPAREN value=STRING SEMI probability= //DOUBLE
    // DOUBLE RPAREN;
    public StringsampleElements getStringsampleAccess() {
        return pStringsample;
    }

    public ParserRule getStringsampleRule() {
        return getStringsampleAccess().getRule();
    }

    // // boolsample -> LPAREN BOOLEAN_KEYWORDS SEMI DOUBLE RPAREN
    // boolsample returns BoolSample:
    // LPAREN value=BOOLEAN_KEYWORDS SEMI probability= //DOUBLE
    // DOUBLE RPAREN;
    public BoolsampleElements getBoolsampleAccess() {
        return pBoolsample;
    }

    public ParserRule getBoolsampleRule() {
        return getBoolsampleAccess().getRule();
    }

    // //#############################
    // // Datatype rules/terminals:
    // // SIGNED_NUMBER -> ('-')? DOUBLE
    // SIGNED_NUMBER returns ecore::EDouble:
    // "-"? DOUBLE;
    public SIGNED_NUMBERElements getSIGNED_NUMBERAccess() {
        return pSIGNED_NUMBER;
    }

    public ParserRule getSIGNED_NUMBERRule() {
        return getSIGNED_NUMBERAccess().getRule();
    }

    // // SIGNED_INT -> ('-')? DECINT
    // SIGNED_INT returns ecore::EInt:
    // "-"? DECINT;
    public SIGNED_INTElements getSIGNED_INTAccess() {
        return pSIGNED_INT;
    }

    public ParserRule getSIGNED_INTRule() {
        return getSIGNED_INTAccess().getRule();
    }

    // terminal DOUBLE returns ecore::EDouble:
    // DECINT (DOT DIGIT* | (DOT DIGIT*)? ("E" | "e") ("-" | "+")? DECINT);
    public TerminalRule getDOUBLERule() {
        return tDOUBLE;
    }

    // terminal DECINT returns ecore::EInt:
    // "0" | "1".."9" DIGIT*;
    public TerminalRule getDECINTRule() {
        return tDECINT;
    }

    // terminal BOOLEAN_KEYWORDS returns ecore::EBoolean:
    // "false" | "true";
    public TerminalRule getBOOLEAN_KEYWORDSRule() {
        return tBOOLEAN_KEYWORDS;
    }

    // //#############################
    // // terminals:
    // terminal NOT:
    // "NOT";
    public TerminalRule getNOTRule() {
        return tNOT;
    }

    // terminal INTPMF:
    // "IntPMF";
    public TerminalRule getINTPMFRule() {
        return tINTPMF;
    }

    // terminal DOUBLEPMF:
    // "DoublePMF";
    public TerminalRule getDOUBLEPMFRule() {
        return tDOUBLEPMF;
    }

    // terminal ENUMPMF:
    // "EnumPMF";
    public TerminalRule getENUMPMFRule() {
        return tENUMPMF;
    }

    // terminal DOUBLEPDF:
    // "DoublePDF";
    public TerminalRule getDOUBLEPDFRule() {
        return tDOUBLEPDF;
    }

    // terminal BOOLPMF:
    // "BoolPMF";
    public TerminalRule getBOOLPMFRule() {
        return tBOOLPMF;
    }

    // terminal POW:
    // "^";
    public TerminalRule getPOWRule() {
        return tPOW;
    }

    // terminal LPAREN:
    // "(";
    public TerminalRule getLPARENRule() {
        return tLPAREN;
    }

    // terminal RPAREN:
    // ")";
    public TerminalRule getRPARENRule() {
        return tRPAREN;
    }

    // terminal SEMI:
    // ";";
    public TerminalRule getSEMIRule() {
        return tSEMI;
    }

    // terminal COLON:
    // ",";
    public TerminalRule getCOLONRule() {
        return tCOLON;
    }

    // terminal ORDERED_DEF:
    // "ordered";
    public TerminalRule getORDERED_DEFRule() {
        return tORDERED_DEF;
    }

    // terminal SQUARE_PAREN_L:
    // "[";
    public TerminalRule getSQUARE_PAREN_LRule() {
        return tSQUARE_PAREN_L;
    }

    // terminal SQUARE_PAREN_R:
    // "]";
    public TerminalRule getSQUARE_PAREN_RRule() {
        return tSQUARE_PAREN_R;
    }

    // terminal fragment DIGIT:
    // "0".."9";
    public TerminalRule getDIGITRule() {
        return tDIGIT;
    }

    // terminal DOT:
    // ".";
    public TerminalRule getDOTRule() {
        return tDOT;
    }

    // terminal CONDDELIMITER:
    // "?";
    public TerminalRule getCONDDELIMITERRule() {
        return tCONDDELIMITER;
    }

    // terminal ELSEDELIMITER:
    // ":";
    public TerminalRule getELSEDELIMITERRule() {
        return tELSEDELIMITER;
    }

    // //#############################
    // //adapted from xtexts terminals:
    // terminal ID:
    // ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
    public TerminalRule getIDRule() {
        return tID;
    }

    // terminal STRING:
    // "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" |
    // "\'" ("\\" ("b" | "t" |
    // "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\'";
    public TerminalRule getSTRINGRule() {
        return tSTRING;
    }

    // //multi-line
    // terminal ML_COMMENT:
    // "/ *"->"* /";
    public TerminalRule getML_COMMENTRule() {
        return tML_COMMENT;
    }

    // //single-line comment
    // terminal SL_COMMENT:
    // "//" !("\n" | "\r")* ("\r"? "\n")?;
    public TerminalRule getSL_COMMENTRule() {
        return tSL_COMMENT;
    }

    // //whitespaces
    // terminal WS:
    // (" " | "\t" | "\r" | "\n")+;
    public TerminalRule getWSRule() {
        return tWS;
    }

    // //############################# terminal ANY_OTHER:
    // .;
    public TerminalRule getANY_OTHERRule() {
        return tANY_OTHER;
    }
}
