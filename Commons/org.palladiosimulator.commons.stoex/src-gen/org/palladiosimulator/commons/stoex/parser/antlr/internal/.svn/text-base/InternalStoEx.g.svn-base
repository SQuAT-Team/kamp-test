/*
 * generated by Xtext
 */
grammar InternalStoEx;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.palladiosimulator.commons.stoex.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.palladiosimulator.commons.stoex.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.palladiosimulator.commons.stoex.services.StoExGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private StoExGrammarAccess grammarAccess;
 	
    public InternalStoExParser(TokenStream input, StoExGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "expression";	
   	}
   	
   	@Override
   	protected StoExGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleexpression=ruleexpression 
	 { $current=$iv_ruleexpression.current; } 
	 EOF 
;

// Rule expression
ruleexpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getIfelseExprParserRuleCall()); 
    }
    this_ifelseExpr_0=ruleifelseExpr
    { 
        $current = $this_ifelseExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleifelseExpr
entryRuleifelseExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfelseExprRule()); }
	 iv_ruleifelseExpr=ruleifelseExpr 
	 { $current=$iv_ruleifelseExpr.current; } 
	 EOF 
;

// Rule ifelseExpr
ruleifelseExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIfelseExprAccess().getBoolAndExprParserRuleCall_0()); 
    }
    this_boolAndExpr_0=ruleboolAndExpr
    { 
        $current = $this_boolAndExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getIfelseExprAccess().getIfElseExpressionConditionExpressionAction_1_0(),
            $current);
    }
)this_CONDDELIMITER_2=RULE_CONDDELIMITER
    { 
    newLeafNode(this_CONDDELIMITER_2, grammarAccess.getIfelseExprAccess().getCONDDELIMITERTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfelseExprAccess().getIfExpressionBoolAndExprParserRuleCall_1_2_0()); 
	    }
		lv_ifExpression_3_0=ruleboolAndExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfelseExprRule());
	        }
       		set(
       			$current, 
       			"ifExpression",
        		lv_ifExpression_3_0, 
        		"boolAndExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)this_ELSEDELIMITER_4=RULE_ELSEDELIMITER
    { 
    newLeafNode(this_ELSEDELIMITER_4, grammarAccess.getIfelseExprAccess().getELSEDELIMITERTerminalRuleCall_1_3()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfelseExprAccess().getElseExpressionBoolAndExprParserRuleCall_1_4_0()); 
	    }
		lv_elseExpression_5_0=ruleboolAndExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfelseExprRule());
	        }
       		set(
       			$current, 
       			"elseExpression",
        		lv_elseExpression_5_0, 
        		"boolAndExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;







// Entry rule entryRuleboolAndExpr
entryRuleboolAndExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolAndExprRule()); }
	 iv_ruleboolAndExpr=ruleboolAndExpr 
	 { $current=$iv_ruleboolAndExpr.current; } 
	 EOF 
;

// Rule boolAndExpr
ruleboolAndExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBoolAndExprAccess().getBoolOrExprParserRuleCall_0()); 
    }
    this_boolOrExpr_0=ruleboolOrExpr
    { 
        $current = $this_boolOrExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBoolAndExprAccess().getBooleanOperatorExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBoolAndExprAccess().getOperationAndoperationEnumRuleCall_1_1_0()); 
	    }
		lv_operation_2_0=ruleandoperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBoolAndExprRule());
	        }
       		set(
       			$current, 
       			"operation",
        		lv_operation_2_0, 
        		"andoperation");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBoolAndExprAccess().getRightBoolOrExprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleboolOrExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBoolAndExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"boolOrExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleboolOrExpr
entryRuleboolOrExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolOrExprRule()); }
	 iv_ruleboolOrExpr=ruleboolOrExpr 
	 { $current=$iv_ruleboolOrExpr.current; } 
	 EOF 
;

// Rule boolOrExpr
ruleboolOrExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBoolOrExprAccess().getCompareExprParserRuleCall_0()); 
    }
    this_compareExpr_0=rulecompareExpr
    { 
        $current = $this_compareExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBoolOrExprAccess().getBooleanOperatorExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBoolOrExprAccess().getOperationOroperationsEnumRuleCall_1_1_0()); 
	    }
		lv_operation_2_0=ruleoroperations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBoolOrExprRule());
	        }
       		set(
       			$current, 
       			"operation",
        		lv_operation_2_0, 
        		"oroperations");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBoolOrExprAccess().getRightCompareExprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulecompareExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBoolOrExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"compareExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulecompareExpr
entryRulecompareExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompareExprRule()); }
	 iv_rulecompareExpr=rulecompareExpr 
	 { $current=$iv_rulecompareExpr.current; } 
	 EOF 
;

// Rule compareExpr
rulecompareExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCompareExprAccess().getSumExprParserRuleCall_0()); 
    }
    this_sumExpr_0=rulesumExpr
    { 
        $current = $this_sumExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getCompareExprAccess().getCompareExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareExprAccess().getOperationCompareOperationsEnumRuleCall_1_1_0()); 
	    }
		lv_operation_2_0=ruleCompareOperations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareExprRule());
	        }
       		set(
       			$current, 
       			"operation",
        		lv_operation_2_0, 
        		"CompareOperations");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareExprAccess().getRightSumExprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulesumExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"sumExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulesumExpr
entryRulesumExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSumExprRule()); }
	 iv_rulesumExpr=rulesumExpr 
	 { $current=$iv_rulesumExpr.current; } 
	 EOF 
;

// Rule sumExpr
rulesumExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSumExprAccess().getProdExprParserRuleCall_0()); 
    }
    this_prodExpr_0=ruleprodExpr
    { 
        $current = $this_prodExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getSumExprAccess().getTermExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSumExprAccess().getOperationTermOperationsEnumRuleCall_1_1_0()); 
	    }
		lv_operation_2_0=ruleTermOperations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSumExprRule());
	        }
       		set(
       			$current, 
       			"operation",
        		lv_operation_2_0, 
        		"TermOperations");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSumExprAccess().getRightProdExprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleprodExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSumExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"prodExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleprodExpr
entryRuleprodExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProdExprRule()); }
	 iv_ruleprodExpr=ruleprodExpr 
	 { $current=$iv_ruleprodExpr.current; } 
	 EOF 
;

// Rule prodExpr
ruleprodExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProdExprAccess().getPowExprParserRuleCall_0()); 
    }
    this_powExpr_0=rulepowExpr
    { 
        $current = $this_powExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getProdExprAccess().getProductExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProdExprAccess().getOperationProductOperationsEnumRuleCall_1_1_0()); 
	    }
		lv_operation_2_0=ruleProductOperations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProdExprRule());
	        }
       		set(
       			$current, 
       			"operation",
        		lv_operation_2_0, 
        		"ProductOperations");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProdExprAccess().getRightPowExprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulepowExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProdExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"powExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulepowExpr
entryRulepowExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPowExprRule()); }
	 iv_rulepowExpr=rulepowExpr 
	 { $current=$iv_rulepowExpr.current; } 
	 EOF 
;

// Rule powExpr
rulepowExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPowExprAccess().getUnaryExprParserRuleCall_0()); 
    }
    this_unaryExpr_0=ruleunaryExpr
    { 
        $current = $this_unaryExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPowExprAccess().getPowerExpressionBaseAction_1_0(),
            $current);
    }
)this_POW_2=RULE_POW
    { 
    newLeafNode(this_POW_2, grammarAccess.getPowExprAccess().getPOWTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowExprAccess().getExponentUnaryExprParserRuleCall_1_2_0()); 
	    }
		lv_exponent_3_0=ruleunaryExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowExprRule());
	        }
       		set(
       			$current, 
       			"exponent",
        		lv_exponent_3_0, 
        		"unaryExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleunaryExpr
entryRuleunaryExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExprRule()); }
	 iv_ruleunaryExpr=ruleunaryExpr 
	 { $current=$iv_ruleunaryExpr.current; } 
	 EOF 
;

// Rule unaryExpr
ruleunaryExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnaryExprAccess().getNegativeExpressionParserRuleCall_0()); 
    }
    this_NegativeExpression_0=ruleNegativeExpression
    { 
        $current = $this_NegativeExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnaryExprAccess().getNotExpressionParserRuleCall_1()); 
    }
    this_NotExpression_1=ruleNotExpression
    { 
        $current = $this_NotExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnaryExprAccess().getAtomParserRuleCall_2()); 
    }
    this_atom_2=ruleatom
    { 
        $current = $this_atom_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNotExpression
entryRuleNotExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotExpressionRule()); }
	 iv_ruleNotExpression=ruleNotExpression 
	 { $current=$iv_ruleNotExpression.current; } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_NOT_0=RULE_NOT
    { 
    newLeafNode(this_NOT_0, grammarAccess.getNotExpressionAccess().getNOTTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNotExpressionAccess().getInnerUnaryExprParserRuleCall_1_0()); 
	    }
		lv_inner_1_0=ruleunaryExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNotExpressionRule());
	        }
       		set(
       			$current, 
       			"inner",
        		lv_inner_1_0, 
        		"unaryExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNegativeExpression
entryRuleNegativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNegativeExpressionRule()); }
	 iv_ruleNegativeExpression=ruleNegativeExpression 
	 { $current=$iv_ruleNegativeExpression.current; } 
	 EOF 
;

// Rule NegativeExpression
ruleNegativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='-' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNegativeExpressionAccess().getHyphenMinusKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNegativeExpressionAccess().getInnerUnaryExprParserRuleCall_1_0()); 
	    }
		lv_inner_1_0=ruleunaryExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNegativeExpressionRule());
	        }
       		set(
       			$current, 
       			"inner",
        		lv_inner_1_0, 
        		"unaryExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleatom
entryRuleatom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	 iv_ruleatom=ruleatom 
	 { $current=$iv_ruleatom.current; } 
	 EOF 
;

// Rule atom
ruleatom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomAccess().getIntLiteralParserRuleCall_0()); 
    }
    this_IntLiteral_0=ruleIntLiteral
    { 
        $current = $this_IntLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomAccess().getDoubleLiteralParserRuleCall_1()); 
    }
    this_DoubleLiteral_1=ruleDoubleLiteral
    { 
        $current = $this_DoubleLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomAccess().getStringLiteralParserRuleCall_2()); 
    }
    this_StringLiteral_2=ruleStringLiteral
    { 
        $current = $this_StringLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomAccess().getBoolLiteralParserRuleCall_3()); 
    }
    this_BoolLiteral_3=ruleBoolLiteral
    { 
        $current = $this_BoolLiteral_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomAccess().getFunctionLiteralParserRuleCall_4()); 
    }
    this_FunctionLiteral_4=ruleFunctionLiteral
    { 
        $current = $this_FunctionLiteral_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomAccess().getVariableParserRuleCall_5()); 
    }
    this_Variable_5=ruleVariable
    { 
        $current = $this_Variable_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomAccess().getParenthesisParserRuleCall_6()); 
    }
    this_Parenthesis_6=ruleParenthesis
    { 
        $current = $this_Parenthesis_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomAccess().getProbabilityFunctionLiteralParserRuleCall_7()); 
    }
    this_ProbabilityFunctionLiteral_7=ruleProbabilityFunctionLiteral
    { 
        $current = $this_ProbabilityFunctionLiteral_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDoubleLiteral
entryRuleDoubleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoubleLiteralRule()); }
	 iv_ruleDoubleLiteral=ruleDoubleLiteral 
	 { $current=$iv_ruleDoubleLiteral.current; } 
	 EOF 
;

// Rule DoubleLiteral
ruleDoubleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_value_0_0=RULE_DOUBLE
		{
			newLeafNode(lv_value_0_0, grammarAccess.getDoubleLiteralAccess().getValueDOUBLETerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDoubleLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"DOUBLE");
	    }

)
)(this_SQUARE_PAREN_L_1=RULE_SQUARE_PAREN_L
    { 
    newLeafNode(this_SQUARE_PAREN_L_1, grammarAccess.getDoubleLiteralAccess().getSQUARE_PAREN_LTerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoubleLiteralAccess().getUnitUnitParserRuleCall_1_1_0()); 
	    }
		lv_unit_2_0=ruleUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoubleLiteralRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_2_0, 
        		"Unit");
	        afterParserOrEnumRuleCall();
	    }

)
)this_SQUARE_PAREN_R_3=RULE_SQUARE_PAREN_R
    { 
    newLeafNode(this_SQUARE_PAREN_R_3, grammarAccess.getDoubleLiteralAccess().getSQUARE_PAREN_RTerminalRuleCall_1_2()); 
    }
)?)
;





// Entry rule entryRuleProbabilityFunctionLiteral
entryRuleProbabilityFunctionLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProbabilityFunctionLiteralRule()); }
	 iv_ruleProbabilityFunctionLiteral=ruleProbabilityFunctionLiteral 
	 { $current=$iv_ruleProbabilityFunctionLiteral.current; } 
	 EOF 
;

// Rule ProbabilityFunctionLiteral
ruleProbabilityFunctionLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getProbabilityFunctionLiteralAccess().getFunction_ProbabilityFunctionLiteralDefinitionParserRuleCall_0()); 
	    }
		lv_function_ProbabilityFunctionLiteral_0_0=ruledefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProbabilityFunctionLiteralRule());
	        }
       		set(
       			$current, 
       			"function_ProbabilityFunctionLiteral",
        		lv_function_ProbabilityFunctionLiteral_0_0, 
        		"definition");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleParenthesis
entryRuleParenthesis returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenthesisRule()); }
	 iv_ruleParenthesis=ruleParenthesis 
	 { $current=$iv_ruleParenthesis.current; } 
	 EOF 
;

// Rule Parenthesis
ruleParenthesis returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_LPAREN_0=RULE_LPAREN
    { 
    newLeafNode(this_LPAREN_0, grammarAccess.getParenthesisAccess().getLPARENTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParenthesisAccess().getInnerExpressionIfelseExprParserRuleCall_1_0()); 
	    }
		lv_innerExpression_1_0=ruleifelseExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParenthesisRule());
	        }
       		set(
       			$current, 
       			"innerExpression",
        		lv_innerExpression_1_0, 
        		"ifelseExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RPAREN_2=RULE_RPAREN
    { 
    newLeafNode(this_RPAREN_2, grammarAccess.getParenthesisAccess().getRPARENTerminalRuleCall_2()); 
    }
)
;





// Entry rule entryRuleFunctionLiteral
entryRuleFunctionLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionLiteralRule()); }
	 iv_ruleFunctionLiteral=ruleFunctionLiteral 
	 { $current=$iv_ruleFunctionLiteral.current; } 
	 EOF 
;

// Rule FunctionLiteral
ruleFunctionLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getFunctionLiteralAccess().getIdIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)this_LPAREN_1=RULE_LPAREN
    { 
    newLeafNode(this_LPAREN_1, grammarAccess.getFunctionLiteralAccess().getLPARENTerminalRuleCall_1()); 
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionLiteralAccess().getParameters_FunctionLiteralBoolAndExprParserRuleCall_2_0_0()); 
	    }
		lv_parameters_FunctionLiteral_2_0=ruleboolAndExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionLiteralRule());
	        }
       		add(
       			$current, 
       			"parameters_FunctionLiteral",
        		lv_parameters_FunctionLiteral_2_0, 
        		"boolAndExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COLON_3=RULE_COLON
    { 
    newLeafNode(this_COLON_3, grammarAccess.getFunctionLiteralAccess().getCOLONTerminalRuleCall_2_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionLiteralAccess().getParameters_FunctionLiteralBoolAndExprParserRuleCall_2_1_1_0()); 
	    }
		lv_parameters_FunctionLiteral_4_0=ruleboolAndExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionLiteralRule());
	        }
       		add(
       			$current, 
       			"parameters_FunctionLiteral",
        		lv_parameters_FunctionLiteral_4_0, 
        		"boolAndExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?this_RPAREN_5=RULE_RPAREN
    { 
    newLeafNode(this_RPAREN_5, grammarAccess.getFunctionLiteralAccess().getRPARENTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getId_VariableAbstractNamedReferenceParserRuleCall_0()); 
	    }
		lv_id_Variable_0_0=ruleAbstractNamedReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		set(
       			$current, 
       			"id_Variable",
        		lv_id_Variable_0_0, 
        		"AbstractNamedReference");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleAbstractNamedReference
entryRuleAbstractNamedReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractNamedReferenceRule()); }
	 iv_ruleAbstractNamedReference=ruleAbstractNamedReference 
	 { $current=$iv_ruleAbstractNamedReference.current; } 
	 EOF 
;

// Rule AbstractNamedReference
ruleAbstractNamedReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAbstractNamedReferenceAccess().getVariableReferenceParserRuleCall_0()); 
    }
    this_VariableReference_0=ruleVariableReference
    { 
        $current = $this_VariableReference_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAbstractNamedReferenceAccess().getNamespaceReferenceParserRuleCall_1()); 
    }
    this_NamespaceReference_1=ruleNamespaceReference
    { 
        $current = $this_NamespaceReference_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVariableReference
entryRuleVariableReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableReferenceRule()); }
	 iv_ruleVariableReference=ruleVariableReference 
	 { $current=$iv_ruleVariableReference.current; } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_referenceName_0_0=RULE_ID
		{
			newLeafNode(lv_referenceName_0_0, grammarAccess.getVariableReferenceAccess().getReferenceNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableReferenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"referenceName",
        		lv_referenceName_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleNamespaceReference
entryRuleNamespaceReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamespaceReferenceRule()); }
	 iv_ruleNamespaceReference=ruleNamespaceReference 
	 { $current=$iv_ruleNamespaceReference.current; } 
	 EOF 
;

// Rule NamespaceReference
ruleNamespaceReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_referenceName_0_0=RULE_ID
		{
			newLeafNode(lv_referenceName_0_0, grammarAccess.getNamespaceReferenceAccess().getReferenceNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNamespaceReferenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"referenceName",
        		lv_referenceName_0_0, 
        		"ID");
	    }

)
)this_DOT_1=RULE_DOT
    { 
    newLeafNode(this_DOT_1, grammarAccess.getNamespaceReferenceAccess().getDOTTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNamespaceReferenceAccess().getInnerReference_NamespaceReferenceAbstractNamedReferenceParserRuleCall_2_0()); 
	    }
		lv_innerReference_NamespaceReference_2_0=ruleAbstractNamedReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamespaceReferenceRule());
	        }
       		set(
       			$current, 
       			"innerReference_NamespaceReference",
        		lv_innerReference_NamespaceReference_2_0, 
        		"AbstractNamedReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBoolLiteral
entryRuleBoolLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolLiteralRule()); }
	 iv_ruleBoolLiteral=ruleBoolLiteral 
	 { $current=$iv_ruleBoolLiteral.current; } 
	 EOF 
;

// Rule BoolLiteral
ruleBoolLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_BOOLEAN_KEYWORDS
		{
			newLeafNode(lv_value_0_0, grammarAccess.getBoolLiteralAccess().getValueBOOLEAN_KEYWORDSTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBoolLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"BOOLEAN_KEYWORDS");
	    }

)
)
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleIntLiteral
entryRuleIntLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntLiteralRule()); }
	 iv_ruleIntLiteral=ruleIntLiteral 
	 { $current=$iv_ruleIntLiteral.current; } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_value_0_0=RULE_DECINT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getIntLiteralAccess().getValueDECINTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"DECINT");
	    }

)
)(this_SQUARE_PAREN_L_1=RULE_SQUARE_PAREN_L
    { 
    newLeafNode(this_SQUARE_PAREN_L_1, grammarAccess.getIntLiteralAccess().getSQUARE_PAREN_LTerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntLiteralAccess().getUnitUnitParserRuleCall_1_1_0()); 
	    }
		lv_unit_2_0=ruleUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntLiteralRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_2_0, 
        		"Unit");
	        afterParserOrEnumRuleCall();
	    }

)
)this_SQUARE_PAREN_R_3=RULE_SQUARE_PAREN_R
    { 
    newLeafNode(this_SQUARE_PAREN_R_3, grammarAccess.getIntLiteralAccess().getSQUARE_PAREN_RTerminalRuleCall_1_2()); 
    }
)?)
;





// Entry rule entryRuleUnit
entryRuleUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnitRule()); }
	 iv_ruleUnit=ruleUnit 
	 { $current=$iv_ruleUnit.current; } 
	 EOF 
;

// Rule Unit
ruleUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnitAccess().getUnitMultiParserRuleCall_0()); 
    }
    this_unitMulti_0=ruleunitMulti
    { 
        $current = $this_unitMulti_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnitAccess().getUnitDivParserRuleCall_1()); 
    }
    this_unitDiv_1=ruleunitDiv
    { 
        $current = $this_unitDiv_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnitAccess().getBaseUnitParserRuleCall_2()); 
    }
    this_BaseUnit_2=ruleBaseUnit
    { 
        $current = $this_BaseUnit_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleunitDiv
entryRuleunitDiv returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnitDivRule()); }
	 iv_ruleunitDiv=ruleunitDiv 
	 { $current=$iv_ruleunitDiv.current; } 
	 EOF 
;

// Rule unitDiv
ruleunitDiv returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnitDivAccess().getUnitPowParserRuleCall_0()); 
    }
    this_unitPow_0=ruleunitPow
    { 
        $current = $this_unitPow_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getUnitDivAccess().getUnitDivisionDividendAction_1_0(),
            $current);
    }
)	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnitDivAccess().getSolidusKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnitDivAccess().getDivisorUnitParserRuleCall_1_2_0()); 
	    }
		lv_divisor_3_0=ruleUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitDivRule());
	        }
       		set(
       			$current, 
       			"divisor",
        		lv_divisor_3_0, 
        		"Unit");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleunitMulti
entryRuleunitMulti returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnitMultiRule()); }
	 iv_ruleunitMulti=ruleunitMulti 
	 { $current=$iv_ruleunitMulti.current; } 
	 EOF 
;

// Rule unitMulti
ruleunitMulti returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnitMultiAccess().getUnitPowParserRuleCall_0()); 
    }
    this_unitPow_0=ruleunitPow
    { 
        $current = $this_unitPow_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getUnitMultiAccess().getUnitMultiplicationUnitsAction_1_0(),
            $current);
    }
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnitMultiAccess().getAsteriskKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnitMultiAccess().getUnitsUnitParserRuleCall_1_2_0()); 
	    }
		lv_units_3_0=ruleUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitMultiRule());
	        }
       		add(
       			$current, 
       			"units",
        		lv_units_3_0, 
        		"Unit");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleunitPow
entryRuleunitPow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnitPowRule()); }
	 iv_ruleunitPow=ruleunitPow 
	 { $current=$iv_ruleunitPow.current; } 
	 EOF 
;

// Rule unitPow
ruleunitPow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnitPowAccess().getBaseUnitParserRuleCall_0_0()); 
    }
    this_BaseUnit_0=ruleBaseUnit
    { 
        $current = $this_BaseUnit_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(this_LPAREN_1=RULE_LPAREN
    { 
    newLeafNode(this_LPAREN_1, grammarAccess.getUnitPowAccess().getLPARENTerminalRuleCall_0_1_0()); 
    }
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnitPowAccess().getUnitMultiParserRuleCall_0_1_1_0()); 
    }
    this_unitMulti_2=ruleunitMulti
    { 
        $current = $this_unitMulti_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnitPowAccess().getUnitDivParserRuleCall_0_1_1_1()); 
    }
    this_unitDiv_3=ruleunitDiv
    { 
        $current = $this_unitDiv_3.current; 
        afterParserOrEnumRuleCall();
    }
)this_RPAREN_4=RULE_RPAREN
    { 
    newLeafNode(this_RPAREN_4, grammarAccess.getUnitPowAccess().getRPARENTerminalRuleCall_0_1_2()); 
    }
))((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getUnitPowAccess().getUnitPowerUnitAction_1_0(),
            $current);
    }
)this_POW_6=RULE_POW
    { 
    newLeafNode(this_POW_6, grammarAccess.getUnitPowAccess().getPOWTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnitPowAccess().getExponentSIGNED_INTParserRuleCall_1_2_0()); 
	    }
		lv_exponent_7_0=ruleSIGNED_INT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitPowRule());
	        }
       		set(
       			$current, 
       			"exponent",
        		lv_exponent_7_0, 
        		"SIGNED_INT");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBaseUnit
entryRuleBaseUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBaseUnitRule()); }
	 iv_ruleBaseUnit=ruleBaseUnit 
	 { $current=$iv_ruleBaseUnit.current; } 
	 EOF 
;

// Rule BaseUnit
ruleBaseUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getBaseUnitAccess().getNameUnitNamesEnumRuleCall_0()); 
	    }
		lv_name_0_0=ruleUnitNames		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBaseUnitRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"UnitNames");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuledefinition
entryRuledefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	 iv_ruledefinition=ruledefinition 
	 { $current=$iv_ruledefinition.current; } 
	 EOF 
;

// Rule definition
ruledefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDefinitionAccess().getProbabilityMassFunctionParserRuleCall_0()); 
    }
    this_ProbabilityMassFunction_0=ruleProbabilityMassFunction
    { 
        $current = $this_ProbabilityMassFunction_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDefinitionAccess().getProbabilityDensityFunctionParserRuleCall_1()); 
    }
    this_ProbabilityDensityFunction_1=ruleProbabilityDensityFunction
    { 
        $current = $this_ProbabilityDensityFunction_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleProbabilityDensityFunction
entryRuleProbabilityDensityFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProbabilityDensityFunctionRule()); }
	 iv_ruleProbabilityDensityFunction=ruleProbabilityDensityFunction 
	 { $current=$iv_ruleProbabilityDensityFunction.current; } 
	 EOF 
;

// Rule ProbabilityDensityFunction
ruleProbabilityDensityFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProbabilityDensityFunctionAccess().getBoxedPDFParserRuleCall()); 
    }
    this_BoxedPDF_0=ruleBoxedPDF
    { 
        $current = $this_BoxedPDF_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleBoxedPDF
entryRuleBoxedPDF returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoxedPDFRule()); }
	 iv_ruleBoxedPDF=ruleBoxedPDF 
	 { $current=$iv_ruleBoxedPDF.current; } 
	 EOF 
;

// Rule BoxedPDF
ruleBoxedPDF returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_DOUBLEPDF_0=RULE_DOUBLEPDF
    { 
    newLeafNode(this_DOUBLEPDF_0, grammarAccess.getBoxedPDFAccess().getDOUBLEPDFTerminalRuleCall_0()); 
    }
this_SQUARE_PAREN_L_1=RULE_SQUARE_PAREN_L
    { 
    newLeafNode(this_SQUARE_PAREN_L_1, grammarAccess.getBoxedPDFAccess().getSQUARE_PAREN_LTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBoxedPDFAccess().getSamplesReal_pdf_sampleParserRuleCall_2_0()); 
	    }
		lv_samples_2_0=rulereal_pdf_sample		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBoxedPDFRule());
	        }
       		add(
       			$current, 
       			"samples",
        		lv_samples_2_0, 
        		"real_pdf_sample");
	        afterParserOrEnumRuleCall();
	    }

)
)+this_SQUARE_PAREN_R_3=RULE_SQUARE_PAREN_R
    { 
    newLeafNode(this_SQUARE_PAREN_R_3, grammarAccess.getBoxedPDFAccess().getSQUARE_PAREN_RTerminalRuleCall_3()); 
    }
(this_SQUARE_PAREN_L_4=RULE_SQUARE_PAREN_L
    { 
    newLeafNode(this_SQUARE_PAREN_L_4, grammarAccess.getBoxedPDFAccess().getSQUARE_PAREN_LTerminalRuleCall_4_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBoxedPDFAccess().getUnitUnitParserRuleCall_4_1_0()); 
	    }
		lv_unit_5_0=ruleUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBoxedPDFRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_5_0, 
        		"Unit");
	        afterParserOrEnumRuleCall();
	    }

)
)this_SQUARE_PAREN_R_6=RULE_SQUARE_PAREN_R
    { 
    newLeafNode(this_SQUARE_PAREN_R_6, grammarAccess.getBoxedPDFAccess().getSQUARE_PAREN_RTerminalRuleCall_4_2()); 
    }
)?)
;





// Entry rule entryRuleProbabilityMassFunction
entryRuleProbabilityMassFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProbabilityMassFunctionRule()); }
	 iv_ruleProbabilityMassFunction=ruleProbabilityMassFunction 
	 { $current=$iv_ruleProbabilityMassFunction.current; } 
	 EOF 
;

// Rule ProbabilityMassFunction
ruleProbabilityMassFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((this_INTPMF_0=RULE_INTPMF
    { 
    newLeafNode(this_INTPMF_0, grammarAccess.getProbabilityMassFunctionAccess().getINTPMFTerminalRuleCall_0_0()); 
    }
this_SQUARE_PAREN_L_1=RULE_SQUARE_PAREN_L
    { 
    newLeafNode(this_SQUARE_PAREN_L_1, grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_LTerminalRuleCall_0_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProbabilityMassFunctionAccess().getSamplesNumeric_int_sampleParserRuleCall_0_2_0()); 
	    }
		lv_samples_2_0=rulenumeric_int_sample		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProbabilityMassFunctionRule());
	        }
       		add(
       			$current, 
       			"samples",
        		lv_samples_2_0, 
        		"numeric_int_sample");
	        afterParserOrEnumRuleCall();
	    }

)
)+this_SQUARE_PAREN_R_3=RULE_SQUARE_PAREN_R
    { 
    newLeafNode(this_SQUARE_PAREN_R_3, grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_RTerminalRuleCall_0_3()); 
    }
(this_SQUARE_PAREN_L_4=RULE_SQUARE_PAREN_L
    { 
    newLeafNode(this_SQUARE_PAREN_L_4, grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_LTerminalRuleCall_0_4_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProbabilityMassFunctionAccess().getUnitUnitParserRuleCall_0_4_1_0()); 
	    }
		lv_unit_5_0=ruleUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProbabilityMassFunctionRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_5_0, 
        		"Unit");
	        afterParserOrEnumRuleCall();
	    }

)
)this_SQUARE_PAREN_R_6=RULE_SQUARE_PAREN_R
    { 
    newLeafNode(this_SQUARE_PAREN_R_6, grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_RTerminalRuleCall_0_4_2()); 
    }
)?)
    |(this_DOUBLEPMF_7=RULE_DOUBLEPMF
    { 
    newLeafNode(this_DOUBLEPMF_7, grammarAccess.getProbabilityMassFunctionAccess().getDOUBLEPMFTerminalRuleCall_1_0()); 
    }
this_SQUARE_PAREN_L_8=RULE_SQUARE_PAREN_L
    { 
    newLeafNode(this_SQUARE_PAREN_L_8, grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_LTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProbabilityMassFunctionAccess().getSamplesNumeric_real_sampleParserRuleCall_1_2_0()); 
	    }
		lv_samples_9_0=rulenumeric_real_sample		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProbabilityMassFunctionRule());
	        }
       		add(
       			$current, 
       			"samples",
        		lv_samples_9_0, 
        		"numeric_real_sample");
	        afterParserOrEnumRuleCall();
	    }

)
)+this_SQUARE_PAREN_R_10=RULE_SQUARE_PAREN_R
    { 
    newLeafNode(this_SQUARE_PAREN_R_10, grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_RTerminalRuleCall_1_3()); 
    }
(this_SQUARE_PAREN_L_11=RULE_SQUARE_PAREN_L
    { 
    newLeafNode(this_SQUARE_PAREN_L_11, grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_LTerminalRuleCall_1_4_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProbabilityMassFunctionAccess().getUnitUnitParserRuleCall_1_4_1_0()); 
	    }
		lv_unit_12_0=ruleUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProbabilityMassFunctionRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_12_0, 
        		"Unit");
	        afterParserOrEnumRuleCall();
	    }

)
)this_SQUARE_PAREN_R_13=RULE_SQUARE_PAREN_R
    { 
    newLeafNode(this_SQUARE_PAREN_R_13, grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_RTerminalRuleCall_1_4_2()); 
    }
)?)
    |(this_ENUMPMF_14=RULE_ENUMPMF
    { 
    newLeafNode(this_ENUMPMF_14, grammarAccess.getProbabilityMassFunctionAccess().getENUMPMFTerminalRuleCall_2_0()); 
    }
(this_LPAREN_15=RULE_LPAREN
    { 
    newLeafNode(this_LPAREN_15, grammarAccess.getProbabilityMassFunctionAccess().getLPARENTerminalRuleCall_2_1_0()); 
    }
(
(
		lv_orderedDomain_16_0=RULE_ORDERED_DEF
		{
			newLeafNode(lv_orderedDomain_16_0, grammarAccess.getProbabilityMassFunctionAccess().getOrderedDomainORDERED_DEFTerminalRuleCall_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProbabilityMassFunctionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"orderedDomain",
        		true, 
        		"ORDERED_DEF");
	    }

)
)this_RPAREN_17=RULE_RPAREN
    { 
    newLeafNode(this_RPAREN_17, grammarAccess.getProbabilityMassFunctionAccess().getRPARENTerminalRuleCall_2_1_2()); 
    }
)?this_SQUARE_PAREN_L_18=RULE_SQUARE_PAREN_L
    { 
    newLeafNode(this_SQUARE_PAREN_L_18, grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_LTerminalRuleCall_2_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProbabilityMassFunctionAccess().getSamplesStringsampleParserRuleCall_2_3_0()); 
	    }
		lv_samples_19_0=rulestringsample		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProbabilityMassFunctionRule());
	        }
       		add(
       			$current, 
       			"samples",
        		lv_samples_19_0, 
        		"stringsample");
	        afterParserOrEnumRuleCall();
	    }

)
)+this_SQUARE_PAREN_R_20=RULE_SQUARE_PAREN_R
    { 
    newLeafNode(this_SQUARE_PAREN_R_20, grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_RTerminalRuleCall_2_4()); 
    }
)
    |(this_BOOLPMF_21=RULE_BOOLPMF
    { 
    newLeafNode(this_BOOLPMF_21, grammarAccess.getProbabilityMassFunctionAccess().getBOOLPMFTerminalRuleCall_3_0()); 
    }
(this_LPAREN_22=RULE_LPAREN
    { 
    newLeafNode(this_LPAREN_22, grammarAccess.getProbabilityMassFunctionAccess().getLPARENTerminalRuleCall_3_1_0()); 
    }
(
(
		lv_orderedDomain_23_0=RULE_ORDERED_DEF
		{
			newLeafNode(lv_orderedDomain_23_0, grammarAccess.getProbabilityMassFunctionAccess().getOrderedDomainORDERED_DEFTerminalRuleCall_3_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProbabilityMassFunctionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"orderedDomain",
        		true, 
        		"ORDERED_DEF");
	    }

)
)this_RPAREN_24=RULE_RPAREN
    { 
    newLeafNode(this_RPAREN_24, grammarAccess.getProbabilityMassFunctionAccess().getRPARENTerminalRuleCall_3_1_2()); 
    }
)?this_SQUARE_PAREN_L_25=RULE_SQUARE_PAREN_L
    { 
    newLeafNode(this_SQUARE_PAREN_L_25, grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_LTerminalRuleCall_3_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProbabilityMassFunctionAccess().getSamplesBoolsampleParserRuleCall_3_3_0()); 
	    }
		lv_samples_26_0=ruleboolsample		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProbabilityMassFunctionRule());
	        }
       		add(
       			$current, 
       			"samples",
        		lv_samples_26_0, 
        		"boolsample");
	        afterParserOrEnumRuleCall();
	    }

)
)+this_SQUARE_PAREN_R_27=RULE_SQUARE_PAREN_R
    { 
    newLeafNode(this_SQUARE_PAREN_R_27, grammarAccess.getProbabilityMassFunctionAccess().getSQUARE_PAREN_RTerminalRuleCall_3_4()); 
    }
))
;





// Entry rule entryRulenumeric_int_sample
entryRulenumeric_int_sample returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumeric_int_sampleRule()); }
	 iv_rulenumeric_int_sample=rulenumeric_int_sample 
	 { $current=$iv_rulenumeric_int_sample.current; } 
	 EOF 
;

// Rule numeric_int_sample
rulenumeric_int_sample returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_LPAREN_0=RULE_LPAREN
    { 
    newLeafNode(this_LPAREN_0, grammarAccess.getNumeric_int_sampleAccess().getLPARENTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumeric_int_sampleAccess().getValueSIGNED_INTParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleSIGNED_INT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumeric_int_sampleRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"SIGNED_INT");
	        afterParserOrEnumRuleCall();
	    }

)
)this_SEMI_2=RULE_SEMI
    { 
    newLeafNode(this_SEMI_2, grammarAccess.getNumeric_int_sampleAccess().getSEMITerminalRuleCall_2()); 
    }
(
(
		lv_probability_3_0=RULE_DOUBLE
		{
			newLeafNode(lv_probability_3_0, grammarAccess.getNumeric_int_sampleAccess().getProbabilityDOUBLETerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumeric_int_sampleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"probability",
        		lv_probability_3_0, 
        		"DOUBLE");
	    }

)
)this_RPAREN_4=RULE_RPAREN
    { 
    newLeafNode(this_RPAREN_4, grammarAccess.getNumeric_int_sampleAccess().getRPARENTerminalRuleCall_4()); 
    }
)
;





// Entry rule entryRulenumeric_real_sample
entryRulenumeric_real_sample returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumeric_real_sampleRule()); }
	 iv_rulenumeric_real_sample=rulenumeric_real_sample 
	 { $current=$iv_rulenumeric_real_sample.current; } 
	 EOF 
;

// Rule numeric_real_sample
rulenumeric_real_sample returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_LPAREN_0=RULE_LPAREN
    { 
    newLeafNode(this_LPAREN_0, grammarAccess.getNumeric_real_sampleAccess().getLPARENTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumeric_real_sampleAccess().getValueSIGNED_NUMBERParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleSIGNED_NUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumeric_real_sampleRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"SIGNED_NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)this_SEMI_2=RULE_SEMI
    { 
    newLeafNode(this_SEMI_2, grammarAccess.getNumeric_real_sampleAccess().getSEMITerminalRuleCall_2()); 
    }
(
(
		lv_probability_3_0=RULE_DOUBLE
		{
			newLeafNode(lv_probability_3_0, grammarAccess.getNumeric_real_sampleAccess().getProbabilityDOUBLETerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumeric_real_sampleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"probability",
        		lv_probability_3_0, 
        		"DOUBLE");
	    }

)
)this_RPAREN_4=RULE_RPAREN
    { 
    newLeafNode(this_RPAREN_4, grammarAccess.getNumeric_real_sampleAccess().getRPARENTerminalRuleCall_4()); 
    }
)
;





// Entry rule entryRulereal_pdf_sample
entryRulereal_pdf_sample returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReal_pdf_sampleRule()); }
	 iv_rulereal_pdf_sample=rulereal_pdf_sample 
	 { $current=$iv_rulereal_pdf_sample.current; } 
	 EOF 
;

// Rule real_pdf_sample
rulereal_pdf_sample returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_LPAREN_0=RULE_LPAREN
    { 
    newLeafNode(this_LPAREN_0, grammarAccess.getReal_pdf_sampleAccess().getLPARENTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReal_pdf_sampleAccess().getValueSIGNED_NUMBERParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleSIGNED_NUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReal_pdf_sampleRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"SIGNED_NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)this_SEMI_2=RULE_SEMI
    { 
    newLeafNode(this_SEMI_2, grammarAccess.getReal_pdf_sampleAccess().getSEMITerminalRuleCall_2()); 
    }
(
(
		lv_probability_3_0=RULE_DOUBLE
		{
			newLeafNode(lv_probability_3_0, grammarAccess.getReal_pdf_sampleAccess().getProbabilityDOUBLETerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReal_pdf_sampleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"probability",
        		lv_probability_3_0, 
        		"DOUBLE");
	    }

)
)this_RPAREN_4=RULE_RPAREN
    { 
    newLeafNode(this_RPAREN_4, grammarAccess.getReal_pdf_sampleAccess().getRPARENTerminalRuleCall_4()); 
    }
)
;





// Entry rule entryRulestringsample
entryRulestringsample returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringsampleRule()); }
	 iv_rulestringsample=rulestringsample 
	 { $current=$iv_rulestringsample.current; } 
	 EOF 
;

// Rule stringsample
rulestringsample returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_LPAREN_0=RULE_LPAREN
    { 
    newLeafNode(this_LPAREN_0, grammarAccess.getStringsampleAccess().getLPARENTerminalRuleCall_0()); 
    }
(
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getStringsampleAccess().getValueSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringsampleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
)this_SEMI_2=RULE_SEMI
    { 
    newLeafNode(this_SEMI_2, grammarAccess.getStringsampleAccess().getSEMITerminalRuleCall_2()); 
    }
(
(
		lv_probability_3_0=RULE_DOUBLE
		{
			newLeafNode(lv_probability_3_0, grammarAccess.getStringsampleAccess().getProbabilityDOUBLETerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringsampleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"probability",
        		lv_probability_3_0, 
        		"DOUBLE");
	    }

)
)this_RPAREN_4=RULE_RPAREN
    { 
    newLeafNode(this_RPAREN_4, grammarAccess.getStringsampleAccess().getRPARENTerminalRuleCall_4()); 
    }
)
;





// Entry rule entryRuleboolsample
entryRuleboolsample returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolsampleRule()); }
	 iv_ruleboolsample=ruleboolsample 
	 { $current=$iv_ruleboolsample.current; } 
	 EOF 
;

// Rule boolsample
ruleboolsample returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_LPAREN_0=RULE_LPAREN
    { 
    newLeafNode(this_LPAREN_0, grammarAccess.getBoolsampleAccess().getLPARENTerminalRuleCall_0()); 
    }
(
(
		lv_value_1_0=RULE_BOOLEAN_KEYWORDS
		{
			newLeafNode(lv_value_1_0, grammarAccess.getBoolsampleAccess().getValueBOOLEAN_KEYWORDSTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBoolsampleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"BOOLEAN_KEYWORDS");
	    }

)
)this_SEMI_2=RULE_SEMI
    { 
    newLeafNode(this_SEMI_2, grammarAccess.getBoolsampleAccess().getSEMITerminalRuleCall_2()); 
    }
(
(
		lv_probability_3_0=RULE_DOUBLE
		{
			newLeafNode(lv_probability_3_0, grammarAccess.getBoolsampleAccess().getProbabilityDOUBLETerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBoolsampleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"probability",
        		lv_probability_3_0, 
        		"DOUBLE");
	    }

)
)this_RPAREN_4=RULE_RPAREN
    { 
    newLeafNode(this_RPAREN_4, grammarAccess.getBoolsampleAccess().getRPARENTerminalRuleCall_4()); 
    }
)
;





// Entry rule entryRuleSIGNED_NUMBER
entryRuleSIGNED_NUMBER returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSIGNED_NUMBERRule()); } 
	 iv_ruleSIGNED_NUMBER=ruleSIGNED_NUMBER 
	 { $current=$iv_ruleSIGNED_NUMBER.current.getText(); }  
	 EOF 
;

// Rule SIGNED_NUMBER
ruleSIGNED_NUMBER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSIGNED_NUMBERAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_DOUBLE_1=RULE_DOUBLE    {
		$current.merge(this_DOUBLE_1);
    }

    { 
    newLeafNode(this_DOUBLE_1, grammarAccess.getSIGNED_NUMBERAccess().getDOUBLETerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleSIGNED_INT
entryRuleSIGNED_INT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSIGNED_INTRule()); } 
	 iv_ruleSIGNED_INT=ruleSIGNED_INT 
	 { $current=$iv_ruleSIGNED_INT.current.getText(); }  
	 EOF 
;

// Rule SIGNED_INT
ruleSIGNED_INT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSIGNED_INTAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_DECINT_1=RULE_DECINT    {
		$current.merge(this_DECINT_1);
    }

    { 
    newLeafNode(this_DECINT_1, grammarAccess.getSIGNED_INTAccess().getDECINTTerminalRuleCall_1()); 
    }
)
    ;





// Rule BooleanOperations
ruleBooleanOperations returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='AND' 
	{
        $current = grammarAccess.getBooleanOperationsAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBooleanOperationsAccess().getANDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='OR' 
	{
        $current = grammarAccess.getBooleanOperationsAccess().getOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBooleanOperationsAccess().getOREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='XOR' 
	{
        $current = grammarAccess.getBooleanOperationsAccess().getXOREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getBooleanOperationsAccess().getXOREnumLiteralDeclaration_2()); 
    }
));



// Rule andoperation
ruleandoperation returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='AND' 
	{
        $current = grammarAccess.getAndoperationAccess().getANDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAndoperationAccess().getANDEnumLiteralDeclaration()); 
    }
);



// Rule oroperations
ruleoroperations returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='OR' 
	{
        $current = grammarAccess.getOroperationsAccess().getOREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOroperationsAccess().getOREnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='XOR' 
	{
        $current = grammarAccess.getOroperationsAccess().getXOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOroperationsAccess().getXOREnumLiteralDeclaration_1()); 
    }
));



// Rule CompareOperations
ruleCompareOperations returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='>' 
	{
        $current = grammarAccess.getCompareOperationsAccess().getGREATEREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCompareOperationsAccess().getGREATEREnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<' 
	{
        $current = grammarAccess.getCompareOperationsAccess().getLESSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCompareOperationsAccess().getLESSEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='==' 
	{
        $current = grammarAccess.getCompareOperationsAccess().getEQUALSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getCompareOperationsAccess().getEQUALSEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='<>' 
	{
        $current = grammarAccess.getCompareOperationsAccess().getNOTEQUALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getCompareOperationsAccess().getNOTEQUALEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='>=' 
	{
        $current = grammarAccess.getCompareOperationsAccess().getGREATEREQUALEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getCompareOperationsAccess().getGREATEREQUALEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='<=' 
	{
        $current = grammarAccess.getCompareOperationsAccess().getLESSEQUALEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getCompareOperationsAccess().getLESSEQUALEnumLiteralDeclaration_5()); 
    }
));



// Rule TermOperations
ruleTermOperations returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getTermOperationsAccess().getADDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTermOperationsAccess().getADDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getTermOperationsAccess().getSUBEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTermOperationsAccess().getSUBEnumLiteralDeclaration_1()); 
    }
));



// Rule ProductOperations
ruleProductOperations returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='*' 
	{
        $current = grammarAccess.getProductOperationsAccess().getMULTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getProductOperationsAccess().getMULTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='/' 
	{
        $current = grammarAccess.getProductOperationsAccess().getDIVEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getProductOperationsAccess().getDIVEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='%' 
	{
        $current = grammarAccess.getProductOperationsAccess().getMODEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getProductOperationsAccess().getMODEnumLiteralDeclaration_2()); 
    }
));



// Rule UnitNames
ruleUnitNames returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='_' 
	{
        $current = grammarAccess.getUnitNamesAccess().getUNITLESSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnitNamesAccess().getUNITLESSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='unitless' 
	{
        $current = grammarAccess.getUnitNamesAccess().getUNITLESSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getUnitNamesAccess().getUNITLESSEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='B' 
	{
        $current = grammarAccess.getUnitNamesAccess().getBYTEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getUnitNamesAccess().getBYTEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='s' 
	{
        $current = grammarAccess.getUnitNamesAccess().getSECONDEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getUnitNamesAccess().getSECONDEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='m' 
	{
        $current = grammarAccess.getUnitNamesAccess().getMETEREnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getUnitNamesAccess().getMETEREnumLiteralDeclaration_4()); 
    }
));



RULE_DOUBLE : RULE_DECINT (RULE_DOT RULE_DIGIT*|(RULE_DOT RULE_DIGIT*)? ('E'|'e') ('-'|'+')? RULE_DECINT);

RULE_DECINT : ('0'|'1'..'9' RULE_DIGIT*);

RULE_BOOLEAN_KEYWORDS : ('false'|'true');

RULE_NOT : 'NOT';

RULE_INTPMF : 'IntPMF';

RULE_DOUBLEPMF : 'DoublePMF';

RULE_ENUMPMF : 'EnumPMF';

RULE_DOUBLEPDF : 'DoublePDF';

RULE_BOOLPMF : 'BoolPMF';

RULE_POW : '^';

RULE_LPAREN : '(';

RULE_RPAREN : ')';

RULE_SEMI : ';';

RULE_COLON : ',';

RULE_ORDERED_DEF : 'ordered';

RULE_SQUARE_PAREN_L : '[';

RULE_SQUARE_PAREN_R : ']';

fragment RULE_DIGIT : '0'..'9';

RULE_DOT : '.';

RULE_CONDDELIMITER : '?';

RULE_ELSEDELIMITER : ':';

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


